(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 * Business Idea
 */

/* --- VARIABLES --- */

// inputs (to get information) : id ; value
var inputs = {
    "#m-1": 0,
    "#m-2": 0,
    "#m-3": 0,
    "#m-4": 0,
    "#m-5": 0,

    "#f-6-1a": 0,
    "#f-6-2a": 0,
    "#f-6-3a": 0,
    "#f-6-4a": 0,
    "#f-6-5a": 0,

    "#c-7-1a": 0,
    "#c-7-2a": 0,
    "#c-7-3a": 0,
    "#c-7-4a": 0,
    "#c-7-5a": 0,
    "#c-7-6a": 0,

    "#c-9": 0,

    "#g-1": 0,
    "#g-2": 0,
    "#g-3": 0,

    "#b-12": 0
};
// array of input keys

var inputsa = ["#m-1", "#m-2", "#m-3", "#m-4", "#m-5", "#f-6-1a", "#f-6-2a", "#f-6-3a", "#f-6-4a", "#f-6-5a", "#c-7-1a", "#c-7-2a", "#c-7-3a", "#c-7-4a", "#c-7-5a", "#c-7-6a", "#c-9", "#g-1", "#g-2", "#g-3", "#b-12"];

// outputs (to show information) : id ; value
var outputs = {
    "#f-2": inputs["#m-2"],

    "#f-6-1q": inputs["#m-2"] * 0.5,
    "#f-6-2q": inputs["#m-2"] * 0.7,
    "#f-6-3q": inputs["#m-2"],
    "#f-6-4q": inputs["#m-2"] * 1.3,
    "#f-6-5q": inputs["#m-2"] * 1.5,

    "#c-6-1a": inputs["#f-6-1a"],
    "#c-6-2a": inputs["#f-6-2a"],
    "#c-6-3a": inputs["#f-6-3a"],
    "#c-6-4a": inputs["#f-6-4a"],
    "#c-6-5a": inputs["#f-6-5a"],

    "#c-6-1q": inputs["#m-2"] * 0.5,
    "#c-6-2q": inputs["#m-2"] * 0.7,
    "#c-6-3q": inputs["#m-2"],
    "#c-6-4q": inputs["#m-2"] * 1.3,
    "#c-6-5q": inputs["#m-2"] * 1.5,

    "#c-7-1q": inputs["#m-2"] / (1 + inputs["#m-5"]) * 0.5,
    "#c-7-2q": inputs["#m-2"] / (1 + inputs["#m-5"]) * 0.7,
    "#c-7-3q": inputs["#m-2"] / (1 + inputs["#m-5"]) * 0.9,
    "#c-7-4q": inputs["#m-2"] / (1 + inputs["#m-5"]) * 1.2,
    "#c-7-5q": inputs["#m-2"] / (1 + inputs["#m-5"]) * 1.5

    //   "#c-7-1": document.querySelector('input[name="c7"]:checked').value,
};

var scores = {
    "m-s": "0",
    "f-s": "0",
    "c-s": "0",
    "g-s": "0",
    "b-s": "0",
    "t-s": "0"
};

var scores_desc = {
    "a": {
        "desc": "very weak",
        "lower_limit": -2,
        "higher_limit": 2
    },
    "b": {
        "desc": "weak",
        "lower_limit": 2,
        "higher_limit": 3
    },
    "c": {
        "desc": "average",
        "lower_limit": 3,
        "higher_limit": 4
    },
    "d": {
        "desc": "strong",
        "lower_limit": 4,
        "higher_limit": 5
    },
    "e": {
        "desc": "very strong",
        "lower_limit": 4,
        "higher_limit": 150
    }
};

var regex = {
    id: /#(\D)-(\d)-?(\d?)/i
};

/* --- EVENTS --- */

// Ready
$(function () {
    // Get LocalStorage
    // Set the inputs
    // Set the outputs
    // Set the Scores
    // Set the final Score
});

// Change
inputsa.forEach(function (key) {
    //console.log("forEach comeÃ§ou " + key +" = " + inputs[key]); 
    $(key).change(function () {
        //console.log("detectou change na " + key);
        inputs[key] = $(key).val();
        setOutputs();
        showMenu();
        //console.log("I've changed"); 
        //console.log(inputs); 
    });
}); //forach inputsa

//show menus
function showMenu() {
    if (inputs["#m-1"] !== 0 && inputs["#m-2"] !== 0 && inputs["#m-3"] !== 0 && inputs["#m-4"] !== 0 && inputs["#m-5"] !== 0) {
        $("#fit_bar").removeClass("hidden");
        $("#marketnext").removeClass("hidden");
        $("#bi_bar").css("width", "20%");
    }
    if (inputs["#f-6-1a"] !== 0 && inputs["#f-6-2a"] !== 0 && inputs["#f-6-3a"] !== 0 && inputs["#f-6-4a"] !== 0 && inputs["#f-6-5a"] !== 0) {
        $("#competitive_bar").removeClass("hidden");
        $("#fitnext").removeClass("hidden");
        $("#bi_bar").css("width", "40%");
    }
    if (inputs["#c-9"] !== 0 && typeof document.querySelector("input[name='c-7']:checked") !== undefined) {
        $("#growth_bar").removeClass("hidden");
        $("#competitivenext").removeClass("hidden");
        $("#bi_bar").css("width", "60%");
    }
    if (inputs["#g-1"] !== 0 && inputs["#g-2"] !== 0 && inputs["#g-3"] !== 0) {
        $("#barriers_bar").removeClass("hidden");
        $("#grownext").removeClass("hidden");
        $("#bi_bar").css("width", "80%");
    }

    if (inputs["#b-12"] !== 0) {
        $("#score_bar").removeClass("hidden");
        $("#barriersnext").removeClass("hidden");
        $("#bi_bar").css("width", "100%");
    }
};

//set outputs
function setOutputs() {
    if (inputs["#m-2"] != 0) {
        outputs["#f-2"] = inputs["#m-2"];
        $("#f-2").text(inputs["#m-2"]);

        outputs["#f-6-1q"] = inputs["#m-2"] * 0.5;
        f61q = Math.round(outputs["#f-6-1q"] * 100);
        $("#f-6-1q").text(f61q / 100);

        outputs["#f-6-2q"] = inputs["#m-2"] * 0.7;
        f62q = Math.round(outputs["#f-6-2q"] * 100);
        $("#f-6-2q").text(f62q / 100);

        outputs["#f-6-3q"] = inputs["#m-2"];
        f63q = Math.round(outputs["#f-6-3q"] * 100);
        $("#f-6-3q").text(f63q / 100);

        outputs["#f-6-4q"] = inputs["#m-2"] * 1.3;
        f64q = Math.round(outputs["#f-6-4q"] * 100);
        $("#f-6-4q").text(f64q / 100);

        outputs["#f-6-5q"] = inputs["#m-2"] * 1.5;
        f65q = Math.round(outputs["#f-6-5q"] * 100);
        $("#f-6-5q").text(f65q / 100);

        /* $("#g-1").change(
         function()
             {
             $("#g9v").text(inputs["#g-1"]);
         }); 
           $("#g-2").change(
         function()
             {
             $("#g10v").text(inputs["#g-2"]); 
         }); 
             $("#g-3").change(
         function()
             {
             $("#g11v").text(inputs["#g-3"]);
         }); 
         */
        outputs["#c-6-1q"] = inputs["#m-2"] * 0.5;
        c61q = Math.round(outputs["#c-6-1q"] * 100);
        $("#c-6-1q").text(c61q / 100);

        outputs["#c-6-2q"] = inputs["#m-2"] * 0.7;
        c62q = Math.round(outputs["#c-6-2q"] * 100);
        $("#c-6-2q").text(c62q / 100);

        outputs["#c-6-3q"] = inputs["#m-2"];
        c63q = Math.round(outputs["#c-6-3q"] * 100);
        $("#c-6-3q").text(c63q / 100);

        outputs["#c-6-4q"] = inputs["#m-2"] * 1.3;
        c64q = Math.round(outputs["#c-6-4q"] * 100);
        $("#c-6-4q").text(c64q / 100);

        outputs["#c-6-5q"] = inputs["#m-2"] * 1.5;
        c65q = Math.round(outputs["#c-6-5q"] * 100);
        $("#c-6-5q").text(c65q / 100);

        if (inputs["#m-5"] != 0) {
            outputs["#c-7-1q"] = inputs["#m-2"] / (1 + inputs["#m-5"]) * 50;
            a1 = Math.round(outputs["#c-7-1q"] * 100);
            $("#c-7-1q").text(a1 / 100);

            outputs["#c-7-2q"] = inputs["#m-2"] / (1 + inputs["#m-5"]) * 70;
            a2 = Math.round(outputs["#c-7-2q"] * 100);
            $("#c-7-2q").text(a2 / 100);

            outputs["#c-7-3q"] = inputs["#m-2"] / (1 + inputs["#m-5"]) * 100;
            a3 = Math.round(outputs["#c-7-3q"] * 100);
            $("#c-7-3q").text(a3 / 100);

            outputs["#c-7-4q"] = inputs["#m-2"] / (1 + inputs["#m-5"]) * 130;
            a4 = Math.round(outputs["#c-7-4q"] * 100);
            $("#c-7-4q").text(a4 / 100);

            outputs["#c-7-5q"] = inputs["#m-2"] / (1 + inputs["#m-5"]) * 150;
            a5 = Math.round(outputs["#c-7-5q"] * 100);
            $("#c-7-5q").text(a5 / 100);
        }
    };
    if (inputs["#f-6-1a"] != 0) {
        outputs["#c-6-1a"] = inputs["#f-6-1a"];
        a10 = Math.round(inputs["#f-6-1a"] * 100);
        $("#c-6-1a").text(a10 / 100);
    };
    if (inputs["#f-6-2a"] != 0) {
        outputs["#c-6-2a"] = inputs["#f-6-2a"];
        a10 = Math.round(inputs["#f-6-2a"] * 100);
        $("#c-6-2a").text(a10 / 100);
    };

    if (inputs["#f-6-3a"] != 0) {
        outputs["#c-6-3a"] = inputs["#f-6-3a"];
        a10 = Math.round(inputs["#f-6-3a"] * 100);
        $("#c-6-3a").text(a10 / 100);
    };
    if (inputs["#f-6-4a"] != 0) {
        outputs["#c-6-4a"] = inputs["#f-6-4a"];
        a10 = Math.round(inputs["#f-6-4a"] * 100);
        $("#c-6-4a").text(a10 / 100);
    };
    if (inputs["#f-6-5a"] != 0) {
        outputs["#c-6-5a"] = inputs["#f-6-5a"];
        a10 = Math.round(inputs["#f-6-5a"] * 100);
        $("#c-6-5a").text(a10 / 100);
    };

    if (inputs["#m-1"] !== 0 && inputs["#m-2"] !== 0 && inputs["#m-3"] !== 0 && inputs["#m-4"] !== 0 && inputs["#m-5"] !== 0) {
        ms = valuemarketScore();
        //$("#m-s").text(ms) ;
        scores["m-s"] = ms;
        //console.log(scores); 
    };

    if (inputs["f-6-1a"] !== 0 && inputs["f-6-2a"] !== 0 && inputs["f-6-3a"] !== 0 && inputs["f-6-4a"] !== 0 && inputs["f-6-5a"] !== 0) {
        fs = fitScore();
        //$("#f-s").text(fs); 
        scores["f-s"] = fs;
        //console.log(scores); 
    };

    if (inputs["#c-9"] !== 0 && typeof document.querySelector("input[name='c-7']:checked") !== undefined) {
        cs = competitiveScore();
        //$("#c-s").text(cs); 
        scores["c-s"] = cs;
        //console.log(scores); 
    };

    if (inputs["#g-1"] !== 0 && inputs["#g-2"] !== 0 && inputs["#g-3"] !== 0) {
        gs = growthScore();
        //$("#g-s").text(gs); 
        scores["g-s"] = gs;
        //console.log(scores); 
    };

    if (inputs["#b-12"] !== 0) {
        bs = barriersScore();
        //console.log(bs); 
        //$("#b-s").text(bs);
        scores["b-s"] = bs;
        //console.log(scores);
    };

    if (scores["m-s"] !== "0" && scores["f-s"] !== "0" && scores["c-s"] !== "0" && scores["g-s"] !== "0" && scores["b-s"] !== "0") {
        ts = finalScore();
        $("#t-s").html("<p>Your business opportunity is <strong>" + ts + "</strong>.</p> <ul><li> The Market you chose to operate in is " + findDesc(ms) + "</li>" + "<li> Customer has a " + findDesc(fs) + " interest in your product or service</li><li> You have a " + findDesc(cs) + " competitive advantage</li><li>Your Growth opportunities are " + findDesc(gs) + "</li><li> The barriers to enter are " + findDesc(Math.pow(bs, 1 / 4)) + "</li></ul>");
        //console.log(scores);
    };
}

/* --- SYSTEMS --- */
// Score System

function valuemarketScore() {
    return Math.pow(inputs["#m-1"] * inputs["#m-2"] * inputs["#m-3"] * (1 + inputs["#m-4"]) * inputs["#m-5"] / 20000, 1 / 10) / 2;
}

function fitScore() {
    return (inputs["#f-6-3a"] / 100 * 5 + inputs["#f-6-1a"] / 100 * 5 + inputs["#f-6-5a"] / 100 * 5) / 2.5 + 1;
}

function competitiveScore() {
    //console.log("competitive score inicio de cÃ¡lculo")
    switch (document.querySelector("input[name='c-7']:checked").value) {
        case "1":
            a = inputs["#f-6-1a"] / 100; //willingness to pay in marginal cost
            b = inputs["#c-9"] / (inputs["#m-1"] * inputs["#m-2"] * inputs["#m-3"]); // Cost structure vs Market size
            c = outputs["#c-7-1q"] / (inputs["#m-2"] * (1 - inputs["#m-5"] / 100));
            //console.log("a= " + a + " b = " + b + " c= " + c)
            return Math.max(Math.log10(Math.pow(Math.pow(a, 2) * (1 / b) + c * 3, 4)), 0);
        case "2":
            a = inputs["#f-6-2a"] / 100; //willingness to pay in marginal cost
            b = inputs["#c-9"] / (inputs["#m-1"] * inputs["#m-2"] * inputs["#m-3"]); // Cost structure vs Market size
            c = outputs["#c-7-2q"] / (inputs["#m-2"] * (1 - inputs["#m-5"] / 100));
            return Math.max(Math.log10(Math.pow(Math.pow(a, 2) * (1 / b) + c * 3, 4)), 0);
        case "3":
            a = inputs["#f-6-3a"] / 100; //willingness to pay in marginal cost
            b = inputs["#c-9"] / (inputs["#m-1"] * inputs["#m-2"] * inputs["#m-3"]); // Cost structure vs Market size
            c = outputs["#c-7-3q"] / (inputs["#m-2"] * (1 - inputs["#m-5"] / 100));
            return Math.max(Math.log10(Math.pow(Math.pow(a, 2) * (1 / b) + c * 3, 4)), 0);
        case "4":
            a = inputs["#f-6-4a"] / 100; //willingness to pay in marginal cost
            b = inputs["#c-9"] / (inputs["#m-1"] * inputs["#m-2"] * inputs["#m-3"]); // Cost structure vs Market size
            c = outputs["#c-7-4q"] / (inputs["#m-2"] * (1 - inputs["#m-5"] / 100));
            return Math.max(Math.log10(Math.pow(Math.pow(a, 2) * (1 / b) + c * 3, 4)), 0);
        case "5":
            a = inputs["#f-6-5a"] / 100; //willingness to pay in marginal cost
            b = inputs["#c-9"] / (inputs["#m-1"] * inputs["#m-2"] * inputs["#m-3"]); // Cost structure vs Market size
            c = outputs["#c-7-5q"] / (inputs["#m-2"] * (1 - inputs["#m-5"] / 100));
            return Math.max(Math.log10(Math.pow(Math.pow(a, 2) * (1 / b) + c * 3, 4)), 0);
    } //fim de switch 
}

function growthScore() {
    a = Math.pow(Math.pow(Math.pow(inputs["#g-1"], inputs["#g-2"]), inputs["#g-3"]), 1 / 70);
    b = Number(inputs["#g-1"]) + Number(inputs["#g-2"]) + Number(inputs["#g-3"]);
    //console.log("a = " + a); 
    //console.log("b = " + b); 
    return Math.pow(a * b, 1 / 4);
}

function barriersScore() {
    //console.log("lanÃ§ada a funÃ§Ã£o de cÃ¡lculo de bs com a var de input = " + inputs["#b-12"] +" que Ã© um " + typeof Number(inputs["#b-12"]) ); 
    a = Math.log10(Number(inputs["#b-12"])) - 2;
    b = 25;
    c = Math.pow(a, 2) * b;
    //console.log(" a = " + a + " b = " + b  + " c = " +c ); 
    return c;
}

function finalScore() {
    //console.log("inicio de finalScore"); 
    //console.log(scores); 
    a = valuemarketScore() * fitScore() * competitiveScore() * growthScore() / barriersScore();
    scores["t-s"] = a;
    //console.log(scores); 
    return findDesc(a);
}

// Description
function findDesc(x) {
    for (i = 0; i < Object.keys(scores_desc).length; i++) {
        key = Object.keys(scores_desc)[i];
        //console.log("key=" + key);
        //console.log(scores_desc.a.lower_limit); 
        if (x <= scores_desc[key].higher_limit && x >= scores_desc[key].lower_limit) {
            //console.log(scores); 
            return scores_desc[key].desc;
        }
    }
}

// Validation System

// verify : id - input id
function verify(id) {
    var nr = convertToNumber($(id).val());
    if (nr === false) {
        return false;
    }

    switch (id) {
        // Integer
        case "#m-1":
        case "#m-2":
        case "#c-9":
        case "#g-1":
        case "#g-2":
        case "#b-12":
            return isInt(nr) && numberBetween(nr, -1);

        // Float
        case "#m-3":
            return isFloat(nr) && numberBetween(nr, -1);

        // Percentage
        case "#m-4":
        case "#m-5":
        case "#f-6-1a":
        case "#f-6-2a":
        case "#f-6-3a":
        case "#f-6-4a":
        case "#f-6-5a":

            return isInt(nr) && numberBetween(nr, -1, 101);

        default:
            return false;
    }
}

// clean : input - jQuery obj ; spaces - boolean, default false, Return with or without spaces.
function clean(input, spaces) {
    if (typeof spaces === "undefined") {
        spaces = false;
    }
    input.val(function (i, val) {
        if (spaces) {
            return val.trim().split(/\s+/g).join(" ");
        } else {
            return val.trim().split(/\s+/g).join("");
        }
    });
}

// convertToNumber : id - input id : return a number or false
function convertToNumber(id) {
    var nr;
    $(id).val(function (i, val) {
        nr = Number(val);
        if (Number(val) != nr) {
            nr = false;
        }
    });
    return nr;
}

// numberBetween : n - Number obj ; min / max - number, optional
function numberBetween(n, min, max) {
    if (Number(n) !== n) {
        return false;
    } else {
        if (typeof min === "undefined" && typeof max === "undefined") {
            return true;
        } else if (typeof min !== "undefined" && typeof max === "undefined") {
            return nr > min;
        } else if (typeof min === "undefined" && typeof max !== "undefined") {
            return nr < max;
        } else {
            return nr > min && nr < max;
        }
    }
}

// isInt : n - Number obj
function isInt(n) {
    return Number(n) === n && n % 1 === 0;
}

// isFloat : n - Number obj
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}

//next buttons
$("body").on("click", "#marketnext", function () {
    $('a[href="#fit"]').click();
});

$("body").on("click", "#fitnext", function () {
    $('a[href="#competitive"]').click();
});

$("body").on("click", "#competitivenext", function () {
    $('a[href="#growth"]').click();
});

$("body").on("click", "#grownext", function () {
    $('a[href="#barriers"]').click();
});

$("body").on("click", "#barriersnext", function () {
    $('a[href="#score"]').click();
});
/* --- TOOLS --- */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("9FoBSB"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/business_idea.js","/")
},{"9FoBSB":5,"buffer":3}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var PLUS = '+'.charCodeAt(0);
	var SLASH = '/'.charCodeAt(0);
	var NUMBER = '0'.charCodeAt(0);
	var LOWER = 'a'.charCodeAt(0);
	var UPPER = 'A'.charCodeAt(0);
	var PLUS_URL_SAFE = '-'.charCodeAt(0);
	var SLASH_URL_SAFE = '_'.charCodeAt(0);

	function decode(elt) {
		var code = elt.charCodeAt(0);
		if (code === PLUS || code === PLUS_URL_SAFE) return 62; // '+'
		if (code === SLASH || code === SLASH_URL_SAFE) return 63; // '/'
		if (code < NUMBER) return -1; //no match
		if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
		if (code < UPPER + 26) return code - UPPER;
		if (code < LOWER + 26) return code - LOWER + 26;
	}

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4');
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length;
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		var L = 0;

		function push(v) {
			arr[L++] = v;
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
			push((tmp & 0xFF0000) >> 16);
			push((tmp & 0xFF00) >> 8);
			push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
			push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
			push(tmp >> 8 & 0xFF);
			push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
		    extraBytes = uint8.length % 3,
		    // if we have 1 byte left, pad 2 bytes
		output = "",
		    temp,
		    length;

		function encode(num) {
			return lookup.charAt(num);
		}

		function tripletToBase64(num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F);
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += encode(temp >> 2);
				output += encode(temp << 4 & 0x3F);
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
				output += encode(temp >> 10);
				output += encode(temp >> 4 & 0x3F);
				output += encode(temp << 2 & 0x3F);
				output += '=';
				break;
		}

		return output;
	}

	exports.toByteArray = b64ToByteArray;
	exports.fromByteArray = uint8ToBase64;
})(typeof exports === 'undefined' ? this.base64js = {} : exports);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("9FoBSB"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\..\\node_modules\\base64-js\\lib")
},{"9FoBSB":5,"buffer":3}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js');
var ieee754 = require('ieee754');

exports.Buffer = Buffer;
exports.SlowBuffer = Buffer;
exports.INSPECT_MAX_BYTES = 50;
Buffer.poolSize = 8192;

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0);
    var arr = new Uint8Array(buf);
    arr.foo = function () {
      return 42;
    };
    return 42 === arr.foo() && typeof arr.subarray === 'function'; // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false;
  }
}();

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer(subject, encoding, noZero) {
  if (!(this instanceof Buffer)) return new Buffer(subject, encoding, noZero);

  var type = typeof subject;

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject);
    while (subject.length % 4 !== 0) {
      subject = subject + '=';
    }
  }

  // Find the length
  var length;
  if (type === 'number') length = coerce(subject);else if (type === 'string') length = Buffer.byteLength(subject, encoding);else if (type === 'object') length = coerce(subject.length); // assume that object is array-like
  else throw new Error('First argument needs to be a number, array or string.');

  var buf;
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length));
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this;
    buf.length = length;
    buf._isBuffer = true;
  }

  var i;
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject);
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject)) buf[i] = subject.readUInt8(i);else buf[i] = subject[i];
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding);
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0;
    }
  }

  return buf;
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer);
};

Buffer.byteLength = function (str, encoding) {
  var ret;
  str = str + '';
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2;
      break;
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length;
      break;
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length;
      break;
    case 'base64':
      ret = base64ToBytes(str).length;
      break;
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2;
      break;
    default:
      throw new Error('Unknown encoding');
  }
  return ret;
};

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' + 'list should be an Array.');

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  var i;
  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length;
    }
  }

  var buf = new Buffer(totalLength);
  var pos = 0;
  for (i = 0; i < list.length; i++) {
    var item = list[i];
    item.copy(buf, pos);
    pos += item.length;
  }
  return buf;
};

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  assert(strLen % 2 === 0, 'Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    assert(!isNaN(byte), 'Invalid hex string');
    buf[offset + i] = byte;
  }
  Buffer._charsWritten = i * 2;
  return i;
}

function _utf8Write(buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length);
  return charsWritten;
}

function _asciiWrite(buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length);
  return charsWritten;
}

function _binaryWrite(buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length);
}

function _base64Write(buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length);
  return charsWritten;
}

function _utf16leWrite(buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length);
  return charsWritten;
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {
    // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = Number(offset) || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  var ret;
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length);
      break;
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length);
      break;
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length);
      break;
    case 'binary':
      ret = _binaryWrite(this, string, offset, length);
      break;
    case 'base64':
      ret = _base64Write(this, string, offset, length);
      break;
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length);
      break;
    default:
      throw new Error('Unknown encoding');
  }
  return ret;
};

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this;

  encoding = String(encoding || 'utf8').toLowerCase();
  start = Number(start) || 0;
  end = end !== undefined ? Number(end) : end = self.length;

  // Fastpath empty strings
  if (end === start) return '';

  var ret;
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end);
      break;
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end);
      break;
    case 'ascii':
      ret = _asciiSlice(self, start, end);
      break;
    case 'binary':
      ret = _binarySlice(self, start, end);
      break;
    case 'base64':
      ret = _base64Slice(self, start, end);
      break;
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end);
      break;
    default:
      throw new Error('Unknown encoding');
  }
  return ret;
};

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this;

  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (!target_start) target_start = 0;

  // Copy 0 bytes; we're done
  if (end === start) return;
  if (target.length === 0 || source.length === 0) return;

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart');
  assert(target_start >= 0 && target_start < target.length, 'targetStart out of bounds');
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds');
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - target_start < end - start) end = target.length - target_start + start;

  var len = end - start;

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++) target[i + target_start] = this[i + start];
  } else {
    target._set(this.subarray(start, start + len), target_start);
  }
};

function _base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function _utf8Slice(buf, start, end) {
  var res = '';
  var tmp = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
      tmp = '';
    } else {
      tmp += '%' + buf[i].toString(16);
    }
  }

  return res + decodeUtf8Char(tmp);
}

function _asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; i++) ret += String.fromCharCode(buf[i]);
  return ret;
}

function _binarySlice(buf, start, end) {
  return _asciiSlice(buf, start, end);
}

function _hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(buf[i]);
  }
  return out;
}

function _utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length;
  start = clamp(start, len, 0);
  end = clamp(end, len, len);

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end));
  } else {
    var sliceLen = end - start;
    var newBuf = new Buffer(sliceLen, undefined, true);
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start];
    }
    return newBuf;
  }
};

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.');
  return this.readUInt8(offset);
};

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.');
  return this.writeUInt8(v, offset);
};

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset < this.length, 'Trying to read beyond buffer length');
  }

  if (offset >= this.length) return;

  return this[offset];
};

function _readUInt16(buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length');
  }

  var len = buf.length;
  if (offset >= len) return;

  var val;
  if (littleEndian) {
    val = buf[offset];
    if (offset + 1 < len) val |= buf[offset + 1] << 8;
  } else {
    val = buf[offset] << 8;
    if (offset + 1 < len) val |= buf[offset + 1];
  }
  return val;
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert);
};

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert);
};

function _readUInt32(buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length');
  }

  var len = buf.length;
  if (offset >= len) return;

  var val;
  if (littleEndian) {
    if (offset + 2 < len) val = buf[offset + 2] << 16;
    if (offset + 1 < len) val |= buf[offset + 1] << 8;
    val |= buf[offset];
    if (offset + 3 < len) val = val + (buf[offset + 3] << 24 >>> 0);
  } else {
    if (offset + 1 < len) val = buf[offset + 1] << 16;
    if (offset + 2 < len) val |= buf[offset + 2] << 8;
    if (offset + 3 < len) val |= buf[offset + 3];
    val = val + (buf[offset] << 24 >>> 0);
  }
  return val;
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert);
};

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset < this.length, 'Trying to read beyond buffer length');
  }

  if (offset >= this.length) return;

  var neg = this[offset] & 0x80;
  if (neg) return (0xff - this[offset] + 1) * -1;else return this[offset];
};

function _readInt16(buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length');
  }

  var len = buf.length;
  if (offset >= len) return;

  var val = _readUInt16(buf, offset, littleEndian, true);
  var neg = val & 0x8000;
  if (neg) return (0xffff - val + 1) * -1;else return val;
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert);
};

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert);
};

function _readInt32(buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length');
  }

  var len = buf.length;
  if (offset >= len) return;

  var val = _readUInt32(buf, offset, littleEndian, true);
  var neg = val & 0x80000000;
  if (neg) return (0xffffffff - val + 1) * -1;else return val;
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert);
};

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert);
};

function _readFloat(buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length');
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4);
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert);
};

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert);
};

function _readDouble(buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length');
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8);
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert);
};

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert);
};

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset < this.length, 'trying to write beyond buffer length');
    verifuint(value, 0xff);
  }

  if (offset >= this.length) return;

  this[offset] = value;
};

function _writeUInt16(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length');
    verifuint(value, 0xffff);
  }

  var len = buf.length;
  if (offset >= len) return;

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert);
};

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert);
};

function _writeUInt32(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length');
    verifuint(value, 0xffffffff);
  }

  var len = buf.length;
  if (offset >= len) return;

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert);
};

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset < this.length, 'Trying to write beyond buffer length');
    verifsint(value, 0x7f, -0x80);
  }

  if (offset >= this.length) return;

  if (value >= 0) this.writeUInt8(value, offset, noAssert);else this.writeUInt8(0xff + value + 1, offset, noAssert);
};

function _writeInt16(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length');
    verifsint(value, 0x7fff, -0x8000);
  }

  var len = buf.length;
  if (offset >= len) return;

  if (value >= 0) _writeUInt16(buf, value, offset, littleEndian, noAssert);else _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert);
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert);
};

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert);
};

function _writeInt32(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length');
    verifsint(value, 0x7fffffff, -0x80000000);
  }

  var len = buf.length;
  if (offset >= len) return;

  if (value >= 0) _writeUInt32(buf, value, offset, littleEndian, noAssert);else _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert);
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert);
};

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert);
};

function _writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length');
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  var len = buf.length;
  if (offset >= len) return;

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert);
};

function _writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value');
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian');
    assert(offset !== undefined && offset !== null, 'missing offset');
    assert(offset + 7 < buf.length, 'Trying to write beyond buffer length');
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  var len = buf.length;
  if (offset >= len) return;

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert);
};

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0;
  if (!start) start = 0;
  if (!end) end = this.length;

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number');
  assert(end >= start, 'end < start');

  // Fill 0 bytes; we're done
  if (end === start) return;
  if (this.length === 0) return;

  assert(start >= 0 && start < this.length, 'start out of bounds');
  assert(end >= 0 && end <= this.length, 'end out of bounds');

  for (var i = start; i < end; i++) {
    this[i] = value;
  }
};

Buffer.prototype.inspect = function () {
  var out = [];
  var len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<Buffer ' + out.join(' ') + '>';
};

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return new Buffer(this).buffer;
    } else {
      var buf = new Uint8Array(this.length);
      for (var i = 0, len = buf.length; i < len; i += 1) buf[i] = this[i];
      return buf.buffer;
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser');
  }
};

// HELPER FUNCTIONS
// ================

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

var BP = Buffer.prototype;

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true;

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get;
  arr._set = arr.set;

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get;
  arr.set = BP.set;

  arr.write = BP.write;
  arr.toString = BP.toString;
  arr.toLocaleString = BP.toString;
  arr.toJSON = BP.toJSON;
  arr.copy = BP.copy;
  arr.slice = BP.slice;
  arr.readUInt8 = BP.readUInt8;
  arr.readUInt16LE = BP.readUInt16LE;
  arr.readUInt16BE = BP.readUInt16BE;
  arr.readUInt32LE = BP.readUInt32LE;
  arr.readUInt32BE = BP.readUInt32BE;
  arr.readInt8 = BP.readInt8;
  arr.readInt16LE = BP.readInt16LE;
  arr.readInt16BE = BP.readInt16BE;
  arr.readInt32LE = BP.readInt32LE;
  arr.readInt32BE = BP.readInt32BE;
  arr.readFloatLE = BP.readFloatLE;
  arr.readFloatBE = BP.readFloatBE;
  arr.readDoubleLE = BP.readDoubleLE;
  arr.readDoubleBE = BP.readDoubleBE;
  arr.writeUInt8 = BP.writeUInt8;
  arr.writeUInt16LE = BP.writeUInt16LE;
  arr.writeUInt16BE = BP.writeUInt16BE;
  arr.writeUInt32LE = BP.writeUInt32LE;
  arr.writeUInt32BE = BP.writeUInt32BE;
  arr.writeInt8 = BP.writeInt8;
  arr.writeInt16LE = BP.writeInt16LE;
  arr.writeInt16BE = BP.writeInt16BE;
  arr.writeInt32LE = BP.writeInt32LE;
  arr.writeInt32BE = BP.writeInt32BE;
  arr.writeFloatLE = BP.writeFloatLE;
  arr.writeFloatBE = BP.writeFloatBE;
  arr.writeDoubleLE = BP.writeDoubleLE;
  arr.writeDoubleBE = BP.writeDoubleBE;
  arr.fill = BP.fill;
  arr.inspect = BP.inspect;
  arr.toArrayBuffer = BP.toArrayBuffer;

  return arr;
};

// slice(start, end)
function clamp(index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue;
  index = ~~index; // Coerce to integer.
  if (index >= len) return len;
  if (index >= 0) return index;
  index += len;
  if (index >= 0) return index;
  return 0;
}

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}

function isArray(subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]';
  })(subject);
}

function isArrayish(subject) {
  return isArray(subject) || Buffer.isBuffer(subject) || subject && typeof subject === 'object' && typeof subject.length === 'number';
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i);
    if (b <= 0x7F) byteArray.push(str.charCodeAt(i));else {
      var start = i;
      if (b >= 0xD800 && b <= 0xDFFF) i++;
      var h = encodeURIComponent(str.slice(start, i + 1)).substr(1).split('%');
      for (var j = 0; j < h.length; j++) byteArray.push(parseInt(h[j], 16));
    }
  }
  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(str);
}

function blitBuffer(src, dst, offset, length) {
  var pos;
  for (var i = 0; i < length; i++) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint(value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number');
  assert(value >= 0, 'specified a negative value for writing an unsigned value');
  assert(value <= max, 'value is larger than maximum value for type');
  assert(Math.floor(value) === value, 'value has a fractional component');
}

function verifsint(value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number');
  assert(value <= max, 'value larger than maximum allowed value');
  assert(value >= min, 'value smaller than minimum allowed value');
  assert(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number');
  assert(value <= max, 'value larger than maximum allowed value');
  assert(value >= min, 'value smaller than minimum allowed value');
}

function assert(test, message) {
  if (!test) throw new Error(message || 'Failed assertion');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("9FoBSB"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\..\\node_modules\\buffer\\index.js","/..\\..\\..\\node_modules\\buffer")
},{"9FoBSB":5,"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWd0ZWlcXERvY3VtZW50c1xcZ2l0aHViXFxpZGVhbmluamFfZGV2XFxub2RlX21vZHVsZXNcXGllZWU3NTRcXGluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZWFkIiwiYnVmZmVyIiwib2Zmc2V0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlIiwibSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImkiLCJkIiwicyIsIk5hTiIsIkluZmluaXR5IiwiTWF0aCIsInBvdyIsIndyaXRlIiwidmFsdWUiLCJjIiwicnQiLCJhYnMiLCJpc05hTiIsImZsb29yIiwibG9nIiwiTE4yIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBUUMsSUFBUixHQUFlLFVBQVVDLE1BQVYsRUFBa0JDLE1BQWxCLEVBQTBCQyxJQUExQixFQUFnQ0MsSUFBaEMsRUFBc0NDLE1BQXRDLEVBQThDO0FBQzNELE1BQUlDLENBQUosRUFBT0MsQ0FBUDtBQUNBLE1BQUlDLE9BQU9ILFNBQVMsQ0FBVCxHQUFhRCxJQUFiLEdBQW9CLENBQS9CO0FBQ0EsTUFBSUssT0FBTyxDQUFDLEtBQUtELElBQU4sSUFBYyxDQUF6QjtBQUNBLE1BQUlFLFFBQVFELFFBQVEsQ0FBcEI7QUFDQSxNQUFJRSxRQUFRLENBQUMsQ0FBYjtBQUNBLE1BQUlDLElBQUlULE9BQVFFLFNBQVMsQ0FBakIsR0FBc0IsQ0FBOUI7QUFDQSxNQUFJUSxJQUFJVixPQUFPLENBQUMsQ0FBUixHQUFZLENBQXBCO0FBQ0EsTUFBSVcsSUFBSWIsT0FBT0MsU0FBU1UsQ0FBaEIsQ0FBUjs7QUFFQUEsT0FBS0MsQ0FBTDs7QUFFQVAsTUFBSVEsSUFBSyxDQUFDLEtBQU0sQ0FBQ0gsS0FBUixJQUFrQixDQUEzQjtBQUNBRyxRQUFPLENBQUNILEtBQVI7QUFDQUEsV0FBU0gsSUFBVDtBQUNBLFNBQU9HLFFBQVEsQ0FBZixFQUFrQkwsSUFBSUEsSUFBSSxHQUFKLEdBQVVMLE9BQU9DLFNBQVNVLENBQWhCLENBQWQsRUFBa0NBLEtBQUtDLENBQXZDLEVBQTBDRixTQUFTLENBQXJFLEVBQXdFLENBQUU7O0FBRTFFSixNQUFJRCxJQUFLLENBQUMsS0FBTSxDQUFDSyxLQUFSLElBQWtCLENBQTNCO0FBQ0FMLFFBQU8sQ0FBQ0ssS0FBUjtBQUNBQSxXQUFTUCxJQUFUO0FBQ0EsU0FBT08sUUFBUSxDQUFmLEVBQWtCSixJQUFJQSxJQUFJLEdBQUosR0FBVU4sT0FBT0MsU0FBU1UsQ0FBaEIsQ0FBZCxFQUFrQ0EsS0FBS0MsQ0FBdkMsRUFBMENGLFNBQVMsQ0FBckUsRUFBd0UsQ0FBRTs7QUFFMUUsTUFBSUwsTUFBTSxDQUFWLEVBQWE7QUFDWEEsUUFBSSxJQUFJSSxLQUFSO0FBQ0QsR0FGRCxNQUVPLElBQUlKLE1BQU1HLElBQVYsRUFBZ0I7QUFDckIsV0FBT0YsSUFBSVEsR0FBSixHQUFXLENBQUNELElBQUksQ0FBQyxDQUFMLEdBQVMsQ0FBVixJQUFlRSxRQUFqQztBQUNELEdBRk0sTUFFQTtBQUNMVCxRQUFJQSxJQUFJVSxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZZCxJQUFaLENBQVI7QUFDQUUsUUFBSUEsSUFBSUksS0FBUjtBQUNEO0FBQ0QsU0FBTyxDQUFDSSxJQUFJLENBQUMsQ0FBTCxHQUFTLENBQVYsSUFBZVAsQ0FBZixHQUFtQlUsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWVosSUFBSUYsSUFBaEIsQ0FBMUI7QUFDRCxDQS9CRDs7QUFpQ0FMLFFBQVFvQixLQUFSLEdBQWdCLFVBQVVsQixNQUFWLEVBQWtCbUIsS0FBbEIsRUFBeUJsQixNQUF6QixFQUFpQ0MsSUFBakMsRUFBdUNDLElBQXZDLEVBQTZDQyxNQUE3QyxFQUFxRDtBQUNuRSxNQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVWMsQ0FBVjtBQUNBLE1BQUliLE9BQU9ILFNBQVMsQ0FBVCxHQUFhRCxJQUFiLEdBQW9CLENBQS9CO0FBQ0EsTUFBSUssT0FBTyxDQUFDLEtBQUtELElBQU4sSUFBYyxDQUF6QjtBQUNBLE1BQUlFLFFBQVFELFFBQVEsQ0FBcEI7QUFDQSxNQUFJYSxLQUFNbEIsU0FBUyxFQUFULEdBQWNhLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVksQ0FBQyxFQUFiLElBQW1CRCxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBYixDQUFqQyxHQUFvRCxDQUE5RDtBQUNBLE1BQUlOLElBQUlULE9BQU8sQ0FBUCxHQUFZRSxTQUFTLENBQTdCO0FBQ0EsTUFBSVEsSUFBSVYsT0FBTyxDQUFQLEdBQVcsQ0FBQyxDQUFwQjtBQUNBLE1BQUlXLElBQUlNLFFBQVEsQ0FBUixJQUFjQSxVQUFVLENBQVYsSUFBZSxJQUFJQSxLQUFKLEdBQVksQ0FBekMsR0FBOEMsQ0FBOUMsR0FBa0QsQ0FBMUQ7O0FBRUFBLFVBQVFILEtBQUtNLEdBQUwsQ0FBU0gsS0FBVCxDQUFSOztBQUVBLE1BQUlJLE1BQU1KLEtBQU4sS0FBZ0JBLFVBQVVKLFFBQTlCLEVBQXdDO0FBQ3RDVCxRQUFJaUIsTUFBTUosS0FBTixJQUFlLENBQWYsR0FBbUIsQ0FBdkI7QUFDQWQsUUFBSUcsSUFBSjtBQUNELEdBSEQsTUFHTztBQUNMSCxRQUFJVyxLQUFLUSxLQUFMLENBQVdSLEtBQUtTLEdBQUwsQ0FBU04sS0FBVCxJQUFrQkgsS0FBS1UsR0FBbEMsQ0FBSjtBQUNBLFFBQUlQLFNBQVNDLElBQUlKLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVksQ0FBQ1osQ0FBYixDQUFiLElBQWdDLENBQXBDLEVBQXVDO0FBQ3JDQTtBQUNBZSxXQUFLLENBQUw7QUFDRDtBQUNELFFBQUlmLElBQUlJLEtBQUosSUFBYSxDQUFqQixFQUFvQjtBQUNsQlUsZUFBU0UsS0FBS0QsQ0FBZDtBQUNELEtBRkQsTUFFTztBQUNMRCxlQUFTRSxLQUFLTCxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZLElBQUlSLEtBQWhCLENBQWQ7QUFDRDtBQUNELFFBQUlVLFFBQVFDLENBQVIsSUFBYSxDQUFqQixFQUFvQjtBQUNsQmY7QUFDQWUsV0FBSyxDQUFMO0FBQ0Q7O0FBRUQsUUFBSWYsSUFBSUksS0FBSixJQUFhRCxJQUFqQixFQUF1QjtBQUNyQkYsVUFBSSxDQUFKO0FBQ0FELFVBQUlHLElBQUo7QUFDRCxLQUhELE1BR08sSUFBSUgsSUFBSUksS0FBSixJQUFhLENBQWpCLEVBQW9CO0FBQ3pCSCxVQUFJLENBQUNhLFFBQVFDLENBQVIsR0FBWSxDQUFiLElBQWtCSixLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZZCxJQUFaLENBQXRCO0FBQ0FFLFVBQUlBLElBQUlJLEtBQVI7QUFDRCxLQUhNLE1BR0E7QUFDTEgsVUFBSWEsUUFBUUgsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWVIsUUFBUSxDQUFwQixDQUFSLEdBQWlDTyxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZZCxJQUFaLENBQXJDO0FBQ0FFLFVBQUksQ0FBSjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0YsUUFBUSxDQUFmLEVBQWtCSCxPQUFPQyxTQUFTVSxDQUFoQixJQUFxQkwsSUFBSSxJQUF6QixFQUErQkssS0FBS0MsQ0FBcEMsRUFBdUNOLEtBQUssR0FBNUMsRUFBaURILFFBQVEsQ0FBM0UsRUFBOEUsQ0FBRTs7QUFFaEZFLE1BQUtBLEtBQUtGLElBQU4sR0FBY0csQ0FBbEI7QUFDQUMsVUFBUUosSUFBUjtBQUNBLFNBQU9JLE9BQU8sQ0FBZCxFQUFpQlAsT0FBT0MsU0FBU1UsQ0FBaEIsSUFBcUJOLElBQUksSUFBekIsRUFBK0JNLEtBQUtDLENBQXBDLEVBQXVDUCxLQUFLLEdBQTVDLEVBQWlERSxRQUFRLENBQTFFLEVBQTZFLENBQUU7O0FBRS9FUCxTQUFPQyxTQUFTVSxDQUFULEdBQWFDLENBQXBCLEtBQTBCQyxJQUFJLEdBQTlCO0FBQ0QsQ0FsREQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiJdfQ==
}).call(this,require("9FoBSB"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\..\\node_modules\\ieee754\\index.js","/..\\..\\..\\node_modules\\ieee754")
},{"9FoBSB":5,"buffer":3}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = function () {
    var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
    var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

    if (canSetImmediate) {
        return function (f) {
            return window.setImmediate(f);
        };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWd0ZWlcXERvY3VtZW50c1xcZ2l0aHViXFxpZGVhbmluamFfZGV2XFxub2RlX21vZHVsZXNcXHByb2Nlc3NcXGJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxVQUFVQyxPQUFPQyxPQUFQLEdBQWlCLEVBQS9COztBQUVBRixRQUFRRyxRQUFSLEdBQW9CLFlBQVk7QUFDNUIsUUFBSUMsa0JBQWtCLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFDbkJBLE9BQU9DLFlBRFY7QUFFQSxRQUFJQyxVQUFVLE9BQU9GLE1BQVAsS0FBa0IsV0FBbEIsSUFDWEEsT0FBT0csV0FESSxJQUNXSCxPQUFPSSxnQkFEaEM7O0FBSUEsUUFBSUwsZUFBSixFQUFxQjtBQUNqQixlQUFPLFVBQVVNLENBQVYsRUFBYTtBQUFFLG1CQUFPTCxPQUFPQyxZQUFQLENBQW9CSSxDQUFwQixDQUFQO0FBQStCLFNBQXJEO0FBQ0g7O0FBRUQsUUFBSUgsT0FBSixFQUFhO0FBQ1QsWUFBSUksUUFBUSxFQUFaO0FBQ0FOLGVBQU9JLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLFVBQVVHLEVBQVYsRUFBYztBQUM3QyxnQkFBSUMsU0FBU0QsR0FBR0MsTUFBaEI7QUFDQSxnQkFBSSxDQUFDQSxXQUFXUixNQUFYLElBQXFCUSxXQUFXLElBQWpDLEtBQTBDRCxHQUFHRSxJQUFILEtBQVksY0FBMUQsRUFBMEU7QUFDdEVGLG1CQUFHRyxlQUFIO0FBQ0Esb0JBQUlKLE1BQU1LLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQix3QkFBSUMsS0FBS04sTUFBTU8sS0FBTixFQUFUO0FBQ0FEO0FBQ0g7QUFDSjtBQUNKLFNBVEQsRUFTRyxJQVRIOztBQVdBLGVBQU8sU0FBU2QsUUFBVCxDQUFrQmMsRUFBbEIsRUFBc0I7QUFDekJOLGtCQUFNUSxJQUFOLENBQVdGLEVBQVg7QUFDQVosbUJBQU9HLFdBQVAsQ0FBbUIsY0FBbkIsRUFBbUMsR0FBbkM7QUFDSCxTQUhEO0FBSUg7O0FBRUQsV0FBTyxTQUFTTCxRQUFULENBQWtCYyxFQUFsQixFQUFzQjtBQUN6QkcsbUJBQVdILEVBQVgsRUFBZSxDQUFmO0FBQ0gsS0FGRDtBQUdILENBakNrQixFQUFuQjs7QUFtQ0FqQixRQUFRcUIsS0FBUixHQUFnQixTQUFoQjtBQUNBckIsUUFBUXNCLE9BQVIsR0FBa0IsSUFBbEI7QUFDQXRCLFFBQVF1QixHQUFSLEdBQWMsRUFBZDtBQUNBdkIsUUFBUXdCLElBQVIsR0FBZSxFQUFmOztBQUVBLFNBQVNDLElBQVQsR0FBZ0IsQ0FBRTs7QUFFbEJ6QixRQUFRMEIsRUFBUixHQUFhRCxJQUFiO0FBQ0F6QixRQUFRMkIsV0FBUixHQUFzQkYsSUFBdEI7QUFDQXpCLFFBQVE0QixJQUFSLEdBQWVILElBQWY7QUFDQXpCLFFBQVE2QixHQUFSLEdBQWNKLElBQWQ7QUFDQXpCLFFBQVE4QixjQUFSLEdBQXlCTCxJQUF6QjtBQUNBekIsUUFBUStCLGtCQUFSLEdBQTZCTixJQUE3QjtBQUNBekIsUUFBUWdDLElBQVIsR0FBZVAsSUFBZjs7QUFFQXpCLFFBQVFpQyxPQUFSLEdBQWtCLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsVUFBTSxJQUFJQyxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNILENBRkQ7O0FBSUE7QUFDQW5DLFFBQVFvQyxHQUFSLEdBQWMsWUFBWTtBQUFFLFdBQU8sR0FBUDtBQUFZLENBQXhDO0FBQ0FwQyxRQUFRcUMsS0FBUixHQUFnQixVQUFVQyxHQUFWLEVBQWU7QUFDM0IsVUFBTSxJQUFJSCxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNILENBRkQiLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIl19
}).call(this,require("9FoBSB"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\..\\node_modules\\process\\browser.js","/..\\..\\..\\node_modules\\process")
},{"9FoBSB":5,"buffer":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
