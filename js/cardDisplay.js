(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//trying to make this work
require('jquery-hammerjs');

// 
ejs = require('ejs');
EJS = ejs;
var data = require('./data.js');
articles = data.articles;
require('./search.js');

window.order = [28, 25, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 26, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27];

//console.log("cardDisplay"); 

var cardparts = {
	article: "parts/cards/article.ejs",
	video: "parts/cards/video.ejs",
	institutional_video: "parts/cards/inst_video.ejs",
	tool: "parts/cards/tool.ejs"
};

//onload fires initcards
window.onload = function (e) {
	var evento = e;
	initcards(evento);
};

// loads ejs data into the object cardparts so that it can render 
var initcards = function (evento) {
	$.get(cardparts.article, function (data1) {
		cardparts.article = data1;
		$.get(cardparts.video, function (data2) {
			cardparts.video = data2;
			$.get(cardparts.institutional_video, function (data3) {
				cardparts.institutional_video = data3;
				$.get(cardparts.tool, function (data4) {
					cardparts.tool = data4;
					if (order.length !== 0) {
						//console.log("order size = " + order.length)
						rendercards(evento);
					} //if
				}); //cardparts.tool
			}); //cardparts.inst_video			
		}); //cardparts.video
	}); //card.parts.articles
}; //initfiles

// render cards render the homepage
window.rendercards = function rendercards(evento) {
	//console.log("rendercards")
	//console.log(evento)
	var i = 0;
	var popOrder = {};

	var addarticle = function () {
		console.log("addarticle");
		$("#endofcards").before(ejs.render(cardparts.article, {
			"title": arttitle,
			"description": artdescription,
			"image": artimage,
			"href": arthref
		}) //ejs.renderFile
		); //before
	}; //add 

	var addvideo = function () {
		console.log("addvideo");
		$("#endofcards").before(ejs.render(cardparts.video, {
			"description": artdescription,
			"href": arthref
		}) //ejs.render
		); //before
	}; //add 

	var addtool = function () {
		console.log("addtool");
		$("#endofcards").before(ejs.render(cardparts.tool, {
			"description": artdescription,
			"image": artimage,
			"href": arthref
		}) //ejs.render
		); //before
	}; //add 

	var addinstvideo = function () {
		console.log("addinstvideo");
		$("#endofcards").before(ejs.render(cardparts.institutional_video, {
			"description": artdescription,
			"href": arthref
		}) //ejs.render
		); //before
	}; //add 

	if (evento.type === "load" && window.location.pathname !== "/") {} else {

		$.each(order, function () {
			var orderid = order[i];
			var popOrderfunc = function (card) {
				return card.id == orderid;
			};
			popOrder[orderid] = articles.find(popOrderfunc);
			//switch case - article, tools, service, video

			switch (popOrder[orderid].type) {

				case "article":
					artdescription = popOrder[orderid].description;
					artdescription = artdescription.substring(0, 150) + "...";
					arttitle = popOrder[orderid].title;
					artimage = popOrder[orderid].image;
					arthref = popOrder[orderid].href;
					console.log("article " + arttitle + artdescription + artimage + arthref);
					addarticle();
					break;

				case "video":
					artdescription = popOrder[orderid].description;
					artdescription = artdescription.substring(0, 150) + "...";
					arthref = popOrder[orderid].href;
					console.log("video " + artdescription + arthref);
					addvideo();
					break;

				case "inst_video":
					artdescription = popOrder[orderid].description;
					artdescription = artdescription.substring(0, 150) + "...";
					arthref = popOrder[orderid].href;
					console.log("inst_video " + artdescription + arthref);
					addinstvideo();
					break;

				case "tool":
					artdescription = popOrder[orderid].description;
					artdescription = artdescription.substring(0, 150) + "...";
					artimage = popOrder[orderid].image;
					arthref = popOrder[orderid].href;
					console.log("tool " + artdescription + arthref + artimage);
					addtool();
					break;
			} //switch
			i++;
		}); //Each
	} //if

}; //rendercards
//on search
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./data.js":2,"./search.js":3,"ejs":5,"jquery-hammerjs":9}],2:[function(require,module,exports){
var exports = module.exports = {};

exports.articles = [{
  "title": "Reasons why startups fail",
  "author": "Miguel Teixeira",
  "tags": ["Fail", "Startup", "Challenges", "Product", "Market", "HR"],
  "description": "In this article we will take a look into the main reasons why startups fail and dig deep into understanding the challenges and hurdles that startups face.",
  "image": "images/articles/reasons_fail/startups_fail.jpg",
  "href": "reasons_why_startups_fail.html",
  "type": "article",
  "id": 1,
  "html": "\n<h2>Prepare to win</h2>\n<p>In order to increase your startup's chances for success, it helps if you understand and prepare for the challenges ahead.&nbsp;With that objective in mind, we will breakdown one of the most well known studies on startups, <a href=\"https://www.cbinsights.com/research-reports/The-20-Reasons-Startups-Fail.pdf\" rel=\"nofollow\" target=\"blank\">The Top 20 Reasons Startups Fail by CBinsights </a>.&nbsp;Just to be clear we are critical about how this study was conducted, but we also value the data collected.&nbsp;We will try our best to produce an insightful analysis to this study, so that we can make sense of the data collected.</p>\n<h2>Criticism about the study</h2>\n<p>The main criticism about this study is that the answer options, given by the 101 post-mortems entrepreneurs, are often filled with duplication and actually mean the same thing. Let's take for instant, \"No market Need\" and \"poor product\". A poor product is a product that the market does not need, or does not understand it.&nbsp;Another way to say the same thing is to say you had price/cost issues, which&nbsp;means that the market wasn't willing to pay as much as you needed to charge for the product.</p>\n<h2>The results:</h2>\nAfter grouping the answers by subject the results were as follows:\n<ol>\n<li>Product Market fit - 37.79%</li>\n<li>Human Resources – 24.75%</li>\n<li>Marketing – 22.41%</li>\n<li>Financing Issues – 12.37%</li>\n<li>Legal – 2.68%</li>\n</ol>\n<img src=\"images/articles/reasons_fail/startups_fail.jpg\" id=\"articleimg\" alt=\"Startups fail\">\n<h2>Main Reason: Product Market Fit</h2>\n<p>When you say \"No market need\", \"Got outcompeted\", \"Pricing/cost issues\", \"Poor product\", \"Need or lack a business model\", it basically means that your market isn't willing to pay for your product.&nbsp;There is really no surprise there. Almost 40% of companies fail because of this.&nbsp;This is why the iteration/pivot approach championed by many, like Eric Ries in the Lean Startup, was written and has become the main philosophy in product development.&nbsp;The problem is clear: you need to test and keep perfecting until you have the product that the market wants.&nbsp;To assume you know what the market needs are, is frequently fatal for your startup. It is important to keep testing your assumptions and prepare your company to test frequently and fast.</p>\n<p>To do so, and deliver a product or service that the market needs, it must add value to the customer. For that reason, a business model becomes critical to highlight core aspects of the business to create value in several contexts.\n</p><h2>2nd Reason: Human Resources</h2>\n<p>This one is also not a shocker.&nbsp;Everybody has heard the story of friendships torned apart in the process of building a startup.&nbsp;Human Resources is a major challenge: from team building, to talent acquisition, capacity building, motivation, burnout, and even to dealing with investors.&nbsp;25% of all startups fail because of Human Resources.&nbsp;Many entrepreneurs fail even to recognize Human Resources as a critical factor to their success.</p>\n<h2>3rd Reason: Marketing</h2>\n<p>Oh well, the dreaded Marketing, listening to your customers, understanding your market, spreading the word, setting the price right, branding, pivoting, setting up a store in a bad location.&nbsp;So many things that can go wrong.&nbsp;Marketing is an art form and to be able to produce good marketing is crucial for any business success, specially for a startup.&nbsp;Marketing is a very close third with 22%.&nbsp;Build your team around Marketing. It is fundamental to quickly absorb marketing insights and deliver the right product to the right market when they need it.</p>\n<h2>4th Reason: Financing issues</h2>\n<p>Wow, this is a shock! I would assume this would rank much higher among the opinion of entrepreneurs, as why their startup fail.&nbsp;Only 12.37%, and yet, so much time lost preparing pitch decks, reports and meeting investors.&nbsp;It makes you wonder, if the cliche, that what is often sold is really what you should focus on.&nbsp;The truth is that most business don't need investors from the start to be successful.&nbsp;The need comes later on, when you want to scale your business. Most startups don't need huge cash injection: they need work, vision, talent and team.</p>\n<h2>5th and final reason: Legal</h2>\n<p>Only 2.68% of entrepreneurs name legal as the main reason why their startup failed. That is a very low number.&nbsp;Although it is something that you should consider, seldom is the case that legal is critical for your business. Unless your business has some specific need, it should not be your focus.</p>\n<h2>Going back to the basics</h2>\n<p>In the end, it all comes down to the ability that a startup has to deliver a great product to the market.&nbsp;How do you do that?&nbsp;With a great team with complementary skills, ready to iterate its product as fast as possible until you achieve a great product/ market fit.&nbsp;On marketing you need to understand and act in your market.&nbsp;In the end is the same old grind. Nothing new.</p>\n<h2>Many approaches</h2>\n<p>We have now identified the most common disciplines you need to be able to mitigate the most recurrent risks in entrepreneurship.&nbsp;However, these disciplines are vast.&nbsp;There are many approaches to each of them.&nbsp;So no, there is not a recipe to rule them all.&nbsp;But you can prepare you company to create a symbiotic relationship with your customers to develop and improve products. You should choose carefully whom you work with.&nbsp;And you can always improve your marketing capabilities.</p>\n<h2>Methodology</h2>\n<p>To produce this analysis we used the report from CBinsights, The Top 20 Reasons Startups Fail.&nbsp;Then, we proceeded to group the answers given by the 101 entrepreneurs who had their companies fail.&nbsp;We group them in the following way:</p>\n<p>Product Market Fit was composed by: </p>\n<ul>\n<li>No Market Need,</li>\n<li>Get outcompeted,</li>\n<li>Pricing/Cost Issues,</li>\n<li>Poor product,</li>\n<li>Need/Lack Business Model.</li>\n</ul>\n<br>\n<p>Human Resources was composed by:</p>\n<ul>\n<li>Not the right team,</li>\n<li>Lose Focus,</li>\n<li>Disharmony on Team/investors,</li>\n<li>Lack of Passion,</li>\n<li>Don't use network advisers,</li>\n<li>Burn out.</li>\n</ul>\n<br>\n<p>Marketing was composed by:</p>\n<ul>\n<li>Poor Marketing,</li>\n<li>Ignore Customers,</li>\n<li>Product Mis-Timed,</li>\n<li>Pivot Gone Bad,</li>\n<li>Bad location,</li>\n<li>Failure to pivot.</li>\n</ul>\n<br>\n<p>Financing issues was composed by:</p>\n<ul>\n<li>Ran out of cash,</li>\n<li>No financing or investing.</li>\n</ul>\n<br>\n<p>And finally Legal from legal challenges.</p>\n<p>Then we proceeded to add all the elements and convert to a base 100.</p>\n<h2>Final remarks</h2>\n<p>The results shown by this analysis weren't surprising. These conclusions seem to make a lot of sense and actually look pretty obvious, which is a good thing. But that doesn't mean it is easy.&nbsp;As always, you need a lot of clairvoyance and experience to run a smooth, well machined operation that excels at these themes. And that, let me tell you, is very hard thing to do.</p>\n<p>Here at IdeaNinja, we have been contributing with several pieces on how to improve in many of these themes, with articles like: </p>\n<ul>\n<li><a href=\"how_to_value_business_idea.html\" target=\"blank\">How to value a business idea</a></li>\n<li><a href=\"how_improve_facebook_post_reach.html\" target=\"blank\">How to improve facebook post reach</a></li>\n<li><a href=\"How-to-write-article-for-the-web.html\" target=\"blank\">How to write article for the web</a></li>\n<li><a href=\"basics_seo.html\" target=\"blank\">Basics of SEO</a></li>\n<li><a href=\"recruiting_startup.html\" target=\"blank\">Recruiting in a Startup</a></li>\n</ul>\n<p>Please take a look into it and thank you for your time.</p>\n"
}, {
  "title": "Lean Product Testing",
  "author": "Mariana Rodrigues",
  "tags": ["Fail", "Startup", "Challenges", "Product", "Market", "HR"],
  "description": "The number one reason why startups fail is the lack of product market fit. Having a Lean methodology to test and tune your product, will increase your chances for success. Starting a company is risky, that’s inevitable. Eric Ries’ The Lean Startup book offers a scientific methodology that guide startups in an environment of extreme uncertainty. It makes them move faster, reduce their investment or working time, and consequently, the risk associated with it.",
  "image": "/images/articles/lean-product/lean-methodology.jpg",
  "href": "lean_product_testing.html",
  "type": "article",
  "id": 2,
  "html": "\n<h2>Why feedback is important</h2>\n<p>Entrepreneurs and product developers put much time and effort on getting their product ready to launch. And commonly, that is the first time they receive the first insight from customers. After months of development, their attempt to sell the product goes to failure. They realize that the customers don’t understand or need the product or its features.</p>\n<p>Lean startup methodology focuses on making the process of introducing new products into the market efficient. Thus, avoiding wasting time and resources in those features clients don’t want. This efficiency outcomes from gathering feedback from potential clients. By collecting, as much as possible, reactions and responses from targeted customers over all elements of their product or overall business. You can achieve that by prototyping, creating a minimum viable product, and product testing. For more information on prototyping you can check out our article <a href=\"http://ideaninja.io/prototyping.html\" target=\"blank\">Guide to Prototyping</a>.</p>\n<img src=\"images/articles/lean-product/lean-methodology.jpg\" id=\"articleimg\" alt=\"lean methodology startup\">\n<h2>Failing fast and continuous learning</h2>\n<p>The Lean Startup process encourages entrepreneurs to fail, fail fast to grow faster. Don’t assume what your market wants! Start testing your products or services in early stages of development and this will allow you continuous learning throughout your product development. To do so, this methodology suggest you to start by developing an minimum viable product.</p>\n<h2>1. Develop an MVP</h2>\n<p>Don’t wait until you have the perfect product! Start by creating a minimum viable product (MVP), a version of your new product <i>“which allows a team to collect the maximum amount of validated learning about customers with the least effort”</i> (as described by Eric Ries). It will have your product’s basic characteristics but in a viable way for people to use. The use of a MVP allows you to put your product in customer hands in an early stage without needing a large investment, to learn as quickly as possible. More importantly puts you in front of your customer and opens the communication channels. By doing so, you will test fundamental hypotheses on your product, that may be crucial and determinant for development of following ones. Imagine what a snowball effect would create if you get wrong the basics of your product without testing it!</p>\n<p>Building the MVP will allow you to know if your customers even use your product or services before launching it to the market. But remember, you are only going for the bare minimum! The “rule” Eric Ries suggests is to put in 20% of product’s features that 80% of customers would use. So build something cheap and fast.</p>\n<h2>1.1. Who will you ask for feedback</h2>\n<p>Give your MVP to a targeted audience and take special attention not only to their feedback but also to their behavior, their interaction with the product or service. It will probably not be as you expected! Your perception on the product is commonly different from the one from your clients, that is why their feedback is so important. But who will give you this feedback? We advise you to go for the early adopters of your product. They are the ones more predisposed to try and use new products, usually for a price, but they will give you relevant opinion. If you still don’t know who should be testing your product, it may be helpful checking out our article on <a href=\"http://ideaninja.io/influencers_word_of_mouth.html\" target=\"blank\">Influencers - The key to Word of Mouth</a>.</p>\n<h2>2. Feedback Loop</h2>\n<p>For this moment forward is all about iteration. Gather customer’s feedback and use it to tailor and improve your product, learn about what can you change to make your product better. After the adjustments, test it again in the same or new customers. Use these new inputs to adapt, once more, your product. And by doing so, you are creating a cycle, a feedback loop. Repeat it over and over again, as many iteration as it takes, until you create a really good product or service.</p>\n<h2>2.1. Metrics</h2>\n<p>It’s all about build, measure, and learn! Thus, pay special attention on how do you measure the feedback to not use the wrong metrics. The ones you want are called actionable metrics, the ones that will lead you to informed and assertive conclusions. Some example of that can be the willingness to pay or purchase frequency.</p>\n<h2>2.2. Make it cheap and fast</h2>\n<p>The faster you pass through this cycle the faster your product will succeed. Hence, focus on having short cycles with incremental improvements instead of large leaps that are based on your assumptions, since these last ones will require much more investment that can go to waste. Make sure the way you test it is the cheapest and the fastest as possible to optimize and improve your business path.</p>\n<h2>2.3. Create hypothesis</h2>\n<p>The best way to start this iteration is by creating hypothesis on what do you want to test, becoming a hypothesis-driven experimentation. You may even split your test in two different products to experiment the impact of two different version or even simple features. But remember, all your experiments should be isolated tests without contamination. Test their effectiveness in the market and learn from the experiment.</p>\n<h2>3. Pivot</h2>\n<p>Pivot differs from iteration because you are not incrementally changing your product, but doing it fundamentally. Sometimes, after going through the cycle several times you come to the conclusion that your base expectations were wrong, and so you should pivot. You do it when needing substantial changes because your initial ideas are not being effective. You will no longer do small adjustment but, instead, you will completely change your initial idea. You can either change your product, essential features, or change the audience you were trying to sell it. This pivot will be mainly a correction in your direction, to test new ultimate hypotheses of your new product or service.</p>\n<h2>3.1. Step up your competition</h2>\n<p>By correctly creating a feedback loop you will understand what is your suitable market (it may not be the one you expected in the beginning) and what it wants. And by doing so, you will be one step ahead of your competition! This because your will be receiving insights on the reactions and behavior from real users of your product, from the real world. And that is how your risk is reduced when using lean startup methodology.</p>\n<h2>Lean startup principles</h2>\n<p>Lean startup principles of failing fast and continuous learning are being successfully adopted all over the world, not only in startups but also in mature businesses. Eric Ries, the founder of this methodology, refers five key principles of the Lean Startup movement. Firstly, that <strong>entrepreneurs are everywhere</strong> and <strong>entrepreneurship is management</strong>, meaning that everyone can build a startup and if they do, it will be an institution and requires management. Then, to build a sustainable business you need <strong>validated learning</strong>, that you can achieve by experimentation of each element of your business vision. But still, to improve systematically, you need to measure, achieve milestones and prioritize work, and that entails <strong>innovation accounting</strong>. And Finally, the principle of <strong>Build-Measure-Learn</strong>, that as mentioned before is a vital activity for every startup that wants to succeed.</p>\n<h2>Final Remarks</h2>\n<p>Although the methodology is commonly perceived as focused on product development with customer’s insights, it goes beyond that and may be used to market development and the feedback may also come from partner or other stakeholders.</p>\n<p>Lean startup methodology focuses on experimentation over planning, trying to change companies extreme focus on business plans. This methodology goes more in line with business model canvas ideals instead of business plans, leading authors to develop a lean canvas model.</p>\n<p>The use of this methodology will give your startup a better chance to succeed by reducing waste and by not develop your product around your intuition but based on what the market wants. You can check more on the methodology and the movement on <a href=\"http://theleanstartup.com\" target=\"blank\" rel=\"nofollow\">theleanstartup.com/</a>.</p>\n<p>Other article you may be interested in:</p>\n<ul>\n<li><a href=\"http://ideaninja.io/prototyping.html\" target=\"blank\">Guide to Prototyping</a></li>\n<li><a href=\"http://ideaninja.io/influencers_word_of_mouth.html\" target=\"blank\">Influencers - The key to Word of Mouth</a></li>\n<li><a href=\"http://ideaninja.io/books_for_entrepreneurs_curated_list_plus_video.html\" target=\"blank\">Books for entrepreneurs - Curated list plus video</a></li>\n</ul>\n"
}, {
  "title": "Cost Accounting for Entrepreneurs",
  "author": "Tiago Rodrigues",
  "tags": ["costaccounting", "decisionmaking", "howto"],
  "description": "In this article we want to show you how simple and useful cost accounting can be, and provide you all the necessary information to make you capable of understanding your own company numbers. Few people start a business because they are good with numbers. In fact, the terms “accounting” and “financial analysis” tend to create headaches on many business owners. We will make cost accounting accessible for everyone.",
  "image": "images/articles/cost_accounting/cv_cost_accounting.jpg",
  "href": "cost_accounting.html",
  "type": "article",
  "id": 3,
  "html": "\n<h2>Cost Accounting vs Financial Accounting</h2><p>Financial Accounting and Cost Accounting are two completely different realities.</p><p>While, Financial Accounting provides the relevant information for taxes and is mandatory by nature. Cost Accounting is something you because it helps you make decisions and better understand your business,due to it’s detailed information of your expenses.</p><p>An example of a cost accounting finished sheet, should be something like the following:</p><img src=\"images/articles/cost_accounting/cost_accounting.jpg\" id=\"articleimg\" alt=\"Cost accounting analysis\"><p>As you can see, Cost Accounting provides a clean and easy reading sheet, where it becomes way clearer where you should be focusing your time and money. in the example above, you can read that although product A and C have roughly the same sales. However product A represent three times as much profit as product C.</p><h2>Why Should an Entrepreneur know Cost Accounting?</h2><p>Most business owners try to repel all the accounting work into an accountant. Truth is you should try to do some number crunching yourself. Like shown in the table above, Cost Accounting isn't as complex as financial accounting and it provides plenty of useful information. For an Entrepreneur, cost accounting has three core benefits:</p><ul><li><strong>Provide Detailed Information -</strong> One of the major advantages of cost accounting, is that it empowers the entrepreneur with more information, facilitating the process of doing key decisions. If you understand your company’s numbers, then it is easier to estimate the financial impact of your decisions. Cost accounting helps you define priorities, investments and enhances the overall quality of your decisions.</li><li><strong>Monitors progress -</strong> Since Cost Accounting hands you detailed information about your operations, it becomes way easier to monitor progress and, consequently make adjustments,when necessary. It enables you to measure actual progress versus predicted progress, keeping you honest about your business numbers all the time. If you’re not hitting the targets you have set, you can identify problems and correct them.</li><li><strong>Clarifies the path to take -</strong> Another of the entrepreneur’s core objective is to make plans in a way that attracts others to work on a shared vision to change the world in some way. In the early stages of a venture, estimates can unite a team by making a blurry vision more concrete, measurable, and actionable. By analysing your expenses in detail, you can draw conclusions about: what’s the margin you get per sale, your cost structure breakdown per product, what price you need to practice to break even and plenty of other useful information.</li></ul><h2>Cost Accounting 101: Steps to do it yourself</h2><p>We already shown what Cost Accounting is and why you should do it. It’s time to pull up the sleeves and show you how to do it yourself.</p><h3>1st Step - Revenue Streams Identification</h3><p>First of all, you have to identify what your revenue streams are, in the example we handed before our revenue streams were 3 different products the company had.</p><img src=\"images/articles/cost_accounting/revenue_sources.jpg\" id=\"articleimg\" alt=\"revenue sources cost analysis\"><h3>2nd Step - Cost Structure Identification</h3><p>Secondly, you should identify what are the costs you support in your business. Most of the times, the following costs cover it all.</p><div><img src=\"images/articles/cost_accounting/cost_structure.jpg\" id=\"article_med_img\" alt=\"cost structure cost accounting\"></div><h3>3rd Step - Receipt Matching</h3><p>After identifying your Revenue Streams and Cost Structure you have on your business. It’s time to identify where each singular receipt goes to. This is where it starts getting tricky so buckle up. There are four basic types of costs you need to keep in mind. However, let’s define them 2 by 2 to make it simpler. Starting by the differences between fixed and variable costs.</p><ul><li><strong>Fixed costs -</strong> Fixed costs like the name specifies are costs that are fixed, no matter how much you produce or sell. A good example of this type of cost is a lease on a building. You have to pay the lease no matter how your company did in terms of sales.</li><li><strong>Variable costs -</strong> Unlike fixed costs, variable costs change with the level of production. The easiest example of this type of cost, are materials used in production because it changes according to the level of production you are doing.</li></ul><p>After defining between variable or fixed, now you have to choose between direct or indirect.</p><ul><li><strong>Direct costs -</strong>Direct costs are costs that can be directly traced to the revenue stream. Material and labor costs are good examples of this type of cost.</li><li><strong>Indirect costs -</strong>These can’t be directly traced to the product; instead, these costs are allocated, based on some level of activity. For example, if you use the same infrastructure to develop all your products you will allocate a chunk of that cost to each product being that an indirect cost of your product.</li></ul><p>Every cost can be defined with a combination of two of this four costs. For example, your electricity bill is an indirect variable cost if you use that electricity for all your different revenue streams. However, if you have a specific electricity bill per revenue stream it can be defined as a direct variable cost, because you can directly trace it to each revenue stream.</p><img src=\"images/articles/cost_accounting/cost_classification.gif\" id=\"article_med_img\" alt=\"cost analysis indirect variable\"><h3>4th Step - Indirect Cost Allocation</h3><p>Like we said before, indirect costs are costs that can’t be directly traced to a revenue stream so what you have to do is allocate those costs according to the following rules:</p><ul><li>Human Resources - Number of hours worked on that revenue stream.</li><li>Materials - Percentage of materials used on that revenue stream.</li><li>Distribution - Percentage each revenue stream represents in sales.</li><li>External Services - Percentage of usage on each revenue stream.</li><li>Infraestructures - Space occupied in factory for the production of each product.</li><li>Communication and Marketing - Percentage each revenue stream represents in sales.</li></ul><p>At the end of the allocation what you will end up getting is a Proxy Table similar to this one.</p><img src=\"images/articles/cost_accounting/cost_imputation.gif\" id=\"articleimg\" alt=\"KPI fixed costs analysis\"><h3>Final Step - Use the calculator</h3><p>When you get to this point, all you have to do is use your calculator. Start by multiplying your proxy table with the all the different indirect costs. Then just add them up to their respective direct costs and put them on the sheet. You will end up with a sheet similar to our initial sheet.</p><h2>Final Remarks</h2><p>Cost Accounting is one of the most underrated tools by entrepreneurs. I hope this article made you realise how useful it can be. One of the beauties of cost accounting is that even if you know nothing about accounting everyone is capable to apply this exercise on their own business providing you with critical information that otherwise you wouldn’t get.</p><p>If you found this article helpful, then you might be interested in the following ones:</p><ul><li><a href=\"/basics_of_accounting_for_entrepreneurs.html\" target=\"blank\">Basics of Accounting for Entrepreneurs</a></li><li><a href=\"/books_for_entrepreneurs_curated_list_plus_video.html\" target=\"blank\">Books For Entrepreneurs</a></li><li><a href=\"/reasons_why_startups_fail.html\" target=\"blank\">Reasons Why Startups Fail</a></li></ul>"
}, {
  "title": "Guide to Prototyping",
  "author": "Mariana da Silva Godinho",
  "tags": ["Prototype", "lean", "product", "tunning"],
  "description": "When developing a product or service you can incur in serious costs and very large hours of work. And then you finally discover that the market wants a different taste of your product... That is a really expensive lesson to learn. But what if you had built a prototype and came to the same conclusions, that would have been much cheaper and less time consuming process.",
  "image": "images/articles/prototyping/prototyping.jpg",
  "href": "prototyping.html",
  "type": "article",
  "id": 4,
  "html": "\n<h2>What is prototyping?</h2>\n<p>Prototyping is the process of accelerating the procedure of tuning the product or service in a cheap and fast way, and is indispensable to do product testing. Prototyping can help us identify and solve design problems very early on.</p>\n<img src=\"images\\articles\\prototyping\\prototyping.jpg\" id=\"articleimg\" alt=\"Filming Video\">\n<h2>Fidelity</h2>\n<p>When you prototype, what you need to ask yourself is what do you want to test. Depending on it, you can use one of these two types of prototypes:</p>\n<ul>\n<li>Low Fidelity Prototyping, which is focused on interactivity,</li>\n<li>High Fidelity Prototyping, which is focused on visual design.</li>\n</ul>\n<h2>Low Fidelity Prototyping - pros and cons</h2>\n<p>When we think about this type of prototype, the best and most basic example we can give you is a paper sketch, but there are also others, like wireframes, storyboards. When it comes to advantages, Low Fidelity Prototyping has these six:</p>\n <ul>\n<li>Anyone can do it,</li>\n<li>Focused on Data and Content,</li>\n<li>Collaborative process / Social Interaction,</li>\n<li>No technical restrictions,</li>\n<li>Faster method,</li>\n<li>Low cost.</li>\n</ul>\n<p>But, like in everything, there are some disadvantages:</p>\n<ul>\n<li>Not detailed oriented,</li>\n<li>Comprehensive paper prototypes are difficult,</li>\n<li>Collaboration implies physical proximity.</li>\n</ul>\n<h2>High Fidelity Prototyping - pros and cons</h2>\n<p>High fidelity prototyping are meant to test details, like design details, specific wording. HTML/CSS/JS, Illustrator and Powerpoint are three of the most well-know methods to do these kind of prototype. High fidelity Prototyping, has the following advantages:</p>\n<ul>\n<li>Focus on detail,</li>\n<li>Near real experiment,</li>\n<li>They are precise.</li>\n</ul>\n<p>But, like in everything, there are some disadvantages:</p>\n<ul>\n<li>It creates the expectation that the project is near finished,</li>\n<li>Requires high level of skill,</li>\n<li>Time consuming.</li>\n</ul>\n<h2>Prototyping tools</h2>\n<p>Prototyping tools are meant to facilitate the making of a prototype and can be very valuable in speeding up the process.There are three types of prototyping tools:</p>\n<ul>\n<li>Local,</li>\n<li>Online,</li>\n<li>Paper Resources.</li>\n</ul>\n<p>In the following paragraphs we will give examples of each kind so you can find the one that fits your purpose better.</p>\n<h2>Local tools</h2>\n<p>Here we give you some examples of Local Tools:</p>\n<ul>\n<li>Flow - Powerpoint, Keynote - High Fidelity Prototyping Tools</li>\n<li>Images - <a href=\"//www.gimp.org/\" target=\"blank\" rel=\"nofollow\">Gimp</a>, Illustrator, Photoshop - Hight Fidelity Prototyping Tools</li>\n<li>Wiretypes - MS Visio, <a href=\"//www.omnigroup.com/omnigraffle\" target=\"blank\" rel=\"nofollow\">OmniGraffle</a>- Low Fidelity Prototyping Tools</li>\n<li>Adobe Fireworks - High Fidelity Prototyping Tool</li>\n<li><a href=\"//www.axure.com/\" target=\"blank\" rel=\"nofollow\">Axure</a>- Low Fidelity Prototyping Tool</li>\n<li><a href=\"//www.balsamiq.com/\" target=\"blank\" rel=\"nofollow\">Balsamiq</a>: mockups and wireframes - Low Fidelity Protoyping Tool</li>\n<li><a href=\"//www.justinmind.com/\" target=\"blank\" rel=\"nofollow\">Justinmind</a> - Low Fidelity Prototyping Tool</li>\n<li><a href=\"http://www.antetype.com/\" target=\"blank\" rel=\"nofollow\">Antetype</a>- High Fidelity Prototyping Tool</li>\n<li>Top end &amp; comprehensive: <a href=\"//www.irise.com/\" target=\"blank\" rel=\"nofollow\">iRise</a>- Low Fidelity Prototyping Tool</li>\n</ul>\n<h2>Online tools</h2>\n<p>There are also many online tools available for you to prototype:</p>\n<ul>\n<li><a href=\"//www.moqups.com\" target=\"blank\" rel=\"nofollow\">moqups.com</a>- Hight Fidelity Prototyping Tool</li>\n<li><a href=\"//www.fluidui.com\" target=\"blank\" rel=\"nofollow\">Fluid</a>: focused on Mobiles and tablets - Low Fidelity Prototyping Tool</li>\n<li><a href=\"//www.hotgloo.com\" target=\"blank\" rel=\"nofollow\">HotGloo</a>: Good for responsive design, with base templates - Low Fidelity Prototyping Tool</li>\n<li><a href=\"//www.notism.io\" target=\"blank\" rel=\"nofollow\">Notism</a>: Tool for collaboration - High Fidelity Prototyping Tool</li>\n<li><a href=\"//www.protoshare.com\" target=\"blank\" rel=\"nofollow\">Protoshare</a>: bootstrap built in templates - High Fidelity Prototyping Tool</li>\n<li><a href=\"//www.uxpin.com\" target=\"blank\" rel=\"nofollow\">UXpin</a>: Lots of collaboration and goes from mockups - High Fidelity PrototypingTool</li>\n<li><a href=\"//www.invisionapp.com\" target=\"blank\" rel=\"nofollow\">Invision</a>: Wireframe collaboration with good pricing - Low Fidelity Prototyping Tool</li>\n<li><a href=\"//www.proto.io\" target=\"blank\" rel=\"nofollow\">Proto.io</a>: Mobile in mind, lots of templates - High Fidelity Prototyping Tool</li>\n</ul>\n<h2>Paper prototype resources</h2>\n<p>Last but not least, we provide you a list with some good paper prototype resources, all of these are low fidelity prototypes:</p>\n<ul>\n<li><a href=\"//www.uistencils.com/\" target=\"blank\" rel=\"nofollow\">UiStencils.com</a>: Ui resources</li>\n<li><a href=\"http://www.sneakpeekit.com/\" target=\"blank\" rel=\"nofollow\">Sneakpeakit</a>: Canvas and sheets (free)</li>\n<li><a href=\"//www.sketchbook.com/mobile\" target=\"blank\" rel=\"nofollow\">appssketchbook.com</a>: sketchbooks</li>\n<li><a href=\"http://www.cohdoo.com/phonedoo.php\" target=\"blank\" rel=\"nofollow\">phonedoo</a></li>\n<li><a href=\"//www.pixeden.com/\" target=\"blank\" rel=\"nofollow\">Pixeden</a>: Wireframe stencil with UI elements and Icons</li>\n<li><a href=\"//www.webalys.com/\" target=\"blank\" rel=\"nofollow\">Webalys</a>: Symbols in ilustrator</li>\n<li><a href=\"//www.dessky.com/\" target=\"blank\" rel=\"nofollow\">Dessky</a>: Webdesign and wireframming kit</li>\n<li><a href=\"//www.medialoot.com/\" target=\"blank\" rel=\"nofollow\">Medialoot</a>: UI elements</li>\n</ul>\n<h2>Prototyping testing</h2>\n<p>Prototyping testing accelerates the iteration process involved in fine tuning a Product or Service. Because prototyping is more agile than developing the product itself, it allows you to change quickly, test and get results and keep testing it until you have achieved a product that is valued and by your customer.</p>\n<h2>Facilitator, tester and observer</h2>\n<p>In order to do proper group testing and improve the quality of the feedback , you need three people:</p>\n<ul>\n<li>The Facilitator - someone that sets goals for the testing sessions, explains how the process works and guides the users through the tests,</li>\n<li>The Tester - should be someone that represents your target audience and will test your product,</li>\n<li>The Observer - someone that is a part of the evaluation process and that, during the process will observe, report and take notes. He should not intervene in the test in any point in time and should remain silent and intervene as litle as possible in the process.</li>\n</ul>\n<p>You may feel inclined to do 2 or 3 of the roles mentioned above. If you do so, know that you will be affecting the quality of the test.</p>\n<h2>Prototyping in services</h2>\n<p>Some say that services cannot be prototyped at all. But that is not true. Services may have several components that cannot be tested, but you can test deliverables, processes and sometimes experiences:</p>\n<ul>\n<li>Reports - From report templates, bill of services, flowcharts, excel files, every single paper or file you exchange with your customer is deemed to be prototyped, tested and tuned. </li>\n<li>Processed - From IVR, to automatic emails, to a sales process, all can be tested, prototyped and fine tuned.</li>\n<li>Experiences - One of the best way to test your service is by creating an experience as a prototype, for example, create a space where it really seems you’re having dinner at a restaurant, with waiters, background music, cosy furniture, etc.</li>\n</ul>\n<p>Prototyping services can require a bit more imagination, but they are definitely testable. </p>\n<h2>Final Remarks</h2>\n<p>In conclusion, prototyping is essential to save some time when it comes to create a product or service. You should never forget that there are two types of prototype: Low and High Fidelity. Each of them has its pros and cons, so you should chose the one that fits your startup’s prototyping stage better. Make sure to use some kind of ,prototyping tool. they can help you a ton. The last part, is the testing off course. And for that you need a facilitator, a tester and an observer. And if you are building a service, do not stress, you can do it.</p>\n"
}, {
  "title": "Social Media Growth Hacking",
  "author": "Tiago Rodrigues",
  "tags": ["socialmedia", "growthhacking", "reach"],
  "description": "Do you want to grow your business fast and cheap ? Then Growth Hacking might be what you are looking for. In this article we will explore the best social media practices you can have along with some hacks to help you pierce through competition.",
  "image": "images/articles/growth_hacking/growth_hacking.jpg",
  "href": "growth_hacking.html",
  "type": "article",
  "id": 5,
  "html": "\n<h2>What’s Growth Hacking?</h2>\n<p>Growth Hacking is quite a controversial expression, being many times compared with traditional marketing, due to their similarities, but truth is they have two completely different objectives. While Marketing is mainly focused on targeting, increasing reach through paid ads or organic activities, growth hacking relies on cracking the system to become known fast and quick, looking for alternative and cheaper ways to reach growth.</p>\n<p>Growth Hacking is particularly prevalent with startups, when the goal is to create a rapid growth early on.</p>\n<p>To sum up, the main idea behind growth hacking is to find the “trigger” that creates engagement between the user base and your business. That trigger in social media is commonly known as the algorithm. Each social network platform uses an algorithm to determine which content is shown to users first and which content is put in queue. If you crack the code then you can easily “hack” your way into a larger audience. This Growth Hacking mentality has gained relevance lately due to the exponential increase of interest to advertise online rather than offline.</p>\n<img src=\"images/articles/growth_hacking/growth_hacking.jpg\" id=\"articleimg\" alt=\"growth social media hacking\">\n<h2>Growth Hacking the Social Media</h2>\n<p>When startups are still at an early stage, truth is all costs matter.</p>\n<p>Facebook, Instagram, Youtube and other social-media represent a big chunk of the timeshare of internet users. Hence social media has become one of the most powerful tools to reach your audience. Most businesses are already present in social media, using it to boost their sales or create a closer relationship with their customer. The competition for online attention is stronger than ever. <strong>How does one differentiate and succeed in growing a user base?</strong></p>\n<p>There are two main aspects you need to focus on, <strong>content</strong> and <strong>distribution</strong>.</p>\n<h2>Content in Social Media</h2>\n<p>Social Media has so much content that it has become difficult to reach your target, especially when you’re starting and you don’t have a large base of followers.</p>\n<p>Content can be simply defined as creative or informative materials. However there are a lot of questions that must be put into equation. At what frequency should I release new content? Does all my content have to be top-notch? What type of content should I aim to develop?</p>\n<p>To help you answer all those questions we created list of <strong>best practices</strong> and <strong>hacks</strong> that will most definitely grow you an engaged user base.</p>\n<h2>Best Content Practices</h2>\n<ul>\n<li><strong>Define your Social Media Objectives -</strong> Whether you’re present at Facebook, Instagram, Twitter, Google+ or LinkedIn one thing that is common and crucial, in any of them is a plan of what you want to achieve. Each social media has to be seen like a living system with different necessities and interests, so make sure you know everything about the platform, which audience you can reach and what your milestones for the platform are, before you start posting.</li>\n <li><strong>Use Visuals -</strong>When communicating in any of the mass social media, one of the best practices you can have is to use visuals like videos and images, because these type of contents are highly ranked by social media, making it easier to reach more people.</li>\n<li><strong>Find your user base interests -</strong> In real life, The easiest way to make a bond with somebody, is to find something that both find interest in. In Social Media the principle is the same. For example, if your user base likes cats, but you want them to see the awesome boat you are selling, just post a cat on a boat dressed as a sailor! Be creative!</li>\n<li><strong>Be human -</strong> I can't stress enough how important this point is. When you’re writing in a social media make sure to let your audience know that you are human. When someone shows interest on any of your posts, make sure you respond and interact to them. People that feel a close relationship with you, will be more likely to interact in the future.</li>\n</ul>\n<h2>Content Hacks</h2>\n<ul>\n<li><strong>All your content doesn’t have to be top-notch -</strong> This topic is by far one of the biggest myths there are out there. Your content simply doesn't have to be all high quality content. If in every five posts you post one really good, then you are doing a great job. People tend to remember great posts much longer than bad ones, because if they aren’t interested in it they will just keep scrolling.</li>\n<li><strong>Post your content directly on Facebook -</strong> Facebook’s algorithm decides which content is shown the most, and one of the biggest aspects, people don’t know about, is that external links are less likely to be shown than text posts. The idea behind it is to keep people on Facebook, so what you should do to hack your way through is to directly put your content on facebook. If you want to know more about how <a href=\"https://ideaninja.io/how_improve_facebook_post_reach.html\" target=\"blank\">facebook’s algorithm works check out our article</a>.</li>\n<li><strong>Share articles of influencers -</strong> Another good way to reach more people is to share content of influencers. Influencers tend to create posts that reach lots of people, so when you are sharing their content, you are driving their influence to you.</li>\n</ul>\n<h2>Best Distribution Practices</h2>\n<ul>\n<li><strong>Use Various Platforms -</strong> A common misconception is that, being present in only one social platform is enough. You should try to diversify, every platform is a living system and you will definitely reach different targets in each platform. Make sure you don’t release the same content on all platforms all the time, create specific content for each from time to time.</li>\n<li><strong>Use Hashtags to allow people to find you -</strong> Hashtags are one of the best resources you can use in order to make people find you, and to make your content hit your desired target.</li>\n<li><strong>Be Consistent -</strong> Once you are able to create a connection with your user base make sure you don’t stop releasing content that interests them. Don’t leave them hanging, reach and interest is something that is built over time.</li>\n<li><strong>Include Call-to-Actions -</strong> If you want your followers to do something, you need to ask them. People won’t do anything if you don’t ask them to. Asking for shares, retweets and all that, is crucial to affect as much people as possible.</li>\n</ul>\n<h2>Distribution Hacks</h2>\n<ul>\n<li><strong>Find Influencers -</strong> When starting a new project, truth is no one cares about you. One of the biggest hacks you can get, is for someone influent to talk about you which will ultimately drive traffic onto your page. This isn't an easy job, but using ads with very specific target, you can reach your influencers. </li>\n<li><strong>Facebook Groups - </strong>Facebook is, undoubtedly, one of the most powerful social media's right now, and for a long time it has been fairly easy to drive traffic onto your Facebook page and redirect that traffic onto your webpage or blog. Truth is, that Facebook has been nerfing the potential reach of professional pages in such a big cut that the best possible policy right now, is to create and join facebook private groups and inviting relevant people onto those groups, releasing your content there, where you won’t be nerfed by facebook’s reach policy, generating buzz in a much easier fashion.</li>\n<li><strong>Make your Personal Facebook a Professional Facebook -</strong> Professional pages are undervalued and their reach is reduced on pretty much all platforms. While on a professional page you are able to reach around 10% of the people that follow you, on a personal page the reach is way higher. Share your business posts on your facebook page to increase the reach and try to develop your personal branding.</li>\n<li><strong>Follow opportunities - </strong>One of the easiest opportunities everyone has to get followers is through niche events. Every segment has at least one major event per year where people with the same interests gather. All you have to do is to go on Twitter and list the people that say they are attending to that event on that day and just follow them. One in every four will add you back, and you are not even there.</li>\n</ul>\n<h2>Final Remarks</h2>\n<p>Although growing a user base is no easy task, I hope this article showed you that there are a lot of practices and hacks you can use to boost yourself up. Make sure to combine good content with good distribution and most importantly, don’t lose your focus and make sure you don’t give up at the first obstacle you find along your way. Growing a user base is a process and it takes time.</p>\n<p>If you found this article helpful, then the following articles may also interest you:</p>\n<ul>\n<li><a href=\"/how_to_manage_youtube_channel.html\" target=\"blank\">How to manage a Youtube Channel</a></li>\n<li><a href=\"/how_improve_facebook_post_reach.html\" target=\"blank\">How to improve your Facebook’s post reach</a></li>\n<li><a href=\"/basics_seo.html\" target=\"blank\">Basics of SEO </a></li>\n<li><a href=\"/How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">How to drive traffic to your website - SEO</a></li>\n</ul>\n"
}, {
  "title": "Influencers - The key to Word of Mouth",
  "author": "Mariana Rodrigues ",
  "tags": ["Influencers", "Word of Mouth", "Marketing"],
  "description": "Take a journey into the world of Word of Mouth strategy and learn how to start an epidemic.",
  "image": "/images/articles/influencers/word-of-mouth.jpg",
  "href": "influencers_word_of_mouth.html",
  "type": "article",
  "id": 6,
  "html": "\n<img src=\"images/articles/influencers/word-of-mouth.jpg\" id=\"articleimg\" alt=\"word of mouth\">\n<h2>Who are the influencers?</h2>\n<p>Malcolm Gladwell in his book “The Tipping Point”, goes on over the three factor that make and idea reach the tipping point and engender an epidemic: the law of the few, the stickiness factor, and the power of context. He believes it all start with the power of influencers to spread messages, identifying them as people with significant power over trends. Thus, they are divided in three types that represent about 20% of the population: Mavens, Connectors, and Salesmen.</p>\n<h2>1. Mavens</h2>\n<p>Mavens are usually experts, or with overpowering knowledge in a field that incite their influence by sharing their understanding and experience with others. And that is what makes them so successful in transmitting their ideas, not because they are persuasive but because they are perceived as specialists. These opinion leaders feel the need of being constantly learning, reason why they are always on top of the newest trends and technologies. That fact makes them educate their audience instead of being sellers.</p>\n<p>People look up to Mavens, and they may be your entering point into the market, into early-adopters. Frequently, these are the types of influencers more willing to help you if they do like your product. But as good as they might be for your business, they also have the power to ruin it. Some examples of these influencers are bloggers, celebrities, review sites, YouTube stars, journalists, talk show hosts, or niche media.</p>\n<h2>2. Connectors</h2>\n<p>Influencers can also be Connectors, people who have built a wide network of people, and are able to reach large groups of friends or other social connections. Connectors may even relate themselves to other Connectors making their network even wider. These people have very strong social skills, that enable them to maintain relationships with people from different backgrounds but receptive to their opinions. These rich connections turn them into trendsetters since their message is passed promptly to a broad social circle. The growth of social media platforms in people’s daily life has increased the power of these influencers and can be the perfect link between your brand or product and your targeted audience, so choose them wisely!</p>\n<h2>3. Salesmen</h2>\n<p>The final archetype Malcolm Gladwell identifies are Salesmen, and these are the most charismatic influencers of them all. They influence others by persuasion, having the power of convincing or selling their ideas to others. Their conviction and confidence on what they say make people trust them and their opinions.</p>\n<h2>What makes a influencer relevant to my brand</h2>\n<p>Influencers are important simply because customers are more receptive to their recommendations and opinions. If you make them real users of your product, you can even use them as testimonial advertising, making their opinion even more credible. However, influencers (specially Mavens) can be targeted to test your product and receive feedback. Check out how important is to receive customers’ feedback on our article on <a href=\"lean_product_testing.html\" target=\"blank\">Lean Product Testing</a>.</p>\n<h2>Different goals, different influencers</h2>\n<p>As mentioned previously, there are influencers that succeed the most on teaching, others persuading, and others communicating something to a targeted audience, so start reaching them and putting your products in their hands! If you are only trying to spread the word you might go for the Connector, if you are trying to sell your product go for the salesman, but if you want to educate your customers on your product or even sell it go for the Mavens. Ultimately you should approach all three if you want to have a strong Word of Mouth strategy and build an epidemic.</p>\n<h2>What is the right influencer</h2>\n<p>To reach the right influencer you need to make sure there is a perfect fit between your brand and the influencer, you achieve that by accomplish three main criterias:</p>\n<ul>\n<li><strong>Industry</strong>: the influencer should relate as much as possible with your industry. For example, getting your food truck reviewed by Anthony Bourdain (Maven and Connector) would boost your awareness considerably.</li>\n<li><strong>Traction</strong>: after you define your target audience, make sure the influencer can get to them. Simultaneously, your influencers should not only have a considerable number of targeted followers, but should also be able to generate interaction and engagement with them.</li>\n<li><strong>Personality and values</strong>: Make sure there is a match between your brand and the influencer personality. If the influencer will share content about your products, it should be in line with your brand image, personality, and your own content strategy. This alignment has extreme importance since it might influence your brand’s reputation.</li>\n</ul>\n<h2>Let the influencer do their job</h2>\n<p>One important advice you should follow is: don’t try to do all the work! Influencer marketing succeed because customers trust the influencer as a credible source. If you try to decide every little thing the influencer will say or do, even if you are paying him/her for it, it may not have the impact you would want. The best way to boost the impact of your influencer campaign is by making them show your product in their own channels, with their own words. Nevertheless, it is always good to invite them to participate on yours channels and content development.</p>\n<h2>Create an excellent relationship</h2>\n<p>Influencers, as much as they can be helpful for your company, they are not part of your company. This mean that the way you interact with them is important, and it is a relationship you must work on to be meaningful and lasting. It all start with creating mutually beneficial relationship. Your brand cannot be the only one that benefits from this association, you must create value for the influencer. You can do it monetarily, with rewards, you can give them more visibility on your platforms, or any other alternative that is valued by them.</p>\n<h2>Final Remarks</h2>\n<p>Influencer marketing opens a new form of marketing for you to get directly to your customers, it helps you strengthen and amplify your message. Thus, the right association might be vital for your success.</p>\n<p>Choose your influencers carefully, work on your relationship with them and measure the results. The best influencers will be the ones who can not only share awareness but also create action. This action can be translated in sales, number of likes on a page, or any other considered relevant to your business.</p>\n<p>Other article you may be interested in:</p>\n<ul>\n<li><a href=\"motivation-types.html\" target=\"blank\">Motivation Types</a></li>\n<li><a href=\"press-media-kit.html\" target=\"blank\">Media and press kit: how to for startups</a></li>\n</ul>\n"
}, {
  "title": "Market Life Cycle",
  "author": "Mariana da Silva Godinho",
  "tags": ["market", "cycle", "startup", "stages", "strategy"],
  "description": "The markets evolve through several stages. And in each stage, you should use a different strategy. Knowing how to identify the stage the market is in, is key to define the right strategy.",
  "image": "/images/articles/life-cycle/market-cycle.jpg",
  "href": "market-life-cycle.html",
  "type": "article",
  "id": 7,
  "html": "\n<img src=\"images\\articles\\life-cycle\\market-cycle.png\" id=\"articleimg\" alt=\"market-cycle\">\n<h2>Market Stages</h2>\n<p>As we see in the picture above, the market evolves in different stages (Introduction, Growing, Maturity and Decline. In the next few paragraphs we explain the characteristics of each of the stages and we will give examples of the best strategies to adopt in each one of them.</p>\n<h2>Introduction phrase</h2>\n<p><u>Market Conditions</u></p>\n<p>The first stage is the Introduction stage. At this time you will have undefined segments, few competitors and low sales. The consumers still have a low level of information/awareness about your company. Related to the firm itself, it has to charge a high price per customer, but will still have negative profits.</p>\n<p><u>Tactics/Decisions</u></p>\n<p>It’s important to think about some good tactics and make important decisions to improve your startups performance. Generally, in this stage, build Primary demand (innovators) and create product awareness and trial. The product should be basic with a narrow product line. You need to choose between a high price for your product if you want to recover costs (skimming) or a low price to develop demand (penetration pricing). The topic you should focus more is advertisemente and promotion and you need to invest a large amount. You need to educate your target by personal selling and demonstrations. You should also induce trial - give free samples and attempt to get PR coverage. Finally, have a selective distribution strategy.</p>\n<p><u>Creating a market</u></p>\n<p>If you entered the market at this stage, you will not have competition, the product is unique, it was you who created the market. However, the costs are very high (due to low production volumes and high Marketing costs) and there is almost certain that you will loose money in the initial years.</p>\n<h2>Growth stage</h2>\n<p><u>Market Conditions</u></p>\n<p>At this stage, the competition has already increased, the segments emerged and the sales are increasing. The consumers begin to be more informed. The company already has distribution channels and production process sharpen (efficient), the cost per customer is decreasing and the profits are increasing.</p>\n<p><u>Tactics/Decisions</u></p>\n<p>Generally, in this stage, you need to build secondary demand (market share), compete on features and watch out for “me‐too” products. The product has been innovated based on customer feedback, and already has extensions, warranties and services. As a result of the competition increasing, the price needs to be lower to penetrate the market and compete. Broaden your distribution: add more channels to meet demand. And don’t forget advertisement and promotion. Continue building brand awareness by, for example, advertising.</p>\n<p><u>Entering the market</u></p>\n<p>This stage is an excellent growth opportunity for the business, but the market is aggressive, there’s a lot of competition.</p>\n<h2>Maturity stage</h2>\n<p><u>Market Conditions</u></p>\n<p>This is the stage when the market has achieved it's full size potential. It has a very distinct segments, a high competition and peak sales. The consumers already expect something from you and demand quality and performance. Inside the firm you are looking for cost reductions in order to milk higher profits.</p>\n<p><u>Tactics/Decisions</u></p>\n<p>Generally, in this stage, you need to defend brand share, and you grow by stealing clients from competition. It is time for “freshening” brand with new claims. The product has already diversified brands and models. Its price drops to maintain share, if competition is heavy. A more intensive distribution should be built. Even though you already have a spot in the market, you have to continue promoting your product. At this point, stressing brand differences and benefits and handing coupons would be the best way to go.</p>\n<p><u>Entering the market</u></p>\n<p>This is a stage from which you can benefit if you can produce the same product at more affordable costs. There will be pressure to drop prices.</p>\n<h2>Decline stage</h2>\n<p><u>Market Conditions</u></p>\n<p>This is the last stage the market will face. You will go through a decline in sales and the segments will shrink or disappear. The preference of your customers will change and as a result, lower costs per customer. The profits will decline.</p>\n<p><u>Tactics/Decisions</u></p>\n<p>Above all, in this stage you will cut costs, reduce expenditures and milk the brand. You will be phasing out weak items and seek ways to make your product “new” again. One of the biggest concerns will be the cut in prices, so that you can sell of inventory. The place to be is more selective and you will be phasing out unprofitable channels. Advertisement and promotions need to be reduced to the level needed to retain hard-core loyals and to emphasize service.</p>\n<p><u>Exiting the market</u></p>\n<p>This is a stage where the market conditions are adverse and not suitable for you to enter the market with your product.If you are alrady in the markemt you should consider exiting the market and keep a close eye on profitability.</p>\n<h2>Final Remarks</h2>\n<p>As you have read, following this article, the market has four stages:</p>\n<ul>\n<li>Introduction stage,</li>\n<li>Growing stage,</li>\n<li>Maturity stage,</li>\n<li>Decline stage.</li>\n</ul>\n<p>Each of these stages has its specific features and techniques that can help you improve the performance of your business. You can enter the market in any of the stages, however the most recommended are the growing or the maturity stage. Entering in the introduction stage you make yu loose money in the initial years. In the declining stage, there isn't much attractiveness there anyway.</p>\n"
}, {
  "title": "Motivation types",
  "author": "Mariana da Silva Godinho",
  "tags": ["motivation", "need theory", "employees", "customers", "stakeholder"],
  "description": "Everyone has something that motivates them, both personally and professionally. In this article will explain Need Theory. This theory was proposed by psychologist David McClelland, and will help you better understand employees, customers and other stakeholder’s motivations.",
  "image": "/images/articles/motivation-types/motivation.jpg",
  "href": "motivation-types.html",
  "type": "article",
  "id": 8,
  "html": "\n<img src=\"images\\articles\\motivation-types\\motivation.jpg\" id=\"articleimg\" alt=\"motivation\">\n<h2>What is the “Need Theory”?</h2>\n<p>This theory is a model that tries to explain what motivates people to act in a certain way or to make a particular decision in a business context. According to McClelland, there are three types of people:</p>\n<ul>\n<li>the Achiever, </li>\n<li>the Power/Influencer</li>\n<li>the Affiliator.</li>\n</ul>\n<p>Each of these three types of people have their specific characteristics, needs, strengths and struggles, and we will talk about them briefly in this article. The characteristics that define someone in the work environment are shaped by the cultural experiences of each individual. However, the theory is not fully reflected in practice. It is very rare for someone to be a \"pure\" achiever,influencer or affiliator. Usually they are predominantly one, but also hold traits of the other.</p>\n<h2>How can we use the “Need Theory” to create an organizational culture?</h2>\n<p>We all know organizational culture. It translates what the group is and feels like. In a company (hierarchical group) Leaders, Founders and long standing team members of the company are the ones that have a strongest influence in the culture of the business. Changing one of those elements will probably change the culture of a company. The same thing if you hire or fire several people within the organization. Knowing each group element's needs, will help you understand, measure and engineer organizational culture. You can change the way your company operates, by defining a different mix between Achievers, Affiliators and Influences. If you want to know more about recruiting in a startup, read our article <a href=\"recruiting_startup.html\" target=\"blank\">Recruiting in a Startup</a>.</p>\n<h2>The Achiever</h2>\n<img src=\"images\\articles\\motivation-types\\elon_musk.jpg\" alt=\"elon-musk\" id=\"halfimage\">\n<p>The first type we’re going to talk about is the Achiever. This is someone that wants to achieve goals, solve problems, have a good performance, success and make things better. They are well organised, innovative, good planners but at the same time they struggle in delegating to others, valuing relationships and team and calculating risk taking. At their best they might show Empowering Behavior and at their worst they might show a Dictatorial Behavior. The best assignment types you can give them are the ones with specific outcome targets and that provides new challenges, and typically are suited to be high level executives in large organizations. The best type of roles for an achiever are:</p>\n<ul>\n<li>Fundraising,</li>\n<li>Administration,</li>\n<li>Training,</li>\n<li>Financial,</li>\n<li>Data gathering,</li>\n<li>Professional tasks,</li>\n<li>Board of directors,</li>\n<li>Entrepreneurship,</li>\n<li>Leadership of small task-oriented groups.</li>\n</ul>\n<p>A good example of an achiever is the CEO os Tesla and SpaceX, Elon Musk.</p>\n<h2>The Power/Influencer</h2>\n<img src=\"images\\articles\\motivation-types\\barack_obama.jpg\" alt=\"barack-obama\" id=\"halfimage\">\n<p>The Influencer is someone that mainly thinks about impact, influence, status and empowering others. They are good strategic thinkers, teachers/trainers and work better in hierarchy. However, they have some trouble dominating, argumenting and intimidating. At their best they might use power in an institutional manner and at their worst they might use power in a personal manner. A good assignment for them offers the opportunity to use influence and the ability to share expertise. They are not recommended for direct client service. These are the best roles for an influencer:</p>\n<ul>\n<li>Middle and high level management decision maker,</li>\n<li>Advocacy,</li>\n<li>Policy making,</li>\n<li>Fundraising,</li>\n<li>Political action,</li>\n<li>Speaker, trainer,</li>\n<li>Media representative</li>\n<li>Board chair.</li>\n</ul>\n<p>The former president of the United States of America, Barack Obama, is an excellent example for this type.</p>\n<h2>The Affiliator</h2>\n<img src=\"images\\articles\\motivation-types\\Marge_Simpson.png\" alt=\"marge-simpson\" id=\"halfimage\">\n<p>Finally, the Affiliator is someone who thinks about interpersonal relations, their feelings, their colleagues feelings and how they can help. They are good barometer of climate at the office, good listeners and persuaders. However, they struggle dealing with conflict, have difficulty in being objective and can overreact. At their best they might display Caring Leader Behavior and at their worst they might show Pollyanna Behaviour (the need of always seeing good in everything and in everyone). For them, a good assignment are a team or people-oriented activities and relationship building activities. They usually are not managers. The best type of roles for an affiliator are:</p>\n<ul>\n<li>Direct client services,</li>\n<li>Public relations,</li>\n<li>Customer service,</li>\n<li>Support activities,</li>\n<li>Planning/giving recognition to others,</li>\n<li>Leading terms or support groups,</li>\n<li>Roles providing opportunities to socialize,</li>\n<li>Roles which offer group involvement.</li>\n</ul>\n<p>Marge Simpson is fictional character that exemplifies the influencer.</p>\n<h2>How to identify which need profile</h2>\n<p>You can identify what type your contributors are by submitting them to the <a href=\"bloomington.in.gov/media/media/application/pdf/8385.pdf\" target=\"blank\" rel=\"nofollow\"><b>Motivation Analysis Quiz</b></a> or you can try and identify some signals which are archetypical of each profile for example:</p>\n<ul>\n<li>Achiever - possible clue: extensive organized smart phone,</li>\n<li>Influencer - possible clue: recognition plaque on the wall,</li>\n<li>Affiliator - possible clue: has the biggest contact list and the largest number of friends on Facebook.</li>\n</ul>\n<h2>How can we use the “Theory of Needs” to motivate employees?</h2>\n<p>After identifying which type of “theory of need” profile you are dealing with, you can attend to their needs and keep them motivated. We will briefly going through each profile and identifying some of the most relevant needs.</p>\n<p>The achiever needs:</p>\n<ul>\n<li>Rapid feedback,</li>\n<li>Challenges and opportunities to improve oneself,</li>\n<li>High standarts, unique accomplishments,</li>\n<li>Deadlines,</li>\n<li>Responsability,</li>\n<li>Checklists,</li>\n<li>Likes to work alone or with other high achievers.</li>\n</ul>\n<br>\n<p>The influencer needs:</p>\n<ul>\n<li>Position of leadership and influence,</li>\n<li>Public recognition,</li>\n<li>Prestige and job status.</li>\n</ul>\n<br>\n<p>The affiliator needs:</p>\n<ul>\n<li>To help and be needed,</li>\n<li>To be with friendly people,</li>\n<li>To feel included and liked by a larger group,</li>\n<li>To be supervised by a “leader-friend”</li>\n<li>Personal recognition,</li>\n<li>Opportunities to express feelings.</li>\n</ul>\n<br>\n<h2>Other stakeholders</h2>\n<p>As we said in the beginning of the article, this theory is not only helpful because of the employees. It also helps the company dealing with:</p>\n<ul>\n<li>Customer Segmentation - A product may be taillored to an achiever, affiliate or an influencer</li>\n<li>Know how to deal with suppliers and customers.</li>\n</ul>\n<h2>Final Remarks</h2>\n<p>In general, soft skills are important. Knowing how to read the needs of the people around us is an important skill. In this sense, this theory is another tool in your toolbelt to help you achieve your goals. You need to respect and help them fulfill their needs for them to be motivated. </p>\n"
}, {
  "title": "Media and press kit: how to for startups",
  "author": "Mariana da Silva Godinho",
  "tags": ["media kit", "press kit", "journalists", "social media"],
  "description": "Getting your startup covered by the media is very important. The press helps publicize your product, services or brand, however it can also damage the reputation of a brand. We will explain how and why you should have both Media and Press Kit.",
  "image": "/images/articles/media-press-kit/business.jpg",
  "href": "press-media-kit.html",
  "type": "article",
  "id": 9,
  "html": "\n<img src=\"images\\articles\\media-press-kit\\business.jpg\" id=\"articleimg\" alt=\"business\">\n<h2>Press kit vs. media kit</h2>\n<p>The best way to be recognized by the press is through kits that spare journalists the trouble of having to research about your startup. There are two type of kits: media kits and press kits. The media ones are tangible, and include elementes such as postcards or brochures and the press kits are digital. Next we will dive into the ins and outs of media and Press Kits.</p>\n<h2>Media kit</h2>\n<p>The media kit is something you deliver to a journalist, in order to introduce your company and help him run articles about your business. These are the characteristics and elements that compose a Media Kit:</p>\n<ul>\n<li>Not digital - tangible kit,</li>\n<li>Flyers - Branded and simple,</li>\n<li>Service summary - a A4 page with all the most important information about the services your startup provides,</li>\n<li>Postcards/pens/bookmarks (gifts) - something that is useful and reminds the journalist of your brand,</li>\n<li>Folder - Helps in the presentation of the kit and is one of the most visible branding elements,</li>\n<li>Stats - Try to create good impression with interesting facts and statistics about your startup,</li>\n<li>About Us - a brief paragraph where you present your business and its goal,</li>\n<li>Contact card - Creating a liaison between the journalist and the company is fundamental, include the basics like phone number, address and email,</li>\n<li>Social media accounts - always try to be explicit about all the social networks in where your business is, this way the journalists may follow your company posts.</li>\n</ul>\n<h2>Press kit</h2>\n<p>A press kit is an online page in your website where journalists can find information they want about your company.</p>\n<ul>\n<li>Digital - online kit,</li>\n<li>History/About Us/Manifesto - a more detailed text with all the information about your company that might be interesting for the journalists,</li>\n<li>Company facts - More detailed statistics than in the Media Kit,</li>\n<li>Customer reviews - Use quotes from happy customers to improve on credibility,</li>\n<li>Logo Images - Make all your business logos available and explain how to use them,</li>\n<li>Organizational culture of the company - The culture is the be all and end all of an organization. It defines the work environment, defines how do you communicate with your customers and how does your startup makes decisions.To understand a little bit more about the company culture read our <a href=\"recruiting_startup.html\" target=\"blank\"> article about recruiting in a Startup</a>,</li>\n<li>The team - present the people behind the project,</li>\n<li>Media publications - make reference of media coverage about your company.</li>\n</ul>\n<h2>Only Press?</h2>\n<p>The idea behind these kits, was originaly to be directed specifically for the press, television, radio. Nowadays Press should includes influencers (influential people on social networks) and bloggers as well. So you should create and send Media Kits and press Kits to both old schools press and influencers or bloggers.</p>\n<h2>Your target</h2>\n<p>There are a lot of newspapers and magazines in every country, so the first step is to filter them by themes. You should choose the ones where your business can be published and, at the same time, those who have a significant number of followers. To choose the journalists to target, two important aspects have to be taken into account:</p>\n<ul>\n<li>The theme that journalists talk about - if your startup is, for example, technology related, the journalists you will try to address are the ones that write about technology, not about politics, for example. Searching the newspapers for the journalists who write the most about your theme will make your efforts more effective,</li>\n<li>Journalists on social networks - Like newspaper or magazine, a journalist must have an audience on social networks and actively post information on it.</li>\n</ul>\n<p>If your target is small, it means that you can focus on them and prepare a more involving strategy, to win them over. On the other hand, if your target is large, you may need to prioritize your target.</p>\n<h2>Average vs. Outstanding</h2>\n<p>If you want to make an impact, you have to be creative. Just delivering the media kit is not enough. Your kit needs to stand out, amongst thousands of press kit and Media Kits. It has to be something original, something that makes a difference and is rememberable. You can innovate in the elements of the kit itself or in the way you deliver it or follow through. For example, here at Idea Ninja, we could contract an actor to dress up as a Ninja and make him deliver our kit. The journalist would never forget that an actual Ninja delivered the kit and will definitely be curious about it. For the press kits is more difficult to innovate, because it is an online page. However you can always find ways to make it more interactive and interesting. For example, making a video presenting your business to complement the written information. These first impressions are important to develop a relation with the journalists. If they are impressed, you will be covered by the media, allowing for “free” publicity.</p>\n<h2>How do you get louder?</h2>\n<p>Unlike a press kit, a Media Kit is active. So you must try to use it to approach the Media and spread your word of mouth. You can deliver your kit in hand (example: in an event that you know will be covered by media), send it by mail. The more you spread your kit, the more likely you are to be covered. But this is only the start. After you have created a relationship with a journalist you need to continue interacting with them:</p>\n<ul>\n<li>Prepare and use press release often with relevant and entertaining information,</li>\n<li>Ask feedback,</li>\n<li>Engage in a conversation about the future of your company and the industry.</li>\n</ul>\n<h2>Kit distribution - Locally vs. Globally</h2>\n<p>The media kits are costly, so you need to define a clear target. There are two strategy when it comes to approach Media. You either do it:</p>\n<ul>\n<li>Locally - if you’re not sure you’ll have success, start with a small target, locally. Being local and small makes it easier to get feedback and improve Kits. Furthermore doing it locally and small is cheaper,</li>\n<li>Globally - If you want to go big immediately and it doesn’t matter how effective your are, go global. It will cost you more, but you will reach many more journalists.</li>\n</ul>\n<p> Although the Global option increases the chances of having more media coverage, here at Idea Ninja, we suggest you first try doing it locally and tune your kit. Only after improving the effectiveness of the kit, should you go global.</p>\n<h2>Relationship with Media</h2>\n<p>Engaging the Media is an art form. You should promote proximity, but also be aware that the media can make it or break your reputation. In the case of something backfiring, it will be much easier to manage if you have a good relationship with the journalists, bloggers and influencers than, if you have no relationship at all. Creating, promoting and maintaining good relationship with the media, is one of your biggest challenges.</p>\n<h2>Final Remarks</h2>\n<p>Having the Media on your side makes your life a lot easier as an entrepreneur. Making it easy for Journalists to talk about your brand is very important in developing a good relation with the press. To develop a good relationship we advise you to:</p>\n<ul>\n<li>Have both kits: press and media kit,</li>\n<li>Share them with the press, and also with influencers and blogs,</li>\n<li>Have an original Media Kit,</li>\n<li>Choose between a local or global distribution strategy.</li>\n</ul>\n"
}, {
  "title": "How to manage a Youtube channel",
  "author": "Mariana da Silva Godinho",
  "tags": ["Youtube", "channel", "content", "social media", "startup"],
  "description": "Nowadays, more and more people/companies have a channel on youtube where they complement their websites or blogs. Over a billion users use this social network to interact with their target audience.",
  "image": "/images/articles/youtube_channel/youtube.jpg",
  "href": "how_to_manage_youtube_channel.html",
  "type": "article",
  "id": 10,
  "html": "\n<h2>The growing importance of Youtube</h2>\n<p>The number of hours of video seen on youtube has been growing by more than 50% (2015 vs. 2016). This increase of importance is related to:</p>\n<ul>\n<li>Higher bandwidth, allows you to watch higher quality videos without lag,</li>\n<li>Content consumption simplicity. Video continues to be the simplest format to consume information.</li>\n<li>Media richness. Video is a richer medium, when compared with articles or photos or audio, because you have visual and audio comunication put together to deliver both verbal and nonverbal messages.</li>\n</ul>\n<img src=\"images\\articles\\youtube_channel\\youtube.jpg\" id=\"articleimg\" alt=\"youtube\">\n<h2>Marketers ruined it all</h2>\n<p>What started out as a platform where anyone could share their videos and have fun doing so, became one of the biggest business in the world. Vlogs, unboxing videos, how-to/tutorials and timelapse videos are some of the most popular videos right now. Others use it as a way to complement to the content they have on their websites. They are used not just by individuals, but also by companies to advertise (through ads) or by creating content and monetizing it (taking adds into their videos).</p>\n<h2>Why do people watch Youtube</h2>\n<p>Every day people watch hundreds of millions of hours on youtube.These are two of the reasons why most people resort to youtube:</p>\n<ul>\n<li>Entertainment - When you're bored, you search for entertaining videos,</li>\n<li>Learn - searching for a tutorial or relevant information on the subject.</li>\n</ul>\n<p>Your videos should satisfy at least one of these two needs. If they are good, people will share them.</p>\n<h2>Becoming a Vlogger</h2>\n<p>For a business, there are many reasons why you should start vloging. You wouldn’t even consider not having a facebook page, in order to generate awareness to your brand and facilitate sales, so you should also use the potential that youtube offers. Nowadays making videos is not as hard as you might expect, but before that there are other tasks that need your attention. Here is how to start.</p>\n<h2>1st step: create a channel</h2>\n<p>It's really important for you to understand that you should create a brand and not just a youtube channel. And why is that? You want to be able to interact with your target as a brand. A brand allows you to expand beyond youtube and use multiple channels to generate awareness:</p>\n<ul>\n<li>Other social media,</li>\n<li>Website/blog,</li>\n<li>Event participation.</li>\n</ul>\n<p>However, creating a branded youtube channel requires time to dedicate to these topics:</p>\n<ul>\n<li>Theme selection,</li>\n<li>Concept development,</li>\n<li>Interaction on social media,</li>\n<li>Algorithm optimization.</li>\n</ul>\n<h2>Theme selection</h2>\n<p>Regarding the theme that you should choose for your channel or your videos, there is a duality: </p>\n<ul>\n<li>you can either decide to talk about something that has a very large audience and very strong competition,</li>\n<li>or a smaller audience, but with a trending subject with little to no competition.</li>\n</ul>\n<p>If you chose to face the big guns in the market you will have a very hard time. But at the same time the payoff is immense. If you chose to go small, be aware that you may have difficulty moving out of that niche and asserting yourselves in different topic.</p>\n<p>If you want to cause an impact, your theme must be:</p>\n<ul>\n<li>clear,</li>\n<li>interesting,</li>\n<li>have a big enough audience,</li>\n</ul>\n<h2>Concept development</h2>\n<p>Every youtube channel needs a concept. You need to develop an idea for the channel that will translate itself to: </p>\n<ul>\n<li>Overview,</li>\n<li>Aesthetic concept,</li>\n<li>Playlists,</li>\n<li>Humorous/entertaining note,</li>\n<li>Structure.</li>\n</ul>\n<h2>Interaction on social media</h2>\n<p>Nowadays there are many social networks at our disposal, so we can try to make the most of them, as far as sharing our content is concerned. Try to share your videos and your channels in all social networks. If someone comment your posts, interact with them as much as you can, because this will make them feel that they are contributing to the channel and being part of the brand. Let them suggest content for new videos and respect their opinions. Overall, try to always be in touch with viewers. And finally, try to collaborate with other channels. It will direct users from their channel to yours and vice versa, giving you both more viewers and subscribers.</p>\n<h2>Algorithm Optimization</h2>\n<ul>\n<li>Pace - Frequency that you launch new content in your channel,</li>\n<li>Metadata -title, description, tags and thumbnails are important, because in early stages youtube depends on them to rank your video and understand the main topics behind it,</li>\n<li>Recency - when you search for videos on youtube, it will present you first the ones that are more recent,</li>\n<li>Watch time - Although the time a user watches a video is important, it is even more important the session watch time, which is the time the user will watch your video, plus all the other watched during the same session. So having a follow through strategy is paramount,</li>\n</ul>\n<p>From time to time, try to take a look at previews videos using youtube analytics, study the results of your video and try to introduce new changes (vary on video length, change tagwords, etc) to optimize the results</p>\n<h2>2nd step: The videos</h2>\n<p>Once you have created a channel and the concept is developed, we can start producing. There are two very important processes in this production: capture and editing. If you want to know more about <a href=\"How-to-make-easy-videos.html\" target=\"blank\">how to make easy videos, read our article</a>.There are several softwares to help you allong the way, and we'll give you some good examples.</p>\n<h2>Screen Capture Solutions</h2>\n<ul>\n<li>CamStudio (Windows) - Free</li>\n<li>QuickTime (Mac) - Free</li>\n<li>Camtasia Studio (Windows, Mac) - Paid</li>\n<li>ScreenFlow (Mac) - Paid</li>\n</ul>\n<h2>Video Editing Solutions</h2>\n<ul>\n<li>Movie Maker (Windows) - Free</li>\n<li>iMovie (Mac) - Free</li>\n<li>Camtasia (Mac, Windows) - Paid</li>\n<li>ScreenFlow (Mac) - Paid</li>\n</ul>\n<h2>Structure of the video</h2>\n<p>The videos you put out should be immediately recognizable as yours. This means that you must create an identity, in your videos, and apply the same structure for all of them. Here is an example of a stratucture commonly found in youtube:</p>\n<ul>\n<li>Set the hook,</li>\n<li>Introduction,</li>\n<li>Main content,</li>\n<li>Intro out/conclusion/final remarks,</li>\n<li>Subscribe and other videos.</li>\n</ul>\n<p>Some videos only have the introduction, development and conclusion, but the setting the hook and subscribe and other videos are important for increasing the views of the video. Setting the hook, defines the expectations of what the video will be about and what to expect from it, reducing the bounce rate along the video. The subscribe and other videos allows for increasing your viewers base and generate a higher total view time.</p>\n<h2>How to keep increasing views and subscribers</h2>\n<p>In order to increase your views and subscribers, you need to keep a steady pace of posting:</p>\n<ul>\n<li>Post, at least, one video in every two weeks,</li>\n<li>Aim for 5 minutes vídeos (Lately Youtube seems to be pushing fo longer videos),</li>\n<li>Focus on making an awesome thumbnail,</li>\n<li>Keep in mind that is very important to add the most watchtime in the first week as possible.</li>\n</ul>\n<h2> Final Remarks</h2>\n<p>Given the importance that youtube has today, we need to realize how can we use youtube to grow our business. However, as any socialmedia algorithm, Youtube’s algorithm is always undergoing minor adjustments, so we have to keep up to date. If you are interested in Digital Marketing you may also find interesting our article on <a href=\"how_improve_facebook_post_reach.html\" target=\"blank\">How to increase your facebook post reach</a> and <a href=\"basics_seo.html\" target=\"blank\">Basics of SEO</a>\n</p>"
}, {
  "title": "How to make easy videos",
  "author": "Mariana da Silva Godinho",
  "tags": ["Videos", "how to's", "content", "website", "startup"],
  "description": "Video is one of the best ways to communicate. In this article we will give you some advice about how to make easy videos.",
  "image": "/images/articles/easy-video/filming_video.jpg",
  "href": "how-to-make-easy-videos.html",
  "type": "article",
  "id": 11,
  "html": "\n<h2>Why are videos relevant in a website?</h2>\n<p>I think we speak for most people when we say that people in general prefer to watch a video than read. When it comes to the choice between a video and an article, the video usually wins. And why is that? Because videos require less effort from the part of the person who is watching them and don't take as long as the article takes to read. So, to follow the trend and gain traffic try to add this type of content to your website. Find out more about <a href=\"How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">driving traffic to your website</a> in our article</p>\n<img src=\"images\\articles\\easy-video\\filming_video.jpg\" id=\"articleimg\" alt=\"Filming Video\">\n<h2>The goals you should set for your videos</h2>\n<p>Before you make a video, you need to decide which one of these three goals you will set for it:</p>\n<ul>\n<li>capture traffic to your website </li>\n<li>create a tutorial for a product/service</li>\n<li>sell your product/service</li>\n</ul>\n<p>Once you've set your goal you will decide which type of video best fits it.</p>\n<h2>Different types of videos</h2>\n<p>Throughout the internet we can see three types of videos:</p>\n<ul>\n<li>Cheap and small production videos - They never aim to generate traffic to a website, but to complement the website articles, serve as tutorials, etc. So, for this type of videos, you must have content already . Find out how to write articles for the web <a href=\"How-to-write-article-for-the-web.html\" target=\"blank\">here</a>.</li>\n<li>Average productions videos - For these type of videos, you need to make an investment ranging from € 2,000 to € 5,000. Each video will take an average of 10 hours to be made and you will need to publish about 10 videos per month. However, in order for the investment to pay off, each video must have approximately 12,000 views.</li>\n<li>Big productions videos - These are videos that have a way of reaching the public totally different from the other two and in which the budgets much deeper pockets.</li>\n</ul>\n<h2>Big production videos</h2>\n<p>These kind of videos are, for example, the movies we watch on cinema, series, tv shows, and so on. Although they are very good videos, they have some disadvantages for those who are thinking about starting a business. First, they are really expensive and require a large investment in material so that the final result is no less than excellent. Then, you can't film everything inside, you also need outside spaces to shoot. The spaces need to be meticulously sought out and then reserved, which takes up a lot of time and sometimes, also money. Choosing the right actors is another crucial factor. The casting process is something that takes time, and spends lots of money. And finally, the professional editing, which can not be done by anyone, but by someone with qualifications for such. And it has to be a team, it can not be a lonely person. It also takes a lot of time. So, although it's the best kind of video that we can present to your target audience, it requires a very large stake from the startup.</p>\n<p>Example: Roadkill</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/qDK86kzgUPg\" data-src=\"https://www.youtube.com/embed/qDK86kzgUPg\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<h2>Average production videos</h2>\n<p>These are also good videos but that don't need so much material and space. This type of content may already be the ideal for your business, however it still costs some money. First, you need to bet on lightning. If you don't have the necessary light to film it, it will not have good quality. Even if you do not have to invest in a lot of material, make sure that what you have is of good quality. You often still need more than one camera to this type of videos. And finally you need to choose wisely the room where the video will be recorded. You need to take into account some factors, such as the echo and some other acoustic aspects.</p>\n<p>Example: The Random Show</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/sPleJbpqbwc\" data-src=\"https://www.youtube.com/embed/sPleJbpqbwc\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<h2>Cheap and small production videos</h2>\n<p>These are the easiest of them all and we will focus a bit on these. There are three basic steps to create a cheap and small video:</p>\n<ul>\n<li>Narrative</li>\n<li>Screen capture</li>\n<li>Audio capture</li>\n<li>Edition</li>\n</ul>\n<p>Next, let's deepen in each of these three steps.</p>\n<p>example: Article writing tool tutorial </p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/RK2NjeoEp9I\" data-src=\"https://www.youtube.com/embed/RK2NjeoEp9I\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<h2>Narrative</h2>\n<p>The narrative you develop must be colloquial and really work well in a video scenario. Here at IdeaNinja we are used to work with Google Presentations because is easy and accessible to everyone. However, there are many others to choose from. To make the video more interesting, you can add icons to your presentation. In <a href=\"http://iconmonstr.com\" target=\"blank\" rel=\"nofollow\">iconmonster</a>, the icons are free and you can search exactly what you are looking for. If you want to add images check out our <a href=\"Improve-your-website-design-free-photos.html\" target=\"blank\">article</a>. You also need to make sure you are making the screen capture in 16:9, or the image will be cutted.</p>\n<h2>Screen capture</h2>\n<p>After your narrative is written, it's important to have a chosen program to present the video's theme. To capture the presentation you create, there are many applications to capture the screen, for example Fraps, but we use one called Camstudio, which is free and very easy to use.</p>\n<h2>Audio capture</h2>\n<p>The audio in a video is very important, so you need to make sure it's well recorded. There are two types of setup to record audio for this kind of content You can use a USB sound board with a microphone or just connect a good microphone with an usb connection. To edit the sound you have lots of programs. We can recommend you Reaper if you have windows or Garageband if you have a MacOS.</p>\n<h2>Edition</h2>\n<p>This is the part that probably takes more time, however, if you choose an easy program to edit, it'll be faster. We will give you some quick tips to help you.</p>\n<ul>\n<li>Try to first measure the time of the audio, then making the screen capture,</li>\n<li>Split the audio and video in small pieces to make it easier to synchronize the two,</li>\n<li>Try to make the audio and the image sound natural and don't worry about silences, sometimes they are needed.</li>\n</ul>\n<p>Depending on your editing level skill you can go from something as simple as movie maker or imovie to Avid media composer.</p>\n<h2>Final Remarks</h2>\n<p>To conclude, it's important that you realize that videos are very important to startups, even if they only serve as a support for articles or as tutorials.</p>\n<p>Here are some final remarks:</p>\n<ul>\n<li>Set goals to your video,</li>\n<li>Choose the kind of video that most fits your goal (big production videos, average production videos or cheap and small production videos),</li>\n<li>When it comes to cheap and small production videos, do not skip any of these steps: Narrative, screen capture, audio capture and edition.</li>\n</ul>\n"
}, {
  "title": "Books for entrepreneurs - Curated list plus video",
  "author": "Miguel Teixeira",
  "tags": ["Curated List", "Startup", "books", "approach", "strategy", "talks", "videos"],
  "description": "We, at IdeaNinja, have created an entrepreneur book curated list with videos that summarized the books, so that you can make the most of your time or help you select the next book to read.",
  "image": "/images/articles/books_list/books.jpg",
  "href": "books_for_entrepreneurs_curated_list_plus_video.html",
  "type": "article",
  "id": 12,
  "html": "\n<img src=\"images/articles/books_list/books.jpg\" id=\"articleimg\" alt=\"Entrepreneurship books\">\n<h2>Videos: the faster alternative to books</h2>\n<p>Throughout this article, we will provide videos with summaries or talks about the books we are recommending.&nbsp;The idea behind it is that you get a sense of what the book is about and quickly grasp the main concepts.&nbsp;We do recommend you see the video and then read the book if you are interested in deepening your knowledge on the topic.</p>\n<h2>\"The Lean Startup\", by Eric Ries</h2>\n<p>Topic: <strong>Strategy</strong></p>\n<p>This is probably the most important book on entrepreneurship right now.&nbsp;Eric Ries has put together a framework that is heavily adapted by entrepreneurs all over the world and, in particular, in Silicon Valley.&nbsp;The crux of this book is that in case of extreme uncertainty, like the launch of a product, you often fail. And when that happens, we learn.&nbsp;How can we test and iterate faster, with less costs?&nbsp;We use two powerful concepts: developing and testing minimum viable products and pivot when needed. Take a look to Eric Ries' discuss his book.</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/PXUd7wXrb0Q\" data-src=\"https://www.youtube.com/embed/PXUd7wXrb0Q\" height=\"auto\" width=\"100%\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>\"The Tipping Point\" - Malcolm Gladwell</h2>\n<p>Topic: <strong>Marketing</strong></p>\n<p>In the Tipping Point, Malcolm Gladwell goes on to explain how ideas become widespread.&nbsp;There are 3 factors that can contribute to tilting the plane and get an idea to reach its tipping point and become widespread. And those are: the law of the few, the stickiness factor, and the power of context.&nbsp;All of these 3 aspects combined work together to offset the balance and send ideas into trends and form new habits.</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://player.vimeo.com/video/108900294?color=ffffff&amp;title=0&amp;byline=0&amp;portrait=0\" height=\"auto\" width=\"100%\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>\"The Long Tail\", by Chris Anderson</h2>\n<p>Topic: <strong>Marketing</strong></p>\n<p>The idea championed in this book by Chris Anderson, chief editor of Wired Magazine, is that:&nbsp;globalization and technological advancements has driven the cost of developing and marketing products down.&nbsp;And so with it, died the economy of scarcity and was born the economy of abundance.&nbsp;Which resulted huge increase in offer and so the customer got exactly what they wanted (several niche products) and not the middle of the road product (mass market products).&nbsp;You can learn all about it in this Chris Anderson talk about the long tail:</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/x0h0FP6QWHA\" data-src=\"https://www.youtube.com/embed/x0h0FP6QWHA\" height=\"auto\" width=\"100%\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>\"How to build your startup on your own terms\" by Jason Fried</h2>\n<p>Topic: <strong>Strategy</strong></p>\n<p>Jason Fried, the founder and CEO of 37signals (creator of basecamp), shares his views on choices an entrepreneur has to face to build his startup in his book \"How to build your startup on your own terms\".&nbsp;This book discusses the freedom an entrepreneur has to run his own startup, and how that freedom must be defended and what you should avoid.&nbsp;It also talks about the foundations of a business like Human Resources, growth strategy and the importance of a company building an audience and answers key questions like when to hire, speed of growth and company culture.&nbsp;Check Jason Fried's talk about his book \"How to build your startup on your own terms\".</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/sYgVUs3tW-A\" data-src=\"https://www.youtube.com/embed/sYgVUs3tW-A\" height=\"auto\" width=\"100%\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>\"Predictabily Irrational\" by Dan Ariely</h2>\n<p>Topic: <strong>Marketing and consumer behavior</strong></p>\n<p>Dan Ariely, professor of behavioral economics at Duke's School of Business, and has worked with MIT Medialab and MIT Sloan School of Management.&nbsp;In his book, he goes on explaining some of our irrational behaviors and perception biases.&nbsp;Learn how to use this knowledge to understand your customers and other stakeholders.&nbsp;From several ways to frame answers to get the results you want, to the power of simplicity in the process of decision there are tons of lessons you can derive from Dan Ariely's teachings.</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/VZv--sm9XXU\" data-src=\"https://www.youtube.com/embed/VZv--sm9XXU\" height=\"auto\" width=\"100%\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>\"Jab jab jab right hook\" by Gary Vaynerchuk</h2>\n<p>Topic: <strong>Social Media</strong></p>\n<p>Gary Vaynerchuk, CEO and founder of VaynerMedia, is a trailblazer when it comes to Social Media. Gary has grown VaynerMedia to become one of top social media agencies in the world. In his book, he explain why and how to effectively communicate in Social Media to achieve sales. Learn the best practices and trends in social media today. Check Gary Vaynerchuk's Talk about his book:</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/AC3XtSYM5aY\" data-src=\"https://www.youtube.com/embed/AC3XtSYM5aY\" height=\"auto\" width=\"100%\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>\"From Zero to One\", by Peter Thiel</h2>\n<p>Topic: <strong>Strategy</strong></p>\n<p>Peter Thiel, probably the most important VC in Silicon Valley and founder of Paypal, shares his view on startups.&nbsp;He goes on to discuss Monopoly (uniqueness) vs competition (sameness), where those who chose to compete are losers.&nbsp;Competition leads to mimic behaviors which leads companies through the wrong paths.&nbsp;Where in Monopoly, you chose to think differently and that leads to markets, where you do not need to compete and margins are higher.&nbsp;He also talks about a world of secrets where the obvious truth is often hidden. Check Peter Thiel talks about his book Zero to one:</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/RUMgK0TyV1Q\" data-src=\"https://www.youtube.com/embed/RUMgK0TyV1Q\" height=\"auto\" width=\"100%\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<br>\n<h2>Additions, comments and final remarks</h2>\n<p>There are many books that could have made its place into this list.&nbsp;However, we want to keep it short, to allow you to quickly get up to speed on these topics.&nbsp;If you wish to suggest a book, please do so through our contact form or through the comment section below.&nbsp;We would recommend you read the following articles to improve your understanding on several challenges of entrepreneurship:</p>\n<ul>\n<li><a href=\"how_to_value_business_idea.html\" target=\"blank\">How to value business ideas</a></li>\n<li><a href=\"reasons_why_startups_fail.html\" target=\"blank\">Reasons why do startups fail</a></li>\n<li><a href=\"entry-barriers-online-startup.html\" target=\"blank\">Entry barriers for an online startup</a></li><a href=\"entry-barriers-online-startup.html\" target=\"blank\">\n</a></ul><a href=\"entry-barriers-online-startup.html\" target=\"blank\">\n<p>Thank you for your time, and please help us spread the message through social media.</p>\n</a>"
}, {
  "title": "Basics of SEO",
  "author": "Miguel Teixeira, , Raquel Nascimento ",
  "tags": ["SEO", "Marketing", "Website"],
  "description": "When you create a website, you want to have the most page views you can get. Therefore, appearing on one of the first positions of Google's search results page is key to generate lots of free traffic to your website.",
  "image": "/images/articles/basics_seo/crtl.jpg",
  "href": "basics_seo.html",
  "type": "article",
  "id": 13,
  "html": "\n<h2>What is SEO</h2>\n<p>There are over 47 billion websites available on the Internet, an average of more than 6 pages per person. It's a lot. With these numbers, search engines needed to find a way to rank the pages in a given search result and make sure people would find useful and trustworthy information on the web. For that, they created an algorithm to rank webpages. As soon as this algorithm was created, companies tried to crack it, in order to understand how they could reach the top of the search results page. SEO, or Search Engine Optimization, is the area of knowledge dedicated to the improvement of a website’s position in the search results page. The pages with higher SEO score, have a better position in Google's results pages. There are several rules Google uses to evaluate web pages and has put forward guidelines with best practices.</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" height=\"auto\" width=\"100%\" src=\"https://www.youtube.com/embed/dsBsmERDMkk\" data-src=\"https://www.youtube.com/embed/dsBsmERDMkk\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<h2>Page authority</h2>\n<p>Google created an algorithm named Page Authority to attribute a score to a webpage, and although the score of each page is kept secret by Google and other search engines, we know that:</p>\n<ul>\n<li>This score goes from 1 to 99, being 99 the best score possible,</li>\n<li>To determine page authority, Google takes into account two kinds of variables: Internal and External factors,</li>\n<li>To calculate page authority they multiply the two groups of factors (Internal and External).</li>\n</ul>\n<p>Through the years, information on Google’s algorithm was leaked and deducted from empiric knowledge. Nowadays there are several online services that provide you information on your page authority score. Although some of those services are pretty accurate, none of them can claim to be 100% right. We advise you to use these services, to get a sense of where your website stands, but take the data with a pinch of salt. It is absolutely paramount that you keep track of how Google looks at you, and you should do it using their <a href=\"https://www.Google.com/webmasters/tools/\" rel=\"nofollow\" target=\"blank\">webmaster tools</a>.</p>\n<h2>Internal vs External factors</h2>\n<p>In the internal factors of a page Google tries to appraise the quality of its contents. They are divided into:</p>\n<ul>\n<li>Speed of the page,</li>\n<li>Depth of content,</li>\n<li>Adherence to Google guidelines.</li>\n</ul>\n<p>The external factors are exclusively related to the amount of backlinks a page has. The rationale behind it is that a good webpage is referenced by others. Backlinks are measured by the amount of times a page is referred in other pages through links. Because page authority results from the multiplication of Internal and External factors you should take both under consideration. A low score in one of them will undermine your efforts in the other factor (example: If a page has a great amount of backlinks but poor content, the result is a low page authority and vice versa).</p>\n<h2>What are Backlinks</h2>\n<p>Although all links are useful, not all of them will help your page improve its page authority score. Links from other sites are always a good source of traffic. However to add score to your page authority they must not be rel=”nofollow”. You can check this out by inspecting the element of the link:</p>\n<ul>\n<li>A link is not useful when their reference to your page is rel=nofollow, as you can see in the picture. We can save you some time and tell you that all social media pages are rel=nofollow, and therefore useless as a backlink. This means that every share of a website page you make on Facebook, Twitter, Instagram, etc, adds nothing to your website’s page authority.</li>\n<li>A backlink counts if the link is not rel=nofollow. When you inspect the element, as you can notice by observing the second picture, and the rel=”nofollow” attribute is not present then the link is adding score to the page.</li>\n</ul>\n<img src=\"images/articles/basics_seo/nofollow.jpg\" id=\"articleimg\" alt=\"baclink nofollow link\">\n<img src=\"images/articles/basics_seo/follow.jpg\" id=\"articleimg\" alt=\"baclink follow link\">\n<p>The better the page that references you, or the higher is the page authority, the more score it adds to your page. So, how do you find out the amount of score a link can give you? There are several providers of backlinks analysers out there that will help you make this assessment. At the moment, we rather not recommend any specific one, but we do suggest you use one.</p>\n<h2>How to get backlinks - important tips</h2>\n<ul>\n<li>The key to get high quality backlinks is to focus on getting an effective Marketing strategy to your pages, rather than using endless schemes that won't lead you far.</li>\n<li>Create a blog associated with your page. For instance, if you sell doorbells the only goal of your website is to be a sales page to your product. You may have a hard time getting other pages to backlink your website. You can turn things around if you create a blog with useful information about doorbells and their importance in safety with frequent questions about them. This way the goal of your blog is to become the most significant source of information about doorbells in the web, gathering links from all websites related to the subject. Once you build a strong score on your blog you can link to your webpage, not only directing traffic, but also adding score to your webpage. If indeed your blog becomes the biggest authority in the web regarding doorbells, and your website is frequently referenced by the blog, then the top 2 pages in Google search on keywords related to doorbells will be yours.</li>\n<li>Get your partners to link you from their website. Don’t forget to ask them to link to your website. This is basic and usually forgotten.</li>\n<li>Get a strategy to appear on media. Doing something outside the box will be an attention grabber. The media will take interest. (example: build a statue out of doorbells). </li>\n</ul>\n<h2>Page speed</h2>\n<p>Does your page take more than 1.5 seconds to load? If your answer is yes, then your page is slower than recommended and you should analyse what is affecting your page speed. Your page speed can be influenced by several factors, such as: </p>\n<ul>\n<li>Large images - optimize your images in order to reduce their size. You shouldn’t put a 5000px wide photo in a 1300px wide page, instead reduce its size to fit. Try not to exceed 200kb per photo. And if you have many photos in a page, try to go under 100Kb for each photo.</li>\n<li>Unminified HTML CSS and JS files – Minification is a process used to reduce a file size, by getting rid of spaces and other useless junk. You should minify files to reduce their size.</li>\n<li>High latency - your page response time can be improved by using a CDN. To find out more read this article on <a href=\"performance-why-use-CDN.html\" target=\"blank\">website performance and why you should use a CDN</a>.</li>\n</ul>\n<h2>Content depth</h2>\n<p>Google values pages whose content shows:</p>\n<ul>\n<li>Depth - A page with less than 500 words has a low evaluation by Google because is depicted as irrelevant.</li>\n<li>Scannability - You should make your pages scannable. This means you need to write content having that in mind.</li>\n<li>Other media - Last but not least, you should use images, videos and links on your articles as much as possible. Remember to tag your images in HTML, through alt-tag them, to provide text description accessible to search engines.</li>\n</ul>\n<p>All of these aspects define what is considered as useful content by Google. To learn <a href=\"How-to-write-article-for-the-web.html\" target=\"blank\">how to write an article for the web read here</a>.</p>\n<h2>Google Guidelines</h2>\n<p>To optimize the information internet users search for, Google has to crawl through all webpages and score them. In that process, Google has a way of filtering all kind of webpages to find out which are legit. So they created a set of guidelines with best basic SEO practices that Google recommends. The violation of those guidelines can result in a lower page authority score or even the removal of a webpage from Googles' search results. Some of the most penalised acts from Google are:</p>\n<ul>\n<li>Inappropriate use of syndicated content - they check if your page is using copied content. If so, your page is highly penalized and can be removed,</li>\n<li>Wrong use of pages with affiliates - pages with contributors are only good if they have original reviews. Google has a way to know if a page has original comments,</li>\n<li>Doorway pages - their only goal is to lead users to another page and therefore they are considered poor quality pages.</li>\n</ul>\n<p>Another aspect to consider related to Google guidelines is the usability of your website, not only on desktops but also on mobiles. If you make it easy to find anything in your page, that is a sign of good usability. A page with good usability allows their users to have a good experience visiting your page. Optimized pages for mobile have a higher score by Google. Google prizes that and makes them appear on a better place in the search results page when using those devices.</p>\n<p>More information on <a href=\"https://support.Google.com/webmasters/answer/35769?hl=en\" target=\"blank\" rel=\"nofollow\">Google's guidelines can be found in their website</a>. If you have a new website, you should look deep into these basic SEO Practices and make sure your pages follow them basic rules.</p>\n<img src=\"images/articles/basics_seo/crtl.jpg\" id=\"articleimg\" alt=\"Google Guidelines best practices\">\n<h2>Final remarks</h2>\n<p>The best strategy to put your website on the map is to have valuable content on your pages and trustworthy backlinks.</p>\n<p>Our last advice on this is to have white hat SEO practices (legit and organic practices, result of an effective Marketing strategy) instead of black hat ones (i.e. buying backlinks, or anything against Google’s guidelines). These black hat SEO practices can lead to exclusion of Google's search page and it is just not worth the risk. You want to have lots of free traffic to your website, so the more you follow the rules the better your pages’ position in search results will be.</p>\n<p>We also advise you to add your website in Google’s webmaster tools, and get access to your free <a href=\"https://www.Google.com/webmasters/tools/home\" target=\"blank\" rel=\"nofollow\">search console</a>. In here you can track the SEO performance of your pages. We advise you to read our article <a href=\"How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">on how to drive traffic to your website</a>.</p>\n"
}, {
  "title": "How to improve your Facebook post's reach",
  "author": "Raquel Nascimento",
  "tags": ["social-media", "marketing", "edgerank"],
  "description": "Facebook uses an algorithm to prioritize what is posted in the news feed. If you want to know what is post reach on Facebook and improve your startup's Facebook page reach, you should look into what edgerank formula is all about.",
  "image": "images/articles/improve_post_reach/Improve_edgerank.jpg",
  "href": "how_improve_facebook_post_reach.html",
  "type": "article",
  "id": 14,
  "html": "\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" height=\"auto\" width=\"100%\" src=\"https://www.youtube.com/embed/3kk35umze-g\" data-src=\"https://www.youtube.com/embed/3kk35umze-g\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<h2>What is post reach on Facebook</h2>\n<p>Post Reach is the number of people that have seen your post of facebook. If you have a page on facebook, you will see on the bottom of the post something like: 1000 people reach. This indicates that the post has been presented in the timeline of 1000 people. </p>\n<h2>How does Facebook decide what reach your post gets</h2>\n<p>There are more than 5 billion posts shared everyday. Therefore, Facebook needed to find a way to prioritize the posts that viewers actually care about. So they decided to create Edgerank formula. Edgerank is the Facebook algorithm whose goal is to pursuit news feed optimization. The formula is a sum of all the interactions (Edges) generated by your posts or shares. An edge can be any kind of activity on Facebook, from a status update to a comment, a share, a tag or a new like.</p>\n<h2>How is edgerank formula calculated</h2>\n<p>The Edgerank formula has into account three variables:</p>\n<ul>\n<li>the affinity score,</li>\n<li>the weight of each edge,</li>\n<li>the time decay.</li>\n</ul>\n<p>Each variable has a different score. Although Facebook does not disclose the score it has attributed to each edge, empiric data that has been collected made it possible to make a few assumptions.</p>\n<img src=\"images/articles/improve_post_reach/Edgerank_formula.png\" id=\"articleimg\" alt=\"Edgerank formula affinity edge decay\">\n<h2>What is affinity - u</h2>\n<p>The affinity score between the viewer and the edge creator measures how close you are with the person who made the post. The more interactions you have with that person (i.e. likes, shares, comments, ...), the higher the score will be. This works both ways: likes from you to that person and likes from that person to you. Shares tend to have a higher score and show more interaction than simple likes. Moreover, shares increase the chance for more interaction on your post, because it has the possibility to reach more users. If your posts are not having the desired reach, it may be because you're not having enough interactions with your followers/friends. Start by finding a way to make people take action and actually interact with your posts.</p>\n<h2>Weight of the edge - w</h2>\n<p>Edgerank does not attribute the same value to all kind of contents. The weight is measured depending on the post kind. Posting photos or videos tends to be more valued by Facebook than link posts. Hence, Facebook attributes more edgerank for video and photo than a link post. When you post a video, Facebook not only takes in consideration how many people like your video but also for how long they watched it or if they turned on the sound. That is why content like videos have more weight. People don't always have to share, like or comment to show interest. It's the amount of interaction that count. The same with photos. If a person opens a photo to take a better look, edgerank takes it as a sign of interest and will give it more score.</p>\n<h2>Time decay - d</h2>\n<p>This factor is related with the age of a post. In other words, it is measured by how long ago the edge was created. As the post gets older, it is more likely that it has lost importance to the viewers, or because it has already been seen or because it is just not relevant anymore. The truth is that posts on Facebook tend to last, on average, three hours before disappearing from news feed. However, the more attractive the post is, the more chances it has to last. There are ways to boost organically the time decay of a post, like sharing it and keeping the engagement alive. But our advice is to focus on updating your page with fresh content.</p>\n<h2>Top tips to improve edgerank score</h2>\n<ul>\n<li>Be consistent - start posting quality content regularly, ideally at least once a day.</li>\n<li>Keep updating your page with new material - it is crucial to keep your page fresh.</li>\n<li>Schedule your posts accordingly with your target - choose the posting time according to your target audience, and try to match it with your target active time on Facebook. By checking the Insights/Posts of your Facebook page you can analyze at what time your Fans are online.</li>\n<li>Promote interaction with your posts - don't be afraid to ask for likes, shares or people's opinions. Also respond to every comment made to your post, since it will generate more interaction, hence a greater edgerank.</li>\n<li>Give priority to photos and videos - as we explained before, these type of contents have a higher score on edgerank and will conquer your viewers more easily.</li>\n<li>Avoid deleting posts - everytime you delete a post, your edgerank decreases. Of course everyone makes mistakes. However it is preferable to double check every post, share or comment before making it public, then deleting it.</li>\n<li>Share valuable content - it doesn't matter if it is a link from another page or a link of your own, share fresh and interesting content. It will keep your viewers interested, it will make them interact more and thus increase your edgerank.</li>\n</ul>\n<h2>Final Remarks</h2>\n<p>There is no way to be sure what will really improve your edgerank score, since the news feed algorithm is a Facebook secret. However, Facebook is always making adjustments to make sure viewers get access to the stories they are really interested in. They announce those updates in the <a href=\"http://newsroom.fb.com/news/category/news-feed-fyi/\" target=\"blank\" rel=\"nofollow\">Facebook blog</a>, and from time to time we advise you to take a look into the latest updates in this blog. The most important advice we can give you is to:</p>\n<ul>\n<li>Always post content that will generate engagement,</li>\n<li>Keep posting at a regular rate,</li>\n<li>Try to improve interaction with your followers to get a higher affinity score.</li>\n</ul>\n"
}, {
  "title": "Perfect Pitch",
  "author": "Miguel Teixeira",
  "tags": ["Pitch", "sales", "Marketing", "business development", "startup", "entrepreneur", "raising capital"],
  "description": "Every day we sell. A perfect pitch is the ultimate selling weapon. By email, in the elevator, on a telephone, on a presentation, on a meeting or in a social interaction. Turn your efforts into success stories by improving your pitch. In this article we will take a look into successful product pitch examples.",
  "image": "images/articles/perfect_pitch/perfect_pitch.jpg",
  "href": "perfect_pitch.html",
  "type": "article",
  "id": 15,
  "html": "\n<h2>Tools</h2>\n<p>We have prepared a tool for you to get your pitch done with minimal fuss. Go to our tool <a target=\"blank\" href=\"/automatic_pitch_machine.html\"> Automatic Pitch Machine, </a> and find some product pitch examples and make your own pitch. </p>\n<h2>When to apply a pitch</h2>\n<p>Every day in many circumstances we pitch.&nbsp;To break it down you have:&nbsp;\n</p><ul>\n<li>Email (the subject line is a pitch and the body is another pitch),</li>\n<li>Talk (telephone or personal),</li>\n<li>Meetings,</li>\n<li>Presentations.</li>\n</ul>\n<h2>Desired results</h2>\n<p>The goal of a pitch is to generate engagement and generate buzz through word of mouth.&nbsp;To generate engagement you need to show relevance and utility.&nbsp;To generate buzz you need it to be memorable and valuable.&nbsp;The value of a pitch relates to the scarcity and urgency of what you are trying to sell.</p>\n<img src=\"images/articles/perfect_pitch/perfect_pitch.jpg\" id=\"articleimg\" alt=\"success pitch\">\n<h2>Time constraints</h2>\n<p>Ideally you would have all the time you need to pitch.&nbsp;But you don't.&nbsp;So let's introduce the time constraints into the pitch:</p>\n<ul>\n<li>Subject line or Headline: 8 words</li>\n<li>Web or email: 1 paragraph or 60 to 100 words</li>\n<li>Elevator pitch: 30 second or 60 words</li>\n<li>Telephone pitch: 5 minutes or 600 words</li>\n<li>Meeting or presentation: 15 min or 1800 words</li>\n</ul>\n<h2>30 seconds Pitch examples</h2>\n<p>: We looked into some of the best product pitch examples and broke it down for you.&nbsp;These are some of the structures that you can use:</p>\n<ul>\n<li>The pixar pitch</li>\n<ul>\n<li>The structure:</li>\n<p>Once upon a time [set the scenario and introduces characters]. Everyday, [somethings happens that translates the status quo]. One day [something changed, introduced the solution] and because of that, [benefits] until finally [experience].</p>\n<li>Example:</li>\n<p>Once upon a time there was an entrepreneur with a bad pitch. Every day he tried to make a sale, convince people to cooperate in his quest but without any success. One day, he decided to build his pitch based on this article and because of that, he worked on his pitch until finally sales started coming, buzz happened and he became very successful.</p>\n</ul>\n<li>Shark Tank's Beatbox beverages pitch</li>\n<ul>\n<li>The structure:</li>\n<p>[status quo]... boring!<br>\nWe are not boring, we have [product 1, product 2, product 3]. It's not just [product type]. It's an experience!<br>\nYou [do this] and [this happens]. [Features a juxtaposition with status quo]. Product is [tagline]</p>\n<li>Example:</li>\n<p> A delightful cabernet in France, it's perfect. There is just one problem... It's boring!<br>\nWe are Beatbox beverages and we are not boring, we are changing box wine forever with flavors like cranberry lemonade and blue raspberry. It's not just a box. It's an experience!<br>\nTake your beatbox to the next party and you're instantly a legend. We are using an unique orange wine that drinks more like a spirit then a wine, and allow us to create mixed drinks that our customers ultimately love. Beatbox is a party in a box.</p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" height=\"auto\" width=\"100%\" src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FSharkTank%2Fvideos%2F870891856255287%2F&amp;width=500&amp;show_text=false&amp;appId=1575052359489385\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n</ul>\n<li>Shark Tank's Breathometer pitch</li>\n<ul>\n<li> The structure:</li>\n<p>Just imagine [situation], before you know it [this happens], and the most important question is [question] and who wants [status quo]. Introducing [product and features].</p>\n<li>Example:</li>\n<p>Just imagine you are in a bar with some friends having some drinks, before you know it, it's time to go home, and the most important question is: are you safe to drive? And who wants to carry one big old breathalyser around. That is why we created the first smartphone breathalyzer. </p>\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/rx8I703K2RI\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n</ul>\n<li>2010's Award Winning at MIT's Global startup workshop</li>\n<ul>\n<li> The structure:</li>\n<p>[fact][question showing relevancy].[question about status quo that makes the pain point evident]. [answer].[present the product, benefits and features]. [explain why it is better than alternatives]. </p>\n<li>Example:</li>\n<div class=\"out_vid\">\n <div class=\"art_vid\">\n<iframe class=\"vid\" src=\"https://www.youtube.com/embed/UBNJh2rOOlI\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n</ul>\n</ul>\n<h2>Selling identity or a product/service?</h2>\n<p>When people buy a product or service, they are actually buying access or confirmation of to an identity.&nbsp;It is all about perception.&nbsp;Clients perceive to be someone thus needing a service or product, or they want to achieve a new status and thus they need to buy something to get there.</p>\n<h2>Engagement = relevance * utility</h2>\n<p>What you are trying to pitch, needs to be relevant to your listener, if you whant to have his attention.&nbsp;Start the description on the customer's current status and go back and forward between their pain points and consequences of continuing without solving their problem.&nbsp;Now enter the Utility.&nbsp;Juxtapose the consequences to the experiences of your service or product. Explain the benefits and the features, but focus on experiences.</p>\n<h2>Delivery? What tone?</h2>\n<p>Tone is something you want to work on.&nbsp;What is the best tone to communicate with your clients?&nbsp;That will depend on the language and tone used by your customers.&nbsp;You want to use an appropriate tone considering your customers and what they want to achieve. The amount of energy, it all depends on what you are selling and who are your customers.</p>\n<h2>What you should include</h2>\n<p><strong>Novelty</strong> - make sure that what you are pitching is something new. It might be your angle or your approach.&nbsp;Certainty - show facts, research, numbers to support your claims. This gives credibility to your pitch.&nbsp;Questions induce feelings.&nbsp;Make them feel the pain points and the relief it would be to surpass them and what new experiences they can achieve if those hurdles are surpassed.</p>\n"
}, {
  "title": "Basics of Accounting for entrepreneurs",
  "author": "Miguel Teixeira",
  "tags": ["Accounting", "finance", "entrepreneurs"],
  "description": "An entrepreneur doesn't need to be an accountant, but understanding a balancesheet, a income statement and cashflow is paramount.",
  "image": "images/articles/accounting-entrepreneurs/accounting.jpg",
  "href": "basics_of_accounting_for_entrepreneurs.html",
  "type": "article",
  "id": 16,
  "html": "\n<p>Driving traffic to your website (<a href=\"How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">How to drive traffic to your website - SEO</a>) is probably one of the biggest Marketing challenges you have on your startup to-do list. Writing articles (<a href=\"How-to-write-article-for-the-web.html\" target=\"blank\">How to write an article for the web</a>) can go a long way. Besides that, <strong>accounting for entrepreneurs</strong> is a very important topic to be sure that your company will not go bankrupt</p>\n<h2>The business and the entrepreneur</h2>\n<p>The first basic concept you need to grasp is that you and your company are two different entities. Think of your business as another person. It has its own resources, debts, income and costs, its own needs. Very often owners think of the business numbers as their own, and they are clearly not the same.</p>\n<h2>Cost based accounting</h2>\n<p>The second basic concept you need to understand is that your assets will be valued based on their costs. Not on their commercial value. For instance, if you have a grocery shop and you order cookies at 50 cents a package and retail it for 1$, the value registered in your account will be the 50 cents. Not the 1$. There are other issues that influence its value, like amortization and depreciation, but we will talk about those later on.</p>\n<h2>Transaction based accounting</h2>\n<p>Third basic concept is that in the income statement and the balance sheet, changes happen when the transaction take place and not when the good and money are exchanged, more precisely, when you receive or send a receipt. That constitutes a transaction. Later on, when the payment is made, the cashflow will be affected, because the cashflow statement follows cash events and not transaction based events.</p>\n<h2>Documents produced from accounting</h2>\n<p>There are three main documents that are produced from accounting: </p>\n<ul>\n<li>Balance Sheet - a photography of your business financials in a given moment, where you can see what your company owns and owes,</li>\n<li>Income statement - the income statement which describes how well did you do in a period of time, usually a year, and it relates to revenues and costs,</li>\n<li>Cashflow Statement - the cashflow statement describes the flow of cash during a period of time. It allows you to understand:\n<ol>\n<li>Where your cash came from</li>\n<li>How your cash was spent</li>\n<li>If your cash status has improved</li>\n</ol></li>\n</ul>\n<p>We will be showing you examples of these documents so that you can go along as we explain them.</p>\n<h2>Balance sheet</h2>\n<p>A balance sheet has two major groups divided into columns:</p>\n<ul>\n<li>Assets (on the left side) - it states all that your company owns,</li>\n<li>Equity and Liabilities (on the right side) - in plain terms, it states where the money, to acquire what the company owns, came from.</li>\n</ul>\n<img src=\"images/articles/accounting-entrepreneurs/balancesheet.jpg\" id=\"articleimg\" alt=\"balance sheet example\" style=\"width:800px ; margin-right:100px; margin-left:100px\">\n<p>The total amount in the left side, Assets, should always be equal to the total amount on the right side, Equity and Liabilities.</p>\n<p>The right side itself is divided in two major groups: </p>\n<ul>\n<li>Liabilities - is what your company owes (to yourself included),</li>\n<li>Equity - is basically the remainder between what the companies owns and what it owes. Equity should not be confused with the value of the company, because of the very nature of accounting being a cost based system and not a value based system. But let's say you do not want to be negative on equity.</li>\n</ul>\n<h2>Cost vs Investment vs Paying debt vs Revenue</h2>\n<p>Sometimes it's hard to understand the difference between Cost, Investment, Paying debt and revenue. Basically putted:</p>\n<ul>\n<li>Cost is when some asset is consumed, you lose its value and you are not paying debt. For instance, when you pay salaries, or electricity bills, you spend an asset: cash.&nbsp;</li>\n<li>When you are paying debt, you are also removing an asset (cash) from your balance sheet, but at the same time and for the same amount you are reducing your liabilities.</li>\n<li>In an investment you are exchanging an asset for another asset of the same value. For instance when you buy a 700$ computer, you subtract 700$ from cash, but at the same time you now own a 700$ computer that will be registered in your asset side of the balance sheet (tangible assets).</li>\n<li>Revenue is when you sell something and here there are two scenarios:<ol>\n<li>Products - Selling a product you will sell something that is registered in your balance sheet and that is a cost, but at the same time you will be adding cash to your asset side (note that if you are doing things right and selling at a profit, you should be adding more than removing).</li>\n<li>Services - When selling a service you aren't removing any asset, only adding cash.</li>\n</ol> </li>\n</ul>\n<p>Now, if you remember, in the top of paragraph we stated that the two sides of the balance sheet should always have the same amount. However now we have increased on the left side. So what happens on the right side to compensate it?</p>\n<h2>Income statement and Equity</h2>\n<p>The income statement reflects if you are profitable or not. If you are profitable, it basically means that in your balance sheet assets minus liabilities has become more positive. So there is direct connection between income statement that the balance sheet and it is place inside the equity. It is called retained earnings.</p>\n<img src=\"images/articles/accounting-entrepreneurs/incomestatement.jpg\" id=\"articleimg\" alt=\"income statement example\" style=\"width:289px ; margin:20px\">\n<p>In the income statement itself you register Revenues, and the costs of goods sold. Costs of goods sold might be a product or service you have acquired in order to resell it.</p>\n<p>So now if you subtract costs of good sold to the revenue you will reach gross profit.</p>\n<p>After gross profits, you register all other operational expenses, like salaries, electricity bills, etc. Within operational expenses, you should include depreciation and amortization. Then you calculate your operational income by applying the following formula:</p>\n<br>\n<p>Operational income = Gross profit - Operational expenses.</p>\n<br>\n<p>To calculate your income from financing, add financial revenue (example: interests you earn on deposits) and subtract all your financial costs (example: interests you have to pay on your loans).</p>\n<p>After that, you calculate your Net Earnings before taxes applying the following formula:</p>\n<br>\n<p>Net Earnings before taxes = Operating income + Income from financing</p>\n<br>\n<p>Now you deduct your taxes and finally you reach the end result: Net Income. </p>\n<h2>Depreciation, Amortization and interests</h2>\n<p>When you ask a loan for 100k, you register on your balance sheet that value into your liabilities, but not the interests. Interest are a cost that is related to your yearly expenses and they affect your income statement directly.</p>\n<p>Depreciation and amortization are probably the hardest concept to grasp in accounting so, let's try to demystify them. Let's say your business buys a car for 15K, so you get an asset named car that is valued in 15K. However, next year the car isn't valued at 15K anymore and the way that is translated into accounting is through depreciation. Basically, your car value will be depreciated at a rate defined by the government and that depreciation is accounted as a cost and subtracts on the balance sheet. Amortization is similar, but while depreciation applies itself to tangible assets (like cars, flats, machines), amortization applies to intangible assets (like domains, franchising agreements, pictures, films, etc).</p>\n<h2>Cashflow statement</h2>\n<p>This statement in some countries is not mandatory. But because the main goal of a company should be to create free cashflow (dividend + investment), and many companies fail to manage their cash effectively, we will talk briefly about it. As the name indicates, it refers to the flow of cash inside a company. There are two methods to calculate cashflow: the direct and the indirect method. We will focus in the indirect method, that is in our opinion easier to understand. The rationale behind it, is to start with your income statement and then work from there to create a cash based system.</p>\n<img src=\"images/articles/accounting-entrepreneurs/cashflowstatement.jpg\" id=\"articleimg\" alt=\"cashflow statement example\" style=\"width:540px ; margin-right:230px; margin-left:230px\">\n<p>Here is the process:</p>\n<p>Basically, the process is that, when you calculate your net income you include costs that are not cash based, like amortization and depreciation. So the first thing you do is removing that effect by adding them to your income statement.</p>\n<p>Another difference is that cashflow is a cashed based system, in opposition to the income statement which is a transaction based system. So, there is a difference between issuing a receipt for your services and getting payed. As well as purchasing a product or service and paying for it. When you issue a receipt you are making the sale and, as such, it appears in your income statement. During the period that goes between the transaction and the payment the value either goes, in your balance sheet, to account receivables (liability) or account payable (assets) depending if you owe or if your clients owe you.</p>\n<p>To reach your net cashflow from operating activities you need to use the following formula:</p>\n<br>\n<p>Net income + Amortization + Depreciation + Difference in accounts payable - Difference in accounts receivable - Difference in inventory </p>\n<br>\n<p>Then you calculate your company's Net Cash flow from investing activities. So you add up all your investments and capital expenditures. Each investment is money leaving the company and, as such, it should have a negative value. On the other hand, any time you sell an asset that was an investment you register that inflow of cash as positive.</p>\n<p>Finally, you get to financing activities and here you subtract any outgoing flow of cash like dividends, or paid loans, and add any new loans and capital increases since it represents an inflow of cash. Now to finish, and to calculate if you business has now more cash or less cash than it did in the previous period, you apply the following formula:</p>\n<br>\n<p>Net Increase (decrease) in cash and cash equivalents = Net cash from operating activities + Net Cash from investing activities + Net cash flow from financing activities.</p>\n<br>\n<h2>Recommendations</h2>\n<p>We recommend you to get a good accountant and try to understand thoroughly your accounting documents. They will give you some valuable information of how your company is doing. Although it is not what we would recommended as a dashboard for your company, it offers valuable insights and it will help you make decisions.</p>\n"
}, {
  "title": "How to value Business Ideas",
  "author": "Miguel Teixeira",
  "tags": ["Market", "Competitive-advantage", "Barriers-to-Enter", "Skills"],
  "description": "Every day you have ideas, most of those ideas never become a business. And the main question you should ask yourself when faced with your ideas is: is this a good idea for starting a business?",
  "image": "images/articles/value-idea/value_idea_photo.jpg",
  "href": "how_to_value_business_idea.html",
  "type": "article",
  "id": 17,
  "html": "\n<h2>Basics of Idea Evaluation</h2>\n<p>Let's start with the basics.&nbsp;For an idea to be good enough for you to make the investment to start a company, it needs to:</p>\n<ol>\n<li>Have a good market,</li>\n<li>Have a good market fit,</li>\n<li>Have a competitive advantage,</li>\n<li>Have a good growth potential,</li>\n<li>You must be able to overcome barriers to enter efficiently.&nbsp;</li>\n</ol>\n<p>All of the above topics matter.&nbsp;So you should score your idea in every one of those topics (you can score them on a scale of 1 to 5) and then apply the following formula:</p>\n<p>(Market x Market fit x Competitive advantage x Growth potential)/Cost of barriers to enter</p>\n<h2>Market Evaluation</h2>\n<p>Every time you think about a market you should think about: Value, Growth, and Margin:</p>\n<ol>\n<li>Value translates itself on how large the market is (in value),</li>\n<li>Growth is about how fast that market is growing (%),</li>\n<li>Margin is about how large are the margins of that service or product.</li>\n</ol>\n<p>If you don't have values on the market size, growth or margins, try to evaluate qualitatively based on your experience. Then, multiply the three of them to summarize that information into one number. Remember, the total Market evaluation number should be between 1 and 5.\n</p>\n<h2>Market Fit</h2>\n<p>Market fit translates basically into the market willing to pay what you are asking for your product or service you intend to offer.&nbsp;If they do, it basically means that you got it right.&nbsp;You need to clearly identify this point because this is a really big assumption to make.&nbsp;Our advice is to go out and ask the market what would they be willing to pay for your offer. Then see if your idea is profitable for a specific price point.&nbsp;Then, see if your idea is profitable for a specific price point, and so, give a score and plug it into the formula.</p>\n<h2>Competitive Advantage</h2>\n<p>Jack Welch, a legend in Management and former CEO of GE, said \"<i>if you don't have a competitive Advantage do not compete</i>\" and that is absolutely true.&nbsp;A competitive advantage translates itself into: the ability you have of offering a product or service at a specific price point, sold in your distribution channels with your advertising efforts and have your clients choosing your solution rather than a competitor.&nbsp;It needs to be relevant to the market.&nbsp;There are <b>3 types of competitive advantages</b>:</p>\n<ol>\n<li>Cost Advantage - where your cost structure allows you to offer a lower price point than other competitors (or the same price point but you can invest more than your competitors in customer acquisition like advertisement),</li>\n<li>Differentiation - where your product is better than your competitors, being the best choice for your customers,</li>\n<li>Focus - where your product is better in a specific niche.&nbsp;</li>\n</ol>\n<p>Know what your competitive advantage is and press on it. Produce a score for your competitor advantage and plug it in the formula.</p>\n<h2>Growth potential</h2>\n<p>Is there growth potential in your startup idea?&nbsp;So, can you move into new markets, upsell or make your market grow?&nbsp;How and by how much?&nbsp;Score your growth potential and plug it in the formula.</p>\n<h2>Barriers to Enter</h2>\n<p>Barriers to enter are the hurdles, efforts that you have to go through to start selling and deliver your product or service.&nbsp;The larger the barriers to enter, the more protected your margins will be.&nbsp;The ability to enter the market without having to pay full price on those entrance barriers is what you are looking for.&nbsp;To do that you need to have the right skill set, the tools and capital.&nbsp;So, identifying the task you need to execute is paramount to fully understand how much does it cost you to enter that market.</p>\n<img src=\"images/articles/value-idea/value_idea_photo.jpg\" id=\"articleimg\" alt=\"Startup or small business idea value\">\n<h2>Score an good or bad Idea</h2>\n<p>You just have gone through the process and came up to a final score for your idea. There are no definitive conclusion and you should always review your assumptions.&nbsp;However, a good rule of thumb (if you rated each item on a scale of 1 to 5 and applied the formula) is above 100 score, it shows some potential and you should look deeper into the idea.&nbsp;Above 150, you should test your idea as soon as possible&nbsp;Above 250, you should really dig deep and find a way to build your startup.</p>\n<h2>Conclusions</h2>\n<p>Your idea can be in a small and stagnant market and still be very good because the quality or efficiency of your execution will drive customer towards your business, providing you with lower barriers to enter and good competitive advantage.&nbsp;On the other hand, you may not have the full skill set to execute your business, but your market fit and your market size is so good that you can outsource parts of your business.&nbsp;You should not disassociate the idea with the execution, because it is crucial to understand your ability to execute that idea. For example, starting a restaurant in midtown Manhattan to sell pizza might be the right thing for your, but it isn't for us (we're lousy cookers and know nothing about the business of managing a restaurant).</p>\n<p>If you like your idea and want to start pitching it, take a look into this tool and article on pitches: <a href=\"automatic_pitch_machine.html\">Automatic Pitch Machine</a> and <a href=\"perfect_pitch.html\"> Perfect Pitch</a>.</p>\n<p>Also, if you are looking to start a business using the web as distribution channel you may want to look into the following articles: </p>\n<ul>\n<li><a href=\"How-to-drive-traffic-to-your-website-SEO.html\">How to drive traffic to your website - SEO</a></li>\n<li><a href=\"How-to-write-article-for-the-web.html\">How to write an article for the web</a></li>\n<li><a href=\"entry-barriers-online-startup.html\">Entry barriers for an online startup</a></li>\n</ul>\n"
}, {
  "title": "Entry barriers for online startup",
  "author": "Miguel Teixeira",
  "tags": ["Entry-barriers", "SEO", "strategy", "startup"],
  "description": "It is often said that there are low entry barriers for online startups. Is this true or just another myth?",
  "image": "images/articles/entry-barriers/barriers.jpg",
  "href": "entry-barriers-online-startup.html",
  "type": "article",
  "id": 18,
  "html": "\n<p>It is often said that there are low entry barriers for online startups. Is this true or just another myth?</p>\n<h2>The right question</h2>\n<p>The right question isn't if it is easy to start a business on the web.&nbsp;But rather if it is easy to be successful drawing traffic to your website.&nbsp;For the first question: yes. For the second question: no, it isn't.&nbsp;An online startup can only be considered as such if anyone can reach its website, otherwise it's just a hobby.</p>\n<h2>Getting to a good place</h2>\n<p>If you were to start a retail venture, you know its all about location, location, location.&nbsp;When you are talking about the web, what it really matters is to get a good rank on Google, on Bing, on Facebook, just to name a few.&nbsp;To be able to get that, your online startup needs to perform a ton of very important tasks, like:</p>\n<ul>\n<li>value creation,</li>\n<li>social Marketing,</li>\n<li>having a responsive website that is compliant with the SEO's best practices,</li>\n<li>you need to produce content,</li>\n<li>you need to get backlinks.</li>\n</ul>\n<h2>The process of acquiring location</h2>\n<p>In our opinion, there are a lot of tasks that your startup needs to perform before investing in adwords or promoting your Facebook post.&nbsp;Applying best practices will make your marketing efforts have a more durable results.&nbsp;So, producing the right content, improving your content strategy, improving usability, improving website performance are goals that take time.&nbsp;From simple mistakes as including the wrong anchor texts (like click here), to having spelling mistakes on your website, using the wrong keywords on your content,&nbsp;the natural evolution of content/product offering resulting in a need of a different site structure.</p>\n<img src=\"images/articles/entry-barriers/barriers.jpg\" id=\"articleimg\" alt=\"entry barriers online startup\">\n<h2>How long is long enough</h2>\n<p>When should you start investing in SEM? There is no definitive answer. You should not see it on a time basis, but rather on stages.&nbsp;So you should go as follows:</p>\n<ul>\n<li>Website live,</li>\n<li>Social networks on,</li>\n<li>Content improvement, </li>\n<li>Website's usability improvements (development),</li>\n<li>Website's SEO improvements (development),</li>\n<li>Build backlinks (SEO),</li>\n<li>Content improvement,</li>\n<li>Website restructure (development),</li>\n<li>Advertisement.</li>\n</ul>\n<p>&nbsp;This process is iterative, so you need to take in account a long list of skills, if you don't want to drop serious money to get to a better location.</p>\n<img src=\"images/articles/entry-barriers/goodlocation.jpg\" id=\"articleimg\" alt=\"location google search\">\n<h2>Do I have the skills to do it?</h2>\n<p>Your startup will be constantly improving in many different aspects, like for example, your website, your SEO, and even your content.&nbsp;As so, you need a developer, a SEO guy and a content producer.&nbsp;The first option, and the best one, is for you to gain those skills and do it yourself.&nbsp;Another, is to include in your startup these elements either by giving up equity or by hiring them.&nbsp;Costs time, costs money, so it is definitely an entry barrier.</p>\n<h2>How relevant are the entry barriers for your startup</h2>\n<p>Not even looking into your startup's service or product, we already identified quite a number of tasks you need to do on an ongoing basis in order to be successful.&nbsp;We would say that they are probably high, not extremely high, but seriously relevant.&nbsp;It may be the case that you are amazing doing all of those tasks, but you will still take a long time doing them.&nbsp;The cost, either in money or in time of getting your startup's website into a good location is very relevant.</p>\n<h2>Final remarks</h2>\n<p>Although there are significant entry barriers, here at IdeaNinja we work to make it easier for your startup.&nbsp;We made several resources, opinions and tools available for your disposal.&nbsp;You can probably benefit from our series about article writing, to improve your content, and SEO:</p>\n<ul>\n<li><a href=\"How-to-drive-traffic-to-your-website-SEO.html\">How to drive traffic to your website - SEO</a></li>\n<li><a href=\"How-to-write-article-for-the-web.html\">How to write an article for the web</a></li>\n<li><a href=\"article-writing-tool.html\">Article Writer Tool</a></li>\n<li><a href=\"Improve-your-website-design-free-photos.html\">Improve your website design with free photos</a></li>\n</ul>\n"
}, {
  "title": "How to write an article for the web",
  "author": "Miguel Teixeira",
  "tags": ["Content", "article", "SEO", "website"],
  "description": "So you want to write an article for the web. There are lots of specifics. We will explain how you should do it.",
  "image": "images/articles/Howto-write-article/papper-bin.jpg",
  "href": "How-to-write-article-for-the-web.html",
  "type": "article",
  "id": 19,
  "html": "\n<h2>Is writing for the web different?</h2>\n<p> Writing for the web is different from writing for a magazine or newspaper, even though many of the same principles apply.&nbsp;You want to write as simple and plain as possible so that your reader can easily understand you. Add pictures to illustrate your point.&nbsp;There are new subjects you should look in as well, like:</p>\n<ul>\n<li>SEO (check out the article <a href=\"basics_seo.html\" target=\"blank\">Basics of SEO</a>),</li>\n<li>Scannability,</li>\n<li>Directing to complementary articles.</li>\n</ul>\n<h2>How to write simple</h2>\n<p>Simple is a subjective term, so lets go in depth and create a structure you can work with:</p>\n<ul>\n<li>a Title - The title shouldn't have more than 8 words,</li>\n<li>a Lead - The lead should be a paragraph that answers the following questions: who, what, when, where and finally the how and why,</li>\n<li>and several paragraphs - Each paragraph should have between 3 and 5 sentences and no sentence should have more than 25 words, preferably under 20.</li>\n</ul>\n<img src=\"images/articles/Howto-write-article/papper-bin.jpg\" id=\"articleimg\" alt=\"Writing simple\">\n<h2>Adding pictures to your article</h2>\n<p>Pictures are worth a thousand words, so make sure to add some to illustrate your message.&nbsp;There are several ways to create visual impact to your customer so make sure you choose the best accordingly to your target interests, you can use images, graphs, pictures, images as links and so on.&nbsp;If you need pictures to use in your article, and don't know where to find them, check out our <a href=\"Improve-your-website-design-free-photos.html\" target=\"blank\">free pictures article</a>, where you will find our personal top totally free pictures websites.</p>\n<h2>Improving scannability</h2>\n<p>In the web readers do not read, they scan.&nbsp;So, adding elements to your article that can help your readers scan and find exactly what they are looking for is crucial.&nbsp;One idea per paragraph and one subtitle per paragraph is the best way to go.</p>\n<h2>Why you should add links</h2>\n<p>The internet allows for continuous research, and so should you.&nbsp;Providing guidance for deeper research is very useful and your readers will thank you for it.&nbsp;Moreover you can link to other articles you have written and thus generate cross traffic within your articles. To have a deeper understanding on this topic read our article on <a href=\"How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">How to drive traffic to your website - SEO</a></p>\n<h2>How do I attract readers?</h2>\n<p>Besides of your normal sources of traffic, you can gain a lot if your article and your website are well placed in Google search.&nbsp;In order to maximize the chances of attracting traffic through Google, along with the above mentioned recommendations, you should also follow a few simple rules:</p>\n<ul>\n<li>Clearly identify which are your site and article keywords,</li>\n<li>Repeat those keywords, without abusing it (your website ranking may be penalized if Google thinks it's too much),</li>\n<li>Make sure your article has at least 350 words, ideally above 500,</li>\n<li>Have, at least, one link in every page,</li>\n<li>Have, at least, one picture in every page.</li>\n</ul>\n<h2>Other articles and tools</h2>\n<p>If you found this article useful, you can find a <a href=\"article-writing-tool.html\" target=\"blank\">writing tool</a> that we built to allow you to easily follow these rules. You should also read the article about the <a href=\"How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">benefits of writing articles</a>&nbsp;we thrive to give you good advices and tutorials on how to articles on how to improve or build your startup.To discuss any subject, please drop us a note in our <a href=\"contactus.html\" target=\"blank\">contact us page</a>.</p>\n"
}, {
  "title": "How to drive traffic to your website - SEO",
  "author": "Miguel Teixeira",
  "tags": ["Marketing", "traffic", "SEO", "website"],
  "description": "Driving traffic to your website is probably one of the biggest Marketing challenges you have on your startup to-do list. Writing articles can go a long way.",
  "image": "images/articles/howto-drive-traffic-seo/write_article.jpg",
  "href": "How-to-drive-traffic-to-your-website-SEO.html",
  "type": "article",
  "id": 20,
  "html": "\n<div class=\"out_vid\">\n<div class=\"art_vid\">\n<iframe class=\"vid\" height=\"auto\" width=\"100%\" src=\"https://www.youtube.com/embed/SJyUS9r-TlE\" data-src=\"https://www.youtube.com/embed/SJyUS9r-TlE\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n</div>\n</div>\n<h2>The big misconception</h2>\n<p> The biggest mistake I see people doing is assuming that by just having a website, you will have instant traffic.&nbsp;BIG MISTAKE! - There are millions of websites that have content similar or better than yours.&nbsp;When potential clients search for products or services using the very same keywords you are \"betting on\", most probably your website will not appear in the first results page.&nbsp;Not being in the first page is similar to not existing at all.</p>\n<h2>Why should you write articles?</h2>\n<img src=\"images/articles/howto-drive-traffic-seo/write_article.jpg\" id=\"articleimg\" alt=\"Write Article\">\n<p>As early as the idea pops up, you should work on your Marketing strategy. Articles are a great way to generate traffic, simply because of Search Engine Optimization (SEO).&nbsp;You can easily start a website where you can blog, and steadily increase the traffic and value of your website.&nbsp;Google search indexation and ranking algorithms are heavily related to the richness of your website's content.</p>\n<h2>SEO? Who???</h2>\n<p>If you haven't heard of SEO or Search Engine Optimization, spend some time looking into it, thoroughly. &nbsp;The time you spend on this subject will be profitable on the long run to build and support your Marketing strategy.&nbsp;Using your website to help you generate sales isn't easy.&nbsp;You need to have the right content to generate traffic to your website and rank higher on Google searches. If you are still interested on this matter then you should check out our article about the <a href=\"basics_seo.html\" target=\"blank\">Basics of SEO</a>, since we will be only giving a quick overview of this subject on this article.</p>\n<h2>SEO quick tips</h2>\n<p>No website page should go without at least:</p>\n<ul>\n<li>150 original words,</li>\n<li>1 unique relevant link (outside or to inside your website),</li>\n<li>1 original piece of media (video, picture, mp3),</li>\n<li>Google ranks https sites better than http ones, so make sure you install an SSL certificate,</li>\n<li>Your website should have at least 10 pictures and make sure you tag them right, through alt-tag,</li>\n<li>Most of all write articles!</li>\n</ul>\n<h2>Articles, pictures and tools</h2>\n<p>If you interested in writing articles, make sure to read <a href=\"How-to-write-article-for-the-web.html\" target=\"blank\"> this article on writing for the web</a> on how to write one and use <a href=\"article-writing-tool.html\" target=\"blank\"> this article writing tool</a>. If you are searching for pictures, you can find a good article on <a href=\"Improve-your-website-design-free-photos.html\" target=\"blank\"> free pictures</a> with loads of websites with photos that are free to use and require no attribution rights. If you had already used any of these tools, resources and articles, please give us feedback on our <a href=\"contactus.html\" target=\"blank\"> contact us page</a>.&nbsp;We are dedicated to help your startup succeed and help you on entrepreneurship efforts.</p>\n"
}, {
  "title": "Website performance and why should you use a CDN",
  "author": "Miguel Teixeira",
  "tags": ["Website", "performance", "CDN", "hosting"],
  "description": "Is your startup spending a lot of money on hosting or is your site sluggish? Learn why using a CDN might be the choice for you.",
  "image": "images/articles/CDN-performance/performance.jpg",
  "href": "performance-why-use-CDN.html",
  "type": "article",
  "id": 21,
  "html": "\n<h2>What is CDN?</h2>\n<p>CDN stands for content delivery network and represents several proxy servers usually deployed all over the world.&nbsp;</p>\n<p>The amount of time that goes from the moment your browser makes a request and the moment it receives its first response it’s called latency. Latency occurs due to the distance between your server and your clients.</p>\n<p>You can test it by doing a little exercise in your computer: open your command prompt by tipping cmd on windows or terminal if you’re on mac.</p>\n<p>Once you opened the terminal console, write “tracert”, if you’re on windows, or “tracerout”, if you have a mac, followed by your website (i.e. www.ideaninja.io). Click enter and you will see how many steps are between your server and your browser (you should see something similar to the picture).</p>\n<img src=\"images/articles/CDN-performance/latency.jpg\" id=\"articleimg\" alt=\"Trace route latency website\">\n<p>After that, compare to other websites by doing the same thing. The CDN will shorten the distance between the browser and your server and thus reducing latency.</p>\n<p>As you will see, your request goes through many IP’s before it can even reach the server where the site is hosted. So, the latency and speed of a website depends on how many steps are between the browser (i.e. chrome) and server (i.e. IdeaNinja).</p>\n<img src=\"images/articles/CDN-performance/how_cdn_works.jpg\" id=\"articleimg\" alt=\"How CDN works\">\n<p>Think of CDN as a mirror for your server: it mimics your server across the world so that, when a request is made, it will answer with the closest server. This avoids a situation where your request has to go through several jumps across the world to reach its destination. Every time you change something in your server, the CDN will update.</p>\n<p>Basically, it will read your web site and cache its static content so it can present it while bypassing your server.&nbsp;When your website is accessed it will deliver the content without the request reaching your server thus reducing the amount of requests your servers needs to handle.&nbsp;This way, a CDN will help you having high availability and higher performance.&nbsp;Moreover, from our experience, it will reduce stress over your server making for saving for about 15% of your hosting needs.</p>\n<h2>In what conditions a CDN would be useful for my website?</h2>\n<p>If your site is having latency problems, low availability or if your startup is spending a lot of money on hosting then you should take a look into it.&nbsp;Several CDN's nowadays include in their services threat blocking services, which is always good.&nbsp;However, if your startup's website is fast and you have no latency problems, perhaps you would not benefit from a CDN.</p>\n<h2>Why does my website take so long to load?</h2>\n<p>Assuming that your code and the media presented is optimized, let's take a look into what happens when your website is accessed.&nbsp;So, the browser requests your page to be presented.&nbsp;That request hoops through routers, several pop connections and goes to your internet service provider and only then it finds your website's server address and routes the request to it.&nbsp;But it doesn't stop there. Then the request needs to reach your server. Let's say, for example, that your server is in UK and you are in the US: it needs to jump through several servers across countries to reach yours. And then your server answers when it has finished answering the several pending requests.&nbsp;The main idea is that the closer your server is to the request, the faster it will be, reducing its latency.</p>\n<h2>How can I test my website's speed?</h2>\n<p>We use this <a href=\"https://www.webpagetest.org/\" target=\"blank\" rel=\"nofollow\">free service</a> and they don't ask for emails, or payment.&nbsp;It retrieves a nice report so that you can better understand why your website is slow.</p>\n<h2>How much will a CDN cost me?</h2>\n<p>There are several CDNs that are free like (freemium model):</p>\n<ul>\n<li>BootstrapCDN</li>\n<li>CloudFlare</li>\n<li>Coral Content Distribution Network</li>\n</ul>\n<p>The most popular nowadays is probably Cloudflare.&nbsp;Other CDN providers, like telcos, charge a fee for this service.</p>\n<h2>How to setup a Cloudflare for my website?</h2>\n<p>Since Cloudflare is the most popular one let's explain how to set it up:&nbsp;</p>\n<ul>\n<li>Firstly, you need to create a CloudFlare account and add a website,</li>\n<li>Secondly, you are going to change your domain name servers to CloudFlare</li>\n<li>At last, you can choose your setting on the caching feature, or setup redirects or security settings.</li>\n</ul>\n<h2>Final Remarks</h2>\n<p>Hopefully this article has helped you improve your knowledge and placed you on the right track to improve your site's performance or saving some money.&nbsp;IdeaNinja is always trying to help you.&nbsp;If you liked this article you should read some of our latest articles:</p>\n<ul>\n<li><a href=\"https://ideaninja.io/entry-barriers-online-startup.html\" target=\"blank\">Entry barriers for online startup</a></li>\n<li><a href=\"https://ideaninja.io/free-hosting-find-out-how.html\" target=\"blank\">Free Hosting! Find out how</a></li>\n<li><a href=\"https://ideaninja.io/How-to-drive-traffic-to-your-website-SEO.html\" target=\"blank\">How to drive traffic to your website - SEO</a></li>\n</ul>\n"
}, {
  "title": "Improve your website design with free photos",
  "author": "Miguel Teixeira",
  "tags": ["Resources", "webdesign", "photos"],
  "description": "We came up with a list of the top 10 totally free photo sites that you can use to improve your website design.",
  "image": "images/articles/free_photos/free_photos.jpg",
  "href": "Improve-your-website-design-free-photos.html",
  "type": "article",
  "id": 22,
  "html": "\n<h2>What we mean by free</h2>\n<p>Are you looking for free photos to use for a design and do you want to keep, yourself and your startup, out of copyright trouble? If so, you should to know this, there are the following types of free:</p>\n<ul>\n<li><b>Creative Commons zero - </b> you can use the photos in any way you'd like without asking permission.</li>\n<li><b>Creative Commons with attribution - </b>you can use the photo in any way you want but you need to attribute credits to the creator of the photo. Attribution is simple: when you include a photo in the web page, you need to identify the photographer (\"Photo by John Doe\") and include a link to the website.</li>\n</ul>\n<p><b>All the websites presented are free of charge and the use of their pictures is attribution free (creative commons zero).</b></p>\n<h2>Is it worth the risk?</h2>\n<p>If someone finds their content on your website, they can ask to take down your site. It works as a preventive measure to make sure you remove other people’s content for good. So if you think you can get away with using other people’s images for free, think twice. Your website can go through a DMCA takedown if you’re not careful. A DMCA takedown happens when content is removed from your website at the request of the owner of that content or its rights. DMCA is basically a copyright law. It protects those who believe their rights under U.S. copyright law have been infringed, due to unauthorized use of their materials on the Internet. Although the law is from USA, it can be applied anywhere in the world. Once it happens to you, you can say goodbye to all your SEO efforts. Is it really worth it for a photo?</p>\n<h2>IdeaNinja's totally free photo websites TOP</h2>\n<p>These are our favorite websites for free photos. You don't have to do any kind of attribution and the pictures are really good.</p>\n<a href=\"http://cupcake.nilssonlee.se\" target=\"blank\" rel=\"nofollow\">\n<h3>1. Cupcake - Nilsson Lee</h3>\n</a>\n<a href=\"http://cupcake.nilssonlee.se\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/cupcake_photo.jpg\" id=\"articleimg\" alt=\"free photo cupcake\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"http://designerspics.com\" target=\"blank\" rel=\"nofollow\">\n<h3>2. Designer Pics</h3>\n</a>\n<a href=\"http://designerspics.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/designerpics_photo.jpg\" id=\"articleimg\" alt=\"free photo designerpics\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"https://getrefe.tumblr.com/\" target=\"blank\">\n<h3>3. Get Refe</h3>\n</a>\n<a href=\"https://getrefe.tumblr.com/\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/getrefe_photo.jpg\" id=\"articleimg\" alt=\"free-photo-getrefe\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"http://gratisography.com\" target=\"blank\" rel=\"nofollow\">\n<h3>4. Gratisography</h3>\n</a>\n<a href=\"http://gratisography.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/gratisography_photo.jpg\" id=\"articleimg\" alt=\"free photo gratisography\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"https://epicantus.tumblr.com\" target=\"blank\" rel=\"nofollow\">\n<h3>5. Epicantus</h3>\n</a>\n<a href=\"https://epicantus.tumblr.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/epicantus_photos.jpg\" id=\"articleimg\" alt=\"free photo epicantus\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"http://jaymantri.com\" target=\"blank\" rel=\"nofollow\">\n<h3>6. Jay Mantri</h3>\n</a>\n<a href=\"http://jaymantri.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/jaymantri_photo.jpg\" id=\"articleimg\" alt=\"free photo jaymantri\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"http://littlevisuals.co\" target=\"blank\" rel=\"nofollow\">\n<h3>7. Little Visuals</h3>\n</a>\n<a href=\"http://littlevisuals.co\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/litrlevisuals_photo.jpg\" id=\"articleimg\" alt=\"free photo littlevisuals\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"https://picjumbo.com\" target=\"blank\" rel=\"nofollow\">\n<h3>8. Pic Jumbo</h3>\n</a>\n<a href=\"https://picjumbo.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/picjumbo_photo.jpg\" id=\"articleimg\" alt=\"free photo picjumbo\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"http://publicdomainarchive.com\" target=\"blank\" rel=\"nofollow\">\n <h3>9. Public Domain Archive</h3>\n</a>\n<a href=\"http://publicdomainarchive.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/publicdomainarchive_photo.jpg\" id=\"articleimg\" alt=\"free photo publicdomainarchive\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<a href=\"https://unsplash.com\" target=\"blank\" rel=\"nofollow\">\n<h3>10. Unsplash</h3>\n</a>\n<a href=\"https://unsplash.com\" target=\"blank\" rel=\"nofollow\">\n<img src=\"images/articles/free_photos/unsplash_photo.jpg\" id=\"articleimg\" alt=\"free photo unsplash\">\n</a>\n<p><b>How free?</b></p>\n<ul>\n<li>No attribution required</li>\n<li>Free of charge</li>\n</ul><br>\n<h2>Final remarks</h2>\n<p>As you can see, there is no need to expose yourself to a DMCA takedown or pay for photos to use on your website, presentations or fliers. This article continues to follow a strategy to minimize the need for funds to start your venture AKA dirty cheap approach. If you like this approach you might also like this article on <a href=\"https://ideaninja.io/free-hosting-find-out-how.html\">free hosting. Find out how!</a></p>\n<p>Hope these photo sources help you implement your idea into a startup, and get you on the right path to revamp your website design for free.</p>\n<p>If you have any feedback or want to propose a new topic, please feel free to contact us. We appreciate any contribution towards improving this site and its content.</p>\n"
}, {
  "title": "Free Hosting! Find out how",
  "author": "Miguel Teixeira",
  "tags": ["Resources", "Hosting"],
  "description": "Are you spending money on hosting? No more! You can use Github to host your startup website for free right now. Read this article to learn how.",
  "image": "images/articles/free-hosting/free_hosting.jpg",
  "href": "free-hosting-find-out-how.html",
  "type": "article",
  "id": 23,
  "html": "\n<p>So you created a website. Now it's time to roll it out. This is what you need to do before following these instructions:</p>\n<ul>\n<li>Have a domain,</li>\n<li>Have a website built,</li>\n<li>Register on Github.com,</li>\n<li>Install Git.</li>\n</ul>\n<h2>What is Github</h2>\n<p>Github is an online service that enables developers to share and develop software.&nbsp;Github is based on Git, a widely used source code management system for software development.&nbsp;So it is critical that you understand some very basic Git scripts.&nbsp;In the course of this article we will teach you how to use Git and Github to get your website published and updated.</p>\n<h2>Git and Github</h2>\n<p>In Git and on Github there are a few concepts you need to understand to get your free hosting.&nbsp;First and most importantly, there are repositories which are pretty much projects.&nbsp;Then there are branches. Branches are like different versions or tastes of that project. So your project can branch off into different branches.</p>\n<h2>DOM files</h2>\n<p>The DOM files are the files that the browser retrieves from the server where your site is hosted, in order to present a website.&nbsp;They are:</p>\n<ul>\n<li>html pages,</li>\n<li>CSS files,</li>\n<li>JS Files,</li>\n<li>images,</li>\n<li>icons,</li>\n<li>videos,</li>\n<li>all other elements present in your website.</li>\n</ul>\n<h2>What is a Domain</h2>\n<p>A domain is basically the name of your website, like ideaninja.io or google.com. This name needs to be purchased and you need to hold the credentials to manage this domain, if you want to have a custom domain, instead of using the one that github will give you.</p>\n<h2>Step 1 – Create Github repository</h2>\n<p>Go to Github and create a repository on Github for your website. Note that your branch now is called Master.</p>\n<img src=\"images/articles/free-hosting/newrepo.jpg\" id=\"articleimg\" alt=\"New repository on Github\">\n<h2>Step 2 – Create gh-pages branch</h2>\n<p>Create a new branched named gh-pages.</p>\n<img src=\"images/articles/free-hosting/newbranch.jpg\" id=\"articleimg\" alt=\"New branch on Github\">\n<h2>Step 3 – Clone the repository</h2>\n<p>To clone the Github repository you have just created to your PC, create a new folder named Github and from there open a console by typing cmd, on windows, or terminal, if you are on mac. Then go to the folder you have just created and write the following command:</p>\n<p style=\"margins: 20px\">Git clone [repo url] --branch gh.pages .</p>\n<p>Note: The repo url you can find on your repository page on Github where it says https. Copy it to the command and run it.</p>\n<p>You will notice that some files have been downloaded.</p>\n<h2>Step 4 – Adding the DOM files to your repository</h2>\n<p>Now copy the DOM files to the local repository you have just created. And in the command line write:</p>\n<ul>\n<li>git add . - please notice the dot</li>\n<li>git commit -m “[write the description of this first submission]”</li>\n<li>Git push</li>\n</ul>\n<p>The terminal should ask you for your username and password from Github.</p><p>\n</p><p>After that, if you go to your gh-pages branch in your Github repository you should see the files you have just pushed.</p>\n<h2>Step 5 – Test your new free hosting</h2>\n<p>Test your website, through the following URL [username].github.io/[repository name]</p>\n<h2>Step 6 – Customizing the domain</h2>\n<p>Now, to get your site to respond in your custom domain, that you have purchased, add a File named CNAME (all Caps and no extension) and in that file write down your domain to your local repository. Repeat the same steps you did in step 4 (add, commit, push).</p>\n<div>\n<p>Now, go to your domain manager (website where you purchased the domain) and edit the Zone file or change it to this:</p>\n<img src=\"images/articles/free-hosting/zonefile.jpg\" id=\"articleimg\" alt=\"Domain zonefile website\">\n<p>or this: <br>\n@ 10800 IN A 192.30.252.153<br>\n@ 10800 IN A 192.30.252.154<br>\nwww 10800 IN CNAME @<br></p>\n</div>\n<p>Usually you can do this in DNS management, but it might be located in a different place, depending on the provider you have used.</p>\n<p>Make sure that your domain is using the zone file you edited/created.</p>\n<p>Note: it may take a few hours before the website is available. These new settings need to be propagated through the ISP, so don't worry if you cannot see your site right after you completed these 6 steps.</p>\n"
}, {
  "title": "Mentors are almost everything you need",
  "author": "Miguel Teixeira",
  "tags": ["Mentorship", "learning"],
  "description": "The challenge of creating a company can be daunting. Having the right skills you need to grow your startup is critical. Having Mentors in those areas will make you go a long way.",
  "image": "images/articles/mentors-need/free_advice.jpg",
  "href": "mentors_almost_everything_you_need.html",
  "type": "article",
  "id": 24,
  "html": "\n<h2>You can't know everything</h2>\n<p> In a startup there are many hats you need to fill in. Product Management, Marketing, Software Development, HR or Web design are some of the examples. Most probably you will find areas where you are not an expert, but due to cost and time restrictions you will need to tackle them yourself. Tackling a new area of knowledge is filled with hurdles and you may need guidance, and thus finding an expert that will serve as a mentor is gold. However, as always, there are a ton of resources online that will explain you how to do it.</p>\n<h2>Finding your mentors</h2>\n<p>First, navigating through a new skill is a hustle. And getting that first step right is so critical. Mentors can have a huge influence pointing you into the right direction. In other words, you need help finding good content and avoiding all of the bad advices and clutter that you can find on the web. In such moments, it is crucial to find a mentor. A mentor can be someone you know or anyone who has the knowledge you need and you can ask for directions. If it is someone you don't know, you can look for:</p>\n<ul>\n<li>Bloggers who are experts in the subject you are looking for,</li>\n<li>Top forums contributors - search for users with a lot of points or answers and try to get in contact with them,</li>\n<li>Authors of technical books and look for seminars that have been posted on YouTube.</li>\n</ul>\n<p>If it is someone you know, it can be a:</p>\n<ul>\n<li>Friend,</li>\n<li>Former co-worker,</li>\n<li>Teacher from college.</li>\n</ul>\n<p>Basically, an expert that will lead you into the right track. You may not have the luck of having someone that you can contact to give the guidance you need. In that case, you should consider getting online training. The right training can cost you as little as 25$ and it can be worth gold. You can also enter a mentoring program.</p>\n<img src=\"images/articles/mentors-need/free_advice.jpg\" id=\"articleimg\" alt=\"Advice Mentorship picture\">\n<h2>Be aware of how much you don't know</h2>\n<p class=\"quote\">\"<i>Real knowledge is to know the extend of one's ignorance</i>\", Confucious</p>\n<p>When tackling a new theme or area of knowledge, it is hard to clearly identify what your problems will be and what resources you may need. So, trying to anticipate them won't be a precise task, but you should do it anyway. Contact your mentors as soon as possible to clarify doubts and, most importantly, give you a framework you can work with.</p>\n<h2>Last piece of advice</h2>\n<p>Summing up, while creating a startup, you will find many new challenges. Several of those challenges will be new areas of knowledge. To steepen the learning curve, get a mentor. Try to come up with questions and themes as early as you can and pick the adult's brain as best as you can. Most importantly, get in the right path. It will save you a ton of pain.</p>\n"
}, {
  "title": "Article Writing Tool",
  "description": "This tool will help you write for the web. We have embeded in this tool rules to make your article ,compliant with best practices.",
  "tags": "Content, SEO, Marketing, bloging",
  "image": "images/icons/article_writting_tool.jpeg",
  "href": "article-writing-tool.html",
  "type": "tool",
  "id": 25
}, {
  "title": "Automatic Pitch Machine",
  "description": "4 Automatic selling pitches to sell your products and services. Get your pitch in two steps and we will deliver 4 pitches",
  "tags": "Pitch, sales, Marketing",
  "image": "images/icons/automatic_pitch_machine.jpeg",
  "href": "automatic_pitch_machine.html",
  "type": "tool",
  "id": 26
}, {
  "title": "Business Idea Assessment Tool",
  "description": "Do you have a business idea? Do you wish to know if it is any good ? Test here! This application will evaluate your business idea. From evaluating the market you are in, the market fit, the  competitive advantage, the growth potential and the barriers to enter and at the end present you with a final veridict. More then the result itself we take you through a journey to help you understand the ins and outs of your business idea.",
  "tags": "Entrepreneurship, ideation, strategy",
  "image": "images/icons/business_idea_assessment_tool.jpeg",
  "href": "business-idea.html",
  "type": "tool",
  "id": 27
}, {
  "title": "IdeaNinja",
  "description": "Welcome to IdeaNinja. Here is a brief presentation about what do we do.",
  "href": "https://www.youtube.com/embed/U2peb27Na-s",
  "type": "inst_video",
  "id": 28
}];

module.exports;

/*		
og:type article vertical

article:published_time - datetime - When the article was first published. 	format: yyyy-mm-dd
article:modified_time - datetime - When the article was last changed.     	format: yyyy-mm-dd
article:expiration_time - datetime - When the article is out of date after. format: yyyy-mm-dd
article:author - profile array - Writers of the article.
article:section - string - A high-level section name. E.g. Technology
article:tag - string array - Tag words associated with this article.
*/

//Other needed
/*
<meta property="og:title" content="" />
<meta property="og:description" content="" />
<meta property="og:url" content="" />
<meta property="og:image" content="" />

*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],3:[function(require,module,exports){
var data = require('./data.js');
articles = data.articles;

var idx = lunr(function () {
  this.ref('id');
  this.field('title');
  this.field('description');
  this.field('html');

  articles.forEach(function (doc) {
    this.add(doc);
  }, this);
});

//var qry = $(this).val();

$('#search').submit(function (e) {
  e.preventDefault();
  window.evento = e;
  //console.log("search")
  //console.log(evento)
  //console loging the results
  var res = idx.search($('#searchinput').val());
  //console.log(res)
  order = [];
  for (i = 0; i < res.length; i++) {
    order.push(res[i].ref);
  }; //for
  $("div").remove('.feed');
  $("div").remove('.card-panel');
  //console.log("beforerendercards")
  //console.log(order)

  if (order.length == 0) {
    $("#searchheader").html("<p>No results. please search for other kewords</p>");
  } else {
    $("#searchheader").html("<h2>Search results</h2>");
    rendercards(evento);
  } //else
}); //search


$('#searchmobile').submit(function (e) {
  e.preventDefault();
  window.evento = e;
  //console.log("searchmobile")
  //console.log(evento)
  //console loging the results
  var res = idx.search($('#searchmobileinput').val());
  //console.log(res)
  order = [];
  for (i = 0; i < res.length; i++) {
    order.push(res[i].ref);
  }; //for
  $("div").remove('.feed');
  $("div").remove('.card-panel');
  //console.log("beforerendercards")
  //console.log(order)

  if (order.length == 0) {
    $("#searchheader").html("<p>No results. please search for other kewords</p>");
  } else {
    $("#searchheader").html("<h2>Search results</h2>");
    rendercards(evento);
  } //else
  $(".drag-target").click();
}); //searchmobile
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlYXJjaC5qcyJdLCJuYW1lcyI6WyJkYXRhIiwicmVxdWlyZSIsImFydGljbGVzIiwiaWR4IiwibHVuciIsInJlZiIsImZpZWxkIiwiZm9yRWFjaCIsImRvYyIsImFkZCIsIiQiLCJzdWJtaXQiLCJlIiwicHJldmVudERlZmF1bHQiLCJ3aW5kb3ciLCJldmVudG8iLCJyZXMiLCJzZWFyY2giLCJ2YWwiLCJvcmRlciIsImkiLCJsZW5ndGgiLCJwdXNoIiwicmVtb3ZlIiwiaHRtbCIsInJlbmRlcmNhcmRzIiwiY2xpY2siXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DLFFBQVMsV0FBVCxDQUFYO0FBQ0FDLFdBQVdGLEtBQUtFLFFBQWhCOztBQUVBLElBQUlDLE1BQU1DLEtBQUssWUFBWTtBQUN6QixPQUFLQyxHQUFMLENBQVMsSUFBVDtBQUNBLE9BQUtDLEtBQUwsQ0FBVyxPQUFYO0FBQ0EsT0FBS0EsS0FBTCxDQUFXLGFBQVg7QUFDQSxPQUFLQSxLQUFMLENBQVcsTUFBWDs7QUFFQUosV0FBU0ssT0FBVCxDQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDOUIsU0FBS0MsR0FBTCxDQUFTRCxHQUFUO0FBQ0QsR0FGRCxFQUVHLElBRkg7QUFHRCxDQVRTLENBQVY7O0FBV0E7O0FBRUFFLEVBQUUsU0FBRixFQUFhQyxNQUFiLENBQW9CLFVBQVNDLENBQVQsRUFBVztBQUM3QkEsSUFBRUMsY0FBRjtBQUNBQyxTQUFPQyxNQUFQLEdBQWdCSCxDQUFoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUlJLE1BQU1iLElBQUljLE1BQUosQ0FBWVAsRUFBRSxjQUFGLEVBQWtCUSxHQUFsQixFQUFaLENBQVY7QUFDQTtBQUNBQyxVQUFRLEVBQVI7QUFDQSxPQUFNQyxJQUFFLENBQVIsRUFBV0EsSUFBRUosSUFBSUssTUFBakIsRUFBMEJELEdBQTFCLEVBQStCO0FBQzdCRCxVQUFNRyxJQUFOLENBQVdOLElBQUlJLENBQUosRUFBT2YsR0FBbEI7QUFDQyxJQVgwQixDQVd6QjtBQUNMSyxJQUFFLEtBQUYsRUFBU2EsTUFBVCxDQUFnQixPQUFoQjtBQUNBYixJQUFFLEtBQUYsRUFBU2EsTUFBVCxDQUFnQixhQUFoQjtBQUNBO0FBQ0E7O0FBRUMsTUFBR0osTUFBTUUsTUFBTixJQUFnQixDQUFuQixFQUFxQjtBQUNyQlgsTUFBRSxlQUFGLEVBQW1CYyxJQUFuQixDQUF3QixvREFBeEI7QUFDQyxHQUZELE1BRU87QUFDTGQsTUFBRSxlQUFGLEVBQW1CYyxJQUFuQixDQUF3Qix5QkFBeEI7QUFDQUMsZ0JBQVlWLE1BQVo7QUFDQyxHQXRCMEIsQ0FzQjFCO0FBQ0osQ0F2QkQsRSxDQXVCRTs7O0FBR0ZMLEVBQUUsZUFBRixFQUFtQkMsTUFBbkIsQ0FBMEIsVUFBU0MsQ0FBVCxFQUFXO0FBQ25DQSxJQUFFQyxjQUFGO0FBQ0FDLFNBQU9DLE1BQVAsR0FBZ0JILENBQWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSUksTUFBTWIsSUFBSWMsTUFBSixDQUFZUCxFQUFFLG9CQUFGLEVBQXdCUSxHQUF4QixFQUFaLENBQVY7QUFDQTtBQUNBQyxVQUFRLEVBQVI7QUFDQSxPQUFNQyxJQUFFLENBQVIsRUFBV0EsSUFBRUosSUFBSUssTUFBakIsRUFBMEJELEdBQTFCLEVBQStCO0FBQy9CRCxVQUFNRyxJQUFOLENBQVdOLElBQUlJLENBQUosRUFBT2YsR0FBbEI7QUFDQyxJQVhrQyxDQVdqQztBQUNISyxJQUFFLEtBQUYsRUFBU2EsTUFBVCxDQUFnQixPQUFoQjtBQUNBYixJQUFFLEtBQUYsRUFBU2EsTUFBVCxDQUFnQixhQUFoQjtBQUNBO0FBQ0E7O0FBRUEsTUFBR0osTUFBTUUsTUFBTixJQUFnQixDQUFuQixFQUFxQjtBQUNwQlgsTUFBRSxlQUFGLEVBQW1CYyxJQUFuQixDQUF3QixvREFBeEI7QUFDQyxHQUZGLE1BRVE7QUFDSGQsTUFBRSxlQUFGLEVBQW1CYyxJQUFuQixDQUF3Qix5QkFBeEI7QUFDQUMsZ0JBQVlWLE1BQVo7QUFFRCxHQXZCZ0MsQ0F1QmhDO0FBQ0hMLElBQUUsY0FBRixFQUFrQmdCLEtBQWxCO0FBQ0QsQ0F6QkQsRSxDQXlCRSIsImZpbGUiOiJzZWFyY2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGF0YSA9IHJlcXVpcmUgKCcuL2RhdGEuanMnKTsgXHJcbmFydGljbGVzID0gZGF0YS5hcnRpY2xlcyBcclxuXHJcbnZhciBpZHggPSBsdW5yKGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLnJlZignaWQnKVxyXG4gIHRoaXMuZmllbGQoJ3RpdGxlJylcclxuICB0aGlzLmZpZWxkKCdkZXNjcmlwdGlvbicpXHJcbiAgdGhpcy5maWVsZCgnaHRtbCcpXHJcblxyXG4gIGFydGljbGVzLmZvckVhY2goZnVuY3Rpb24gKGRvYykge1xyXG4gICAgdGhpcy5hZGQoZG9jKVxyXG4gIH0sIHRoaXMpXHJcbn0pXHJcblxyXG4vL3ZhciBxcnkgPSAkKHRoaXMpLnZhbCgpO1xyXG5cclxuJCgnI3NlYXJjaCcpLnN1Ym1pdChmdW5jdGlvbihlKXtcclxuICBlLnByZXZlbnREZWZhdWx0KClcclxuICB3aW5kb3cuZXZlbnRvID0gZVxyXG4gIC8vY29uc29sZS5sb2coXCJzZWFyY2hcIilcclxuICAvL2NvbnNvbGUubG9nKGV2ZW50bylcclxuICAvL2NvbnNvbGUgbG9naW5nIHRoZSByZXN1bHRzXHJcbiAgdmFyIHJlcyA9IGlkeC5zZWFyY2goICQoJyNzZWFyY2hpbnB1dCcpLnZhbCgpKVxyXG4gIC8vY29uc29sZS5sb2cocmVzKVxyXG4gIG9yZGVyID0gW11cclxuICBmb3IgKCBpPTA7IGk8cmVzLmxlbmd0aDsgIGkrKykge1xyXG4gICAgb3JkZXIucHVzaChyZXNbaV0ucmVmKVxyXG4gICAgfTsvL2ZvclxyXG4gJChcImRpdlwiKS5yZW1vdmUoJy5mZWVkJylcclxuICQoXCJkaXZcIikucmVtb3ZlKCcuY2FyZC1wYW5lbCcpXHJcbiAvL2NvbnNvbGUubG9nKFwiYmVmb3JlcmVuZGVyY2FyZHNcIilcclxuIC8vY29uc29sZS5sb2cob3JkZXIpXHJcbiBcclxuICBpZihvcmRlci5sZW5ndGggPT0gMCl7XHJcbiAgJChcIiNzZWFyY2hoZWFkZXJcIikuaHRtbChcIjxwPk5vIHJlc3VsdHMuIHBsZWFzZSBzZWFyY2ggZm9yIG90aGVyIGtld29yZHM8L3A+XCIpXHJcbiAgfSBlbHNlIHtcclxuICAgICQoXCIjc2VhcmNoaGVhZGVyXCIpLmh0bWwoXCI8aDI+U2VhcmNoIHJlc3VsdHM8L2gyPlwiKVxyXG4gICAgcmVuZGVyY2FyZHMoZXZlbnRvKVxyXG4gICAgfS8vZWxzZVxyXG59KS8vc2VhcmNoXHJcblxyXG5cclxuJCgnI3NlYXJjaG1vYmlsZScpLnN1Ym1pdChmdW5jdGlvbihlKXtcclxuICBlLnByZXZlbnREZWZhdWx0KClcclxuICB3aW5kb3cuZXZlbnRvID0gZVxyXG4gIC8vY29uc29sZS5sb2coXCJzZWFyY2htb2JpbGVcIilcclxuICAvL2NvbnNvbGUubG9nKGV2ZW50bylcclxuICAvL2NvbnNvbGUgbG9naW5nIHRoZSByZXN1bHRzXHJcbiAgdmFyIHJlcyA9IGlkeC5zZWFyY2goICQoJyNzZWFyY2htb2JpbGVpbnB1dCcpLnZhbCgpIClcclxuICAvL2NvbnNvbGUubG9nKHJlcylcclxuICBvcmRlciA9IFtdXHJcbiAgZm9yICggaT0wOyBpPHJlcy5sZW5ndGg7ICBpKyspIHtcclxuICBvcmRlci5wdXNoKHJlc1tpXS5yZWYpXHJcbiAgfTsvL2ZvclxyXG4gJChcImRpdlwiKS5yZW1vdmUoJy5mZWVkJylcclxuICQoXCJkaXZcIikucmVtb3ZlKCcuY2FyZC1wYW5lbCcpXHJcbiAvL2NvbnNvbGUubG9nKFwiYmVmb3JlcmVuZGVyY2FyZHNcIilcclxuIC8vY29uc29sZS5sb2cob3JkZXIpXHJcbiBcclxuIGlmKG9yZGVyLmxlbmd0aCA9PSAwKXtcclxuICAkKFwiI3NlYXJjaGhlYWRlclwiKS5odG1sKFwiPHA+Tm8gcmVzdWx0cy4gcGxlYXNlIHNlYXJjaCBmb3Igb3RoZXIga2V3b3JkczwvcD5cIilcclxuICB9IGVsc2Uge1xyXG4gICAgICAkKFwiI3NlYXJjaGhlYWRlclwiKS5odG1sKFwiPGgyPlNlYXJjaCByZXN1bHRzPC9oMj5cIilcclxuICAgICAgcmVuZGVyY2FyZHMoZXZlbnRvKVxyXG5cclxuICAgIH0vL2Vsc2VcclxuICAkKFwiLmRyYWctdGFyZ2V0XCIpLmNsaWNrKClcclxufSkvL3NlYXJjaG1vYmlsZVxyXG5cclxuXHJcbiJdfQ==
},{"./data.js":2}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
/*
 * EJS Embedded JavaScript templates
 * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

'use strict';

/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */

/**
 * EJS internal functions.
 *
 * Technically this "module" lies in the same file as {@link module:ejs}, for
 * the sake of organization all the private functions re grouped into this
 * module.
 *
 * @module ejs-internal
 * @private
 */

/**
 * Embedded JavaScript templating engine.
 *
 * @module ejs
 * @public
 */

var fs = require('fs');
var path = require('path');
var utils = require('./utils');

var scopeOptionWarned = false;
var _VERSION_STRING = require('../package.json').version;
var _DEFAULT_DELIMITER = '%';
var _DEFAULT_LOCALS_NAME = 'locals';
var _NAME = 'ejs';
var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
var _OPTS = ['delimiter', 'scope', 'context', 'debug', 'compileDebug', 'client', '_with', 'rmWhitespace', 'strict', 'filename'];
// We don't allow 'cache' option to be passed in the data obj
// for the normal `render` call, but this is where Express puts it
// so we make an exception for `renderFile`
var _OPTS_EXPRESS = _OPTS.concat('cache');
var _BOM = /^\uFEFF/;

/**
 * EJS template function cache. This can be a LRU object from lru-cache NPM
 * module. By default, it is {@link module:utils.cache}, a simple in-process
 * cache that grows continuously.
 *
 * @type {Cache}
 */

exports.cache = utils.cache;

/**
 * Custom file loader. Useful for template preprocessing or restricting access
 * to a certain part of the filesystem.
 *
 * @type {fileLoader}
 */

exports.fileLoader = fs.readFileSync;

/**
 * Name of the object containing the locals.
 *
 * This variable is overridden by {@link Options}`.localsName` if it is not
 * `undefined`.
 *
 * @type {String}
 * @public
 */

exports.localsName = _DEFAULT_LOCALS_NAME;

/**
 * Get the path to the included file from the parent file path and the
 * specified path.
 *
 * @param {String}  name     specified path
 * @param {String}  filename parent file path
 * @param {Boolean} isDir    parent file path whether is directory
 * @return {String}
 */
exports.resolveInclude = function (name, filename, isDir) {
  var dirname = path.dirname;
  var extname = path.extname;
  var resolve = path.resolve;
  var includePath = resolve(isDir ? filename : dirname(filename), name);
  var ext = extname(name);
  if (!ext) {
    includePath += '.ejs';
  }
  return includePath;
};

/**
 * Get the path to the included file by Options
 *
 * @param  {String}  path    specified path
 * @param  {Options} options compilation options
 * @return {String}
 */
function getIncludePath(path, options) {
  var includePath;
  var filePath;
  var views = options.views;

  // Abs path
  if (path.charAt(0) == '/') {
    includePath = exports.resolveInclude(path.replace(/^\/*/, ''), options.root || '/', true);
  }
  // Relative paths
  else {
      // Look relative to a passed filename first
      if (options.filename) {
        filePath = exports.resolveInclude(path, options.filename);
        if (fs.existsSync(filePath)) {
          includePath = filePath;
        }
      }
      // Then look in any views directories
      if (!includePath) {
        if (Array.isArray(views) && views.some(function (v) {
          filePath = exports.resolveInclude(path, v, true);
          return fs.existsSync(filePath);
        })) {
          includePath = filePath;
        }
      }
      if (!includePath) {
        throw new Error('Could not find include include file.');
      }
    }
  return includePath;
}

/**
 * Get the template from a string or a file, either compiled on-the-fly or
 * read from cache (if enabled), and cache the template if needed.
 *
 * If `template` is not set, the file specified in `options.filename` will be
 * read.
 *
 * If `options.cache` is true, this function reads the file from
 * `options.filename` so it must be set prior to calling this function.
 *
 * @memberof module:ejs-internal
 * @param {Options} options   compilation options
 * @param {String} [template] template source
 * @return {(TemplateFunction|ClientFunction)}
 * Depending on the value of `options.client`, either type might be returned.
 * @static
 */

function handleCache(options, template) {
  var func;
  var filename = options.filename;
  var hasTemplate = arguments.length > 1;

  if (options.cache) {
    if (!filename) {
      throw new Error('cache option requires a filename');
    }
    func = exports.cache.get(filename);
    if (func) {
      return func;
    }
    if (!hasTemplate) {
      template = fileLoader(filename).toString().replace(_BOM, '');
    }
  } else if (!hasTemplate) {
    // istanbul ignore if: should not happen at all
    if (!filename) {
      throw new Error('Internal EJS error: no file name or template ' + 'provided');
    }
    template = fileLoader(filename).toString().replace(_BOM, '');
  }
  func = exports.compile(template, options);
  if (options.cache) {
    exports.cache.set(filename, func);
  }
  return func;
}

/**
 * Try calling handleCache with the given options and data and call the
 * callback with the result. If an error occurs, call the callback with
 * the error. Used by renderFile().
 *
 * @memberof module:ejs-internal
 * @param {Options} options    compilation options
 * @param {Object} data        template data
 * @param {RenderFileCallback} cb callback
 * @static
 */

function tryHandleCache(options, data, cb) {
  var result;
  try {
    result = handleCache(options)(data);
  } catch (err) {
    return cb(err);
  }
  return cb(null, result);
}

/**
 * fileLoader is independent
 *
 * @param {String} filePath ejs file path.
 * @return {String} The contents of the specified file.
 * @static
 */

function fileLoader(filePath) {
  return exports.fileLoader(filePath);
}

/**
 * Get the template function.
 *
 * If `options.cache` is `true`, then the template is cached.
 *
 * @memberof module:ejs-internal
 * @param {String}  path    path for the specified file
 * @param {Options} options compilation options
 * @return {(TemplateFunction|ClientFunction)}
 * Depending on the value of `options.client`, either type might be returned
 * @static
 */

function includeFile(path, options) {
  var opts = utils.shallowCopy({}, options);
  opts.filename = getIncludePath(path, opts);
  return handleCache(opts);
}

/**
 * Get the JavaScript source of an included file.
 *
 * @memberof module:ejs-internal
 * @param {String}  path    path for the specified file
 * @param {Options} options compilation options
 * @return {Object}
 * @static
 */

function includeSource(path, options) {
  var opts = utils.shallowCopy({}, options);
  var includePath;
  var template;
  includePath = getIncludePath(path, opts);
  template = fileLoader(includePath).toString().replace(_BOM, '');
  opts.filename = includePath;
  var templ = new Template(template, opts);
  templ.generateSource();
  return {
    source: templ.source,
    filename: includePath,
    template: template
  };
}

/**
 * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
 * `lineno`.
 *
 * @implements RethrowCallback
 * @memberof module:ejs-internal
 * @param {Error}  err      Error object
 * @param {String} str      EJS source
 * @param {String} filename file name of the EJS file
 * @param {String} lineno   line number of the error
 * @static
 */

function rethrow(err, str, flnm, lineno, esc) {
  var lines = str.split('\n');
  var start = Math.max(lineno - 3, 0);
  var end = Math.min(lines.length, lineno + 3);
  var filename = esc(flnm); // eslint-disable-line
  // Error context
  var context = lines.slice(start, end).map(function (line, i) {
    var curr = i + start + 1;
    return (curr == lineno ? ' >> ' : '    ') + curr + '| ' + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'ejs') + ':' + lineno + '\n' + context + '\n\n' + err.message;

  throw err;
}

function stripSemi(str) {
  return str.replace(/;(\s*$)/, '$1');
}

/**
 * Compile the given `str` of ejs into a template function.
 *
 * @param {String}  template EJS template
 *
 * @param {Options} opts     compilation options
 *
 * @return {(TemplateFunction|ClientFunction)}
 * Depending on the value of `opts.client`, either type might be returned.
 * @public
 */

exports.compile = function compile(template, opts) {
  var templ;

  // v1 compat
  // 'scope' is 'context'
  // FIXME: Remove this in a future version
  if (opts && opts.scope) {
    if (!scopeOptionWarned) {
      console.warn('`scope` option is deprecated and will be removed in EJS 3');
      scopeOptionWarned = true;
    }
    if (!opts.context) {
      opts.context = opts.scope;
    }
    delete opts.scope;
  }
  templ = new Template(template, opts);
  return templ.compile();
};

/**
 * Render the given `template` of ejs.
 *
 * If you would like to include options but not data, you need to explicitly
 * call this function with `data` being an empty object or `null`.
 *
 * @param {String}   template EJS template
 * @param {Object}  [data={}] template data
 * @param {Options} [opts={}] compilation and rendering options
 * @return {String}
 * @public
 */

exports.render = function (template, d, o) {
  var data = d || {};
  var opts = o || {};

  // No options object -- if there are optiony names
  // in the data, copy them to options
  if (arguments.length == 2) {
    utils.shallowCopyFromList(opts, data, _OPTS);
  }

  return handleCache(opts, template)(data);
};

/**
 * Render an EJS file at the given `path` and callback `cb(err, str)`.
 *
 * If you would like to include options but not data, you need to explicitly
 * call this function with `data` being an empty object or `null`.
 *
 * @param {String}             path     path to the EJS file
 * @param {Object}            [data={}] template data
 * @param {Options}           [opts={}] compilation and rendering options
 * @param {RenderFileCallback} cb callback
 * @public
 */

exports.renderFile = function () {
  var filename = arguments[0];
  var cb = arguments[arguments.length - 1];
  var opts = { filename: filename };
  var data;

  if (arguments.length > 2) {
    data = arguments[1];

    // No options object -- if there are optiony names
    // in the data, copy them to options
    if (arguments.length === 3) {
      // Express 4
      if (data.settings) {
        if (data.settings['view options']) {
          utils.shallowCopyFromList(opts, data.settings['view options'], _OPTS_EXPRESS);
        }
        if (data.settings.views) {
          opts.views = data.settings.views;
        }
      }
      // Express 3 and lower
      else {
          utils.shallowCopyFromList(opts, data, _OPTS_EXPRESS);
        }
    } else {
      // Use shallowCopy so we don't pollute passed in opts obj with new vals
      utils.shallowCopy(opts, arguments[2]);
    }

    opts.filename = filename;
  } else {
    data = {};
  }

  return tryHandleCache(opts, data, cb);
};

/**
 * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
 * @public
 */

exports.clearCache = function () {
  exports.cache.reset();
};

function Template(text, opts) {
  opts = opts || {};
  var options = {};
  this.templateText = text;
  this.mode = null;
  this.truncate = false;
  this.currentLine = 1;
  this.source = '';
  this.dependencies = [];
  options.client = opts.client || false;
  options.escapeFunction = opts.escape || utils.escapeXML;
  options.compileDebug = opts.compileDebug !== false;
  options.debug = !!opts.debug;
  options.filename = opts.filename;
  options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
  options.strict = opts.strict || false;
  options.context = opts.context;
  options.cache = opts.cache || false;
  options.rmWhitespace = opts.rmWhitespace;
  options.root = opts.root;
  options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
  options.views = opts.views;

  if (options.strict) {
    options._with = false;
  } else {
    options._with = typeof opts._with != 'undefined' ? opts._with : true;
  }

  this.opts = options;

  this.regex = this.createRegex();
}

Template.modes = {
  EVAL: 'eval',
  ESCAPED: 'escaped',
  RAW: 'raw',
  COMMENT: 'comment',
  LITERAL: 'literal'
};

Template.prototype = {
  createRegex: function () {
    var str = _REGEX_STRING;
    var delim = utils.escapeRegExpChars(this.opts.delimiter);
    str = str.replace(/%/g, delim);
    return new RegExp(str);
  },

  compile: function () {
    var src;
    var fn;
    var opts = this.opts;
    var prepended = '';
    var appended = '';
    var escapeFn = opts.escapeFunction;

    if (!this.source) {
      this.generateSource();
      prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
      if (opts._with !== false) {
        prepended += '  with (' + opts.localsName + ' || {}) {' + '\n';
        appended += '  }' + '\n';
      }
      appended += '  return __output.join("");' + '\n';
      this.source = prepended + this.source + appended;
    }

    if (opts.compileDebug) {
      src = 'var __line = 1' + '\n' + '  , __lines = ' + JSON.stringify(this.templateText) + '\n' + '  , __filename = ' + (opts.filename ? JSON.stringify(opts.filename) : 'undefined') + ';' + '\n' + 'try {' + '\n' + this.source + '} catch (e) {' + '\n' + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n' + '}' + '\n';
    } else {
      src = this.source;
    }

    if (opts.client) {
      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
      if (opts.compileDebug) {
        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
      }
    }

    if (opts.strict) {
      src = '"use strict";\n' + src;
    }
    if (opts.debug) {
      console.log(src);
    }

    try {
      fn = new Function(opts.localsName + ', escapeFn, include, rethrow', src);
    } catch (e) {
      // istanbul ignore else
      if (e instanceof SyntaxError) {
        if (opts.filename) {
          e.message += ' in ' + opts.filename;
        }
        e.message += ' while compiling ejs\n\n';
        e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
        e.message += 'https://github.com/RyanZim/EJS-Lint';
      }
      throw e;
    }

    if (opts.client) {
      fn.dependencies = this.dependencies;
      return fn;
    }

    // Return a callable function which will execute the function
    // created by the source-code, with the passed data as locals
    // Adds a local `include` function which allows full recursive include
    var returnedFn = function (data) {
      var include = function (path, includeData) {
        var d = utils.shallowCopy({}, data);
        if (includeData) {
          d = utils.shallowCopy(d, includeData);
        }
        return includeFile(path, opts)(d);
      };
      return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
    };
    returnedFn.dependencies = this.dependencies;
    return returnedFn;
  },

  generateSource: function () {
    var opts = this.opts;

    if (opts.rmWhitespace) {
      // Have to use two separate replace here as `^` and `$` operators don't
      // work well with `\r`.
      this.templateText = this.templateText.replace(/\r/g, '').replace(/^\s+|\s+$/gm, '');
    }

    // Slurp spaces and tabs before <%_ and after _%>
    this.templateText = this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');

    var self = this;
    var matches = this.parseTemplateText();
    var d = this.opts.delimiter;

    if (matches && matches.length) {
      matches.forEach(function (line, index) {
        var opening;
        var closing;
        var include;
        var includeOpts;
        var includeObj;
        var includeSrc;
        // If this is an opening tag, check for closing tags
        // FIXME: May end up with some false positives here
        // Better to store modes as k/v with '<' + delimiter as key
        // Then this can simply check against the map
        if (line.indexOf('<' + d) === 0 // If it is a tag
        && line.indexOf('<' + d + d) !== 0) {
          // and is not escaped
          closing = matches[index + 2];
          if (!(closing == d + '>' || closing == '-' + d + '>' || closing == '_' + d + '>')) {
            throw new Error('Could not find matching close tag for "' + line + '".');
          }
        }
        // HACK: backward-compat `include` preprocessor directives
        if (include = line.match(/^\s*include\s+(\S+)/)) {
          opening = matches[index - 1];
          // Must be in EVAL or RAW mode
          if (opening && (opening == '<' + d || opening == '<' + d + '-' || opening == '<' + d + '_')) {
            includeOpts = utils.shallowCopy({}, self.opts);
            includeObj = includeSource(include[1], includeOpts);
            if (self.opts.compileDebug) {
              includeSrc = '    ; (function(){' + '\n' + '      var __line = 1' + '\n' + '      , __lines = ' + JSON.stringify(includeObj.template) + '\n' + '      , __filename = ' + JSON.stringify(includeObj.filename) + ';' + '\n' + '      try {' + '\n' + includeObj.source + '      } catch (e) {' + '\n' + '        rethrow(e, __lines, __filename, __line, escapeFn);' + '\n' + '      }' + '\n' + '    ; }).call(this)' + '\n';
            } else {
              includeSrc = '    ; (function(){' + '\n' + includeObj.source + '    ; }).call(this)' + '\n';
            }
            self.source += includeSrc;
            self.dependencies.push(exports.resolveInclude(include[1], includeOpts.filename));
            return;
          }
        }
        self.scanLine(line);
      });
    }
  },

  parseTemplateText: function () {
    var str = this.templateText;
    var pat = this.regex;
    var result = pat.exec(str);
    var arr = [];
    var firstPos;

    while (result) {
      firstPos = result.index;

      if (firstPos !== 0) {
        arr.push(str.substring(0, firstPos));
        str = str.slice(firstPos);
      }

      arr.push(result[0]);
      str = str.slice(result[0].length);
      result = pat.exec(str);
    }

    if (str) {
      arr.push(str);
    }

    return arr;
  },

  _addOutput: function (line) {
    if (this.truncate) {
      // Only replace single leading linebreak in the line after
      // -%> tag -- this is the single, trailing linebreak
      // after the tag that the truncation mode replaces
      // Handle Win / Unix / old Mac linebreaks -- do the \r\n
      // combo first in the regex-or
      line = line.replace(/^(?:\r\n|\r|\n)/, '');
      this.truncate = false;
    } else if (this.opts.rmWhitespace) {
      // rmWhitespace has already removed trailing spaces, just need
      // to remove linebreaks
      line = line.replace(/^\n/, '');
    }
    if (!line) {
      return line;
    }

    // Preserve literal slashes
    line = line.replace(/\\/g, '\\\\');

    // Convert linebreaks
    line = line.replace(/\n/g, '\\n');
    line = line.replace(/\r/g, '\\r');

    // Escape double-quotes
    // - this will be the delimiter during execution
    line = line.replace(/"/g, '\\"');
    this.source += '    ; __append("' + line + '")' + '\n';
  },

  scanLine: function (line) {
    var self = this;
    var d = this.opts.delimiter;
    var newLineCount = 0;

    newLineCount = line.split('\n').length - 1;

    switch (line) {
      case '<' + d:
      case '<' + d + '_':
        this.mode = Template.modes.EVAL;
        break;
      case '<' + d + '=':
        this.mode = Template.modes.ESCAPED;
        break;
      case '<' + d + '-':
        this.mode = Template.modes.RAW;
        break;
      case '<' + d + '#':
        this.mode = Template.modes.COMMENT;
        break;
      case '<' + d + d:
        this.mode = Template.modes.LITERAL;
        this.source += '    ; __append("' + line.replace('<' + d + d, '<' + d) + '")' + '\n';
        break;
      case d + d + '>':
        this.mode = Template.modes.LITERAL;
        this.source += '    ; __append("' + line.replace(d + d + '>', d + '>') + '")' + '\n';
        break;
      case d + '>':
      case '-' + d + '>':
      case '_' + d + '>':
        if (this.mode == Template.modes.LITERAL) {
          this._addOutput(line);
        }

        this.mode = null;
        this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
        break;
      default:
        // In script mode, depends on type of tag
        if (this.mode) {
          // If '//' is found without a line break, add a line break.
          switch (this.mode) {
            case Template.modes.EVAL:
            case Template.modes.ESCAPED:
            case Template.modes.RAW:
              if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
                line += '\n';
              }
          }
          switch (this.mode) {
            // Just executing code
            case Template.modes.EVAL:
              this.source += '    ; ' + line + '\n';
              break;
            // Exec, esc, and output
            case Template.modes.ESCAPED:
              this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
              break;
            // Exec and output
            case Template.modes.RAW:
              this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
              break;
            case Template.modes.COMMENT:
              // Do nothing
              break;
            // Literal <%% mode, append as raw output
            case Template.modes.LITERAL:
              this._addOutput(line);
              break;
          }
        }
        // In string mode, just add the output
        else {
            this._addOutput(line);
          }
    }

    if (self.opts.compileDebug && newLineCount) {
      this.currentLine += newLineCount;
      this.source += '    ; __line = ' + this.currentLine + '\n';
    }
  }
};

/**
 * Escape characters reserved in XML.
 *
 * This is simply an export of {@link module:utils.escapeXML}.
 *
 * If `markup` is `undefined` or `null`, the empty string is returned.
 *
 * @param {String} markup Input string
 * @return {String} Escaped string
 * @public
 * @func
 * */
exports.escapeXML = utils.escapeXML;

/**
 * Express.js support.
 *
 * This is an alias for {@link module:ejs.renderFile}, in order to support
 * Express.js out-of-the-box.
 *
 * @func
 */

exports.__express = exports.renderFile;

// Add require support
/* istanbul ignore else */
if (require.extensions) {
  require.extensions['.ejs'] = function (module, flnm) {
    var filename = flnm || /* istanbul ignore next */module.filename;
    var options = {
      filename: filename,
      client: true
    };
    var template = fileLoader(filename).toString();
    var fn = exports.compile(template, options);
    module._compile('module.exports = ' + fn.toString() + ';', filename);
  };
}

/**
 * Version of EJS.
 *
 * @readonly
 * @type {String}
 * @public
 */

exports.VERSION = _VERSION_STRING;

/**
 * Name for detection of EJS.
 *
 * @readonly
 * @type {String}
 * @public
 */

exports.name = _NAME;

/* istanbul ignore if */
if (typeof window != 'undefined') {
  window.ejs = exports;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../package.json":7,"./utils":6,"fs":4,"path":11}],6:[function(require,module,exports){
/*
 * EJS Embedded JavaScript templates
 * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

/**
 * Private utility functions
 * @module utils
 * @private
 */

'use strict';

var regExpChars = /[|\\{}()[\]^$+*?.]/g;

/**
 * Escape characters reserved in regular expressions.
 *
 * If `string` is `undefined` or `null`, the empty string is returned.
 *
 * @param {String} string Input string
 * @return {String} Escaped string
 * @static
 * @private
 */
exports.escapeRegExpChars = function (string) {
  // istanbul ignore if
  if (!string) {
    return '';
  }
  return String(string).replace(regExpChars, '\\$&');
};

var _ENCODE_HTML_RULES = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&#34;',
  "'": '&#39;'
};
var _MATCH_HTML = /[&<>\'"]/g;

function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
}

/**
 * Stringified version of constants used by {@link module:utils.escapeXML}.
 *
 * It is used in the process of generating {@link ClientFunction}s.
 *
 * @readonly
 * @type {String}
 */

var escapeFuncStr = 'var _ENCODE_HTML_RULES = {\n' + '      "&": "&amp;"\n' + '    , "<": "&lt;"\n' + '    , ">": "&gt;"\n' + '    , \'"\': "&#34;"\n' + '    , "\'": "&#39;"\n' + '    }\n' + '  , _MATCH_HTML = /[&<>\'"]/g;\n' + 'function encode_char(c) {\n' + '  return _ENCODE_HTML_RULES[c] || c;\n' + '};\n';

/**
 * Escape characters reserved in XML.
 *
 * If `markup` is `undefined` or `null`, the empty string is returned.
 *
 * @implements {EscapeCallback}
 * @param {String} markup Input string
 * @return {String} Escaped string
 * @static
 * @private
 */

exports.escapeXML = function (markup) {
  return markup == undefined ? '' : String(markup).replace(_MATCH_HTML, encode_char);
};
exports.escapeXML.toString = function () {
  return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
};

/**
 * Naive copy of properties from one object to another.
 * Does not recurse into non-scalar properties
 * Does not check to see if the property has a value before copying
 *
 * @param  {Object} to   Destination object
 * @param  {Object} from Source object
 * @return {Object}      Destination object
 * @static
 * @private
 */
exports.shallowCopy = function (to, from) {
  from = from || {};
  for (var p in from) {
    to[p] = from[p];
  }
  return to;
};

/**
 * Naive copy of a list of key names, from one object to another.
 * Only copies property if it is actually defined
 * Does not recurse into non-scalar properties
 *
 * @param  {Object} to   Destination object
 * @param  {Object} from Source object
 * @param  {Array} list List of properties to copy
 * @return {Object}      Destination object
 * @static
 * @private
 */
exports.shallowCopyFromList = function (to, from, list) {
  for (var i = 0; i < list.length; i++) {
    var p = list[i];
    if (typeof from[p] != 'undefined') {
      to[p] = from[p];
    }
  }
  return to;
};

/**
 * Simple in-process cache implementation. Does not implement limits of any
 * sort.
 *
 * @implements Cache
 * @static
 * @private
 */
exports.cache = {
  _data: {},
  set: function (key, val) {
    this._data[key] = val;
  },
  get: function (key) {
    return this._data[key];
  },
  reset: function () {
    this._data = {};
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],7:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "ejs",
        "scope": null,
        "escapedName": "ejs",
        "name": "ejs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\mgtei\\Documents\\github\\ideaninja_dev"
    ]
  ],
  "_from": "ejs@latest",
  "_id": "ejs@2.5.7",
  "_inCache": true,
  "_location": "/ejs",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ejs-2.5.7.tgz_1501385411193_0.3807816591579467"
  },
  "_npmUser": {
    "name": "mde",
    "email": "mde@fleegix.org"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ejs",
    "scope": null,
    "escapedName": "ejs",
    "name": "ejs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ejs/-/ejs-2.5.7.tgz",
  "_shasum": "cc872c168880ae3c7189762fd5ffc00896c9518a",
  "_shrinkwrap": null,
  "_spec": "ejs",
  "_where": "C:\\Users\\mgtei\\Documents\\github\\ideaninja_dev",
  "author": {
    "name": "Matthew Eernisse",
    "email": "mde@fleegix.org",
    "url": "http://fleegix.org"
  },
  "bugs": {
    "url": "https://github.com/mde/ejs/issues"
  },
  "contributors": [
    {
      "name": "Timothy Gu",
      "email": "timothygu99@gmail.com",
      "url": "https://timothygu.github.io"
    }
  ],
  "dependencies": {},
  "description": "Embedded JavaScript templates",
  "devDependencies": {
    "browserify": "^13.0.1",
    "eslint": "^3.0.0",
    "git-directory-deploy": "^1.5.1",
    "istanbul": "~0.4.3",
    "jake": "^8.0.0",
    "jsdoc": "^3.4.0",
    "lru-cache": "^4.0.1",
    "mocha": "^3.0.2",
    "uglify-js": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "cc872c168880ae3c7189762fd5ffc00896c9518a",
    "tarball": "https://registry.npmjs.org/ejs/-/ejs-2.5.7.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/mde/ejs",
  "keywords": [
    "template",
    "engine",
    "ejs"
  ],
  "license": "Apache-2.0",
  "main": "./lib/ejs.js",
  "maintainers": [
    {
      "name": "mde",
      "email": "mde@fleegix.org"
    }
  ],
  "name": "ejs",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git://github.com/mde/ejs.git"
  },
  "scripts": {
    "coverage": "istanbul cover node_modules/mocha/bin/_mocha",
    "devdoc": "jake doc[dev]",
    "doc": "jake doc",
    "lint": "eslint \"**/*.js\" Jakefile",
    "test": "jake test"
  },
  "version": "2.5.7"
}

},{}],8:[function(require,module,exports){
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function (window, document, exportName, undefined) {
    'use strict';

    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
    var TEST_ELEMENT = document.createElement('div');

    var TYPE_FUNCTION = 'function';

    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;

    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */
    function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }

    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */
    function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }

    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */
    function each(obj, iterator, context) {
        var i;

        if (!obj) {
            return;
        }

        if (obj.forEach) {
            obj.forEach(iterator, context);
        } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else {
            for (i in obj) {
                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
        }
    }

    /**
     * wrap a method with a deprecation warning and stack trace
     * @param {Function} method
     * @param {String} name
     * @param {String} message
     * @returns {Function} A new function wrapping the supplied method.
     */
    function deprecate(method, name, message) {
        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
        return function () {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

            var log = window.console && (window.console.warn || window.console.log);
            if (log) {
                log.call(window.console, deprecationMessage, stack);
            }
            return method.apply(this, arguments);
        };
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} target
     * @param {...Object} objects_to_assign
     * @returns {Object} target
     */
    var assign;
    if (typeof Object.assign !== 'function') {
        assign = function assign(target) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var source = arguments[index];
                if (source !== undefined && source !== null) {
                    for (var nextKey in source) {
                        if (source.hasOwnProperty(nextKey)) {
                            output[nextKey] = source[nextKey];
                        }
                    }
                }
            }
            return output;
        };
    } else {
        assign = Object.assign;
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge=false]
     * @returns {Object} dest
     */
    var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while (i < keys.length) {
            if (!merge || merge && dest[keys[i]] === undefined) {
                dest[keys[i]] = src[keys[i]];
            }
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');

    /**
     * merge the values from src in the dest.
     * means that properties that exist in dest will not be overwritten by src
     * @param {Object} dest
     * @param {Object} src
     * @returns {Object} dest
     */
    var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');

    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */
    function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;

        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;

        if (properties) {
            assign(childP, properties);
        }
    }

    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */
    function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }

    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */
    function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
        }
        return val;
    }

    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */
    function ifUndefined(val1, val2) {
        return val1 === undefined ? val2 : val1;
    }

    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function addEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.addEventListener(type, handler, false);
        });
    }

    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function removeEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.removeEventListener(type, handler, false);
        });
    }

    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
    function hasParent(node, parent) {
        while (node) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }

    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */
    function inStr(str, find) {
        return str.indexOf(find) > -1;
    }

    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */
    function splitStr(str) {
        return str.trim().split(/\s+/g);
    }

    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }

    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */
    function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }

    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */
    function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;

        while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
                results.push(src[i]);
            }
            values[i] = val;
            i++;
        }

        if (sort) {
            if (!key) {
                results = results.sort();
            } else {
                results = results.sort(function sortUniqueArray(a, b) {
                    return a[key] > b[key];
                });
            }
        }

        return results;
    }

    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */
    function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);

        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;

            if (prop in obj) {
                return prop;
            }
            i++;
        }
        return undefined;
    }

    /**
     * get a unique id
     * @returns {number} uniqueId
     */
    var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }

    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */
    function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }

    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

    var SUPPORT_TOUCH = 'ontouchstart' in window;
    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';

    var COMPUTE_INTERVAL = 25;

    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;

    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;

    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

    var PROPS_XY = ['x', 'y'];
    var PROPS_CLIENT_XY = ['clientX', 'clientY'];

    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */
    function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;

        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function (ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
                self.handler(ev);
            }
        };

        this.init();
    }

    Input.prototype = {
        /**
         * should handle the inputEvent data and trigger the callback
         * @virtual
         */
        handler: function () {},

        /**
         * bind the events
         */
        init: function () {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },

        /**
         * unbind the events
         */
        destroy: function () {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };

    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */
    function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;

        if (inputClass) {
            Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
        } else {
            Type = TouchMouseInput;
        }
        return new Type(manager, inputHandler);
    }

    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */
    function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;

        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;

        if (isFirst) {
            manager.session = {};
        }

        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;

        // compute scale, rotation etc
        computeInputData(manager, input);

        // emit secret event
        manager.emit('hammer.input', input);

        manager.recognize(input);
        manager.session.prevInput = input;
    }

    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */
    function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;

        // store the first input to calculate the distance and direction
        if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
        }

        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
            session.firstMultiple = false;
        }

        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;

        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);

        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);

        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;

        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;

        computeIntervalInputData(session, input);

        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
        }
        input.target = target;
    }

    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};

        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };

            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }

        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }

    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */
    function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity,
            velocityX,
            velocityY,
            direction;

        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;

            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);

            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }

        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }

    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */
    function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }

        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }

    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */
    function getCenter(pointers) {
        var pointersLength = pointers.length;

        // no need to loop when only one touch
        if (pointersLength === 1) {
            return {
                x: round(pointers[0].clientX),
                y: round(pointers[0].clientY)
            };
        }

        var x = 0,
            y = 0,
            i = 0;
        while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }

        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }

    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */
    function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }

    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */
    function getDirection(x, y) {
        if (x === y) {
            return DIRECTION_NONE;
        }

        if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }

    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */
    function getDistance(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];

        return Math.sqrt(x * x + y * y);
    }

    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */
    function getAngle(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }

    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */
    function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }

    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */
    function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };

    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */
    function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;

        this.pressed = false; // mousedown state

        Input.apply(this, arguments);
    }

    inherit(MouseInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];

            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) {
                this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which !== 1) {
                eventType = INPUT_END;
            }

            // mouse must be down
            if (!this.pressed) {
                return;
            }

            if (eventType & INPUT_END) {
                this.pressed = false;
            }

            this.callback(this.manager, eventType, {
                pointers: [ev],
                changedPointers: [ev],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });

    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };

    // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };

    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

    // IE10 has prefixed support, and case-sensitive
    if (window.MSPointerEvent && !window.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }

    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */
    function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;

        Input.apply(this, arguments);

        this.store = this.manager.session.pointerEvents = [];
    }

    inherit(PointerEventInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;

            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

            var isTouch = pointerType == INPUT_TYPE_TOUCH;

            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                removePointer = true;
            }

            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) {
                return;
            }

            // update the event in the store
            store[storeIndex] = ev;

            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [ev],
                pointerType: pointerType,
                srcEvent: ev
            });

            if (removePointer) {
                // remove from the store
                store.splice(storeIndex, 1);
            }
        }
    });

    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Touch events input
     * @constructor
     * @extends Input
     */
    function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;

        Input.apply(this, arguments);
    }

    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

            // should we handle the touch events?
            if (type === INPUT_START) {
                this.started = true;
            }

            if (!this.started) {
                return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type);

            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                this.started = false;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);

        if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
        }

        return [all, changed];
    }

    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */
    function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};

        Input.apply(this, arguments);
    }

    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
                return;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;

        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
        }

        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target;

        // get target touches from touches
        targetTouches = allTouches.filter(function (touch) {
            return hasParent(touch.target, target);
        });

        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }

        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
                changedTargetTouches.push(changedTouches[i]);
            }

            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
                delete targetIds[changedTouches[i].identifier];
            }
            i++;
        }

        if (!changedTargetTouches.length) {
            return;
        }

        return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
    }

    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */

    var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;

    function TouchMouseInput() {
        Input.apply(this, arguments);

        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);

        this.primaryTouch = null;
        this.lastTouches = [];
    }

    inherit(TouchMouseInput, Input, {
        /**
         * handle mouse and touch events
         * @param {Hammer} manager
         * @param {String} inputEvent
         * @param {Object} inputData
         */
        handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
                isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
                return;
            }

            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
            if (isTouch) {
                recordTouches.call(this, inputEvent, inputData);
            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
                return;
            }

            this.callback(manager, inputEvent, inputData);
        },

        /**
         * remove the event listeners
         */
        destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });

    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            setLastTouch.call(this, eventData);
        }
    }

    function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];

        if (touch.identifier === this.primaryTouch) {
            var lastTouch = { x: touch.clientX, y: touch.clientY };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function () {
                var i = lts.indexOf(lastTouch);
                if (i > -1) {
                    lts.splice(i, 1);
                }
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }

    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX,
            y = eventData.srcEvent.clientY;
        for (var i = 0; i < this.lastTouches.length; i++) {
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x),
                dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
                return true;
            }
        }
        return false;
    }

    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

    // magical touchAction value
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    var TOUCH_ACTION_MAP = getTouchActionProps();

    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */
    function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }

    TouchAction.prototype = {
        /**
         * set the touchAction value on the element or enable the polyfill
         * @param {String} value
         */
        set: function (value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
                value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
        },

        /**
         * just re-set the touchAction value
         */
        update: function () {
            this.set(this.manager.options.touchAction);
        },

        /**
         * compute the value for the touchAction property based on the recognizer's settings
         * @returns {String} value
         */
        compute: function () {
            var actions = [];
            each(this.manager.recognizers, function (recognizer) {
                if (boolOrFn(recognizer.options.enable, [recognizer])) {
                    actions = actions.concat(recognizer.getTouchAction());
                }
            });
            return cleanTouchActions(actions.join(' '));
        },

        /**
         * this method is called on each input cycle and provides the preventing of the browser behavior
         * @param {Object} input
         */
        preventDefaults: function (input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;

            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

            if (hasNone) {
                //do not prevent defaults if this is a tap gesture

                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;

                if (isTapPointer && isTapMovement && isTapTouchTime) {
                    return;
                }
            }

            if (hasPanX && hasPanY) {
                // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
                return;
            }

            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
                return this.preventSrc(srcEvent);
            }
        },

        /**
         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
         * @param {Object} srcEvent
         */
        preventSrc: function (srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };

    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */
    function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
        }

        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
        }

        // pan-x OR pan-y
        if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }

        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
        }

        return TOUCH_ACTION_AUTO;
    }

    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) {
            return false;
        }
        var touchMap = {};
        var cssSupports = window.CSS && window.CSS.supports;
        ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {

            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
    }

    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;

    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */
    function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});

        this.id = uniqueId();

        this.manager = null;

        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);

        this.state = STATE_POSSIBLE;

        this.simultaneous = {};
        this.requireFail = [];
    }

    Recognizer.prototype = {
        /**
         * @virtual
         * @type {Object}
         */
        defaults: {},

        /**
         * set options
         * @param {Object} options
         * @return {Recognizer}
         */
        set: function (options) {
            assign(this.options, options);

            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },

        /**
         * recognize simultaneous with an other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        recognizeWith: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },

        /**
         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRecognizeWith: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },

        /**
         * recognizer can only run when an other is failing
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        requireFailure: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },

        /**
         * drop the requireFailure link. it does not remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRequireFailure: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) {
                this.requireFail.splice(index, 1);
            }
            return this;
        },

        /**
         * has require failures boolean
         * @returns {boolean}
         */
        hasRequireFailures: function () {
            return this.requireFail.length > 0;
        },

        /**
         * if the recognizer can recognize simultaneous with an other recognizer
         * @param {Recognizer} otherRecognizer
         * @returns {Boolean}
         */
        canRecognizeWith: function (otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },

        /**
         * You should use `tryEmit` instead of `emit` directly to check
         * that all the needed recognizers has failed before emitting.
         * @param {Object} input
         */
        emit: function (input) {
            var self = this;
            var state = this.state;

            function emit(event) {
                self.manager.emit(event, input);
            }

            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }

            emit(self.options.event); // simple 'eventName' events

            if (input.additionalEvent) {
                // additional event(panleft, panright, pinchin, pinchout...)
                emit(input.additionalEvent);
            }

            // panend and pancancel
            if (state >= STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }
        },

        /**
         * Check that all the require failure recognizers has failed,
         * if true, it emits a gesture event,
         * otherwise, setup the state to FAILED.
         * @param {Object} input
         */
        tryEmit: function (input) {
            if (this.canEmit()) {
                return this.emit(input);
            }
            // it's failing anyway
            this.state = STATE_FAILED;
        },

        /**
         * can we emit?
         * @returns {boolean}
         */
        canEmit: function () {
            var i = 0;
            while (i < this.requireFail.length) {
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                    return false;
                }
                i++;
            }
            return true;
        },

        /**
         * update the recognizer
         * @param {Object} inputData
         */
        recognize: function (inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);

            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }

            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone);

            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                this.tryEmit(inputDataClone);
            }
        },

        /**
         * return the state of the recognizer
         * the actual recognizing happens in this method
         * @virtual
         * @param {Object} inputData
         * @returns {Const} STATE
         */
        process: function (inputData) {}, // jshint ignore:line

        /**
         * return the preferred touch-action
         * @virtual
         * @returns {Array}
         */
        getTouchAction: function () {},

        /**
         * called when the gesture isn't allowed to recognize
         * like when another is being recognized or it is disabled
         * @virtual
         */
        reset: function () {}
    };

    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */
    function stateStr(state) {
        if (state & STATE_CANCELLED) {
            return 'cancel';
        } else if (state & STATE_ENDED) {
            return 'end';
        } else if (state & STATE_CHANGED) {
            return 'move';
        } else if (state & STATE_BEGAN) {
            return 'start';
        }
        return '';
    }

    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */
    function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
            return 'down';
        } else if (direction == DIRECTION_UP) {
            return 'up';
        } else if (direction == DIRECTION_LEFT) {
            return 'left';
        } else if (direction == DIRECTION_RIGHT) {
            return 'right';
        }
        return '';
    }

    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */
    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
            return manager.get(otherRecognizer);
        }
        return otherRecognizer;
    }

    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */
    function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }

    inherit(AttrRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof AttrRecognizer
         */
        defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
        },

        /**
         * Used to check if it the recognizer receives valid input, like input.distance > 10.
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {Boolean} recognized
         */
        attrTest: function (input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },

        /**
         * Process the input and return the state for the recognizer
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {*} State
         */
        process: function (input) {
            var state = this.state;
            var eventType = input.eventType;

            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);

            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
                if (eventType & INPUT_END) {
                    return state | STATE_ENDED;
                } else if (!(state & STATE_BEGAN)) {
                    return STATE_BEGAN;
                }
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });

    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);

        this.pX = null;
        this.pY = null;
    }

    inherit(PanRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PanRecognizer
         */
        defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },

        getTouchAction: function () {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) {
                actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
                actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
        },

        directionTest: function (input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;

            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },

        attrTest: function (input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        },

        emit: function (input) {

            this.pX = input.deltaX;
            this.pY = input.deltaY;

            var direction = directionStr(input.direction);

            if (direction) {
                input.additionalEvent = this.options.event + direction;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */
    function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(PinchRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function (input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },

        emit: function (input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */
    function PressRecognizer() {
        Recognizer.apply(this, arguments);

        this._timer = null;
        this._input = null;
    }

    inherit(PressRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PressRecognizer
         */
        defaults: {
            event: 'press',
            pointers: 1,
            time: 251, // minimal time of the pointer to be pressed
            threshold: 9 // a minimal movement is ok, but keep it low
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_AUTO];
        },

        process: function (input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;

            this._input = input;

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
                this.reset();
            } else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function () {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) {
                return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
        },

        reset: function () {
            clearTimeout(this._timer);
        },

        emit: function (input) {
            if (this.state !== STATE_RECOGNIZED) {
                return;
            }

            if (input && input.eventType & INPUT_END) {
                this.manager.emit(this.options.event + 'up', input);
            } else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */
    function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(RotateRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof RotateRecognizer
         */
        defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function (input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });

    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof SwipeRecognizer
         */
        defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },

        getTouchAction: function () {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },

        attrTest: function (input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
                velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
                velocity = input.overallVelocityY;
            }

            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },

        emit: function (input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) {
                this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
        }
    });

    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */
    function TapRecognizer() {
        Recognizer.apply(this, arguments);

        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;

        this._timer = null;
        this._input = null;
        this.count = 0;
    }

    inherit(TapRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300, // max time between the multi-tap taps
            time: 250, // max time of the pointer to be down (like finger on the screen)
            threshold: 9, // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_MANIPULATION];
        },

        process: function (input) {
            var options = this.options;

            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;

            this.reset();

            if (input.eventType & INPUT_START && this.count === 0) {
                return this.failTimeout();
            }

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) {
                    return this.failTimeout();
                }

                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

                this.pTime = input.timeStamp;
                this.pCenter = input.center;

                if (!validMultiTap || !validInterval) {
                    this.count = 1;
                } else {
                    this.count += 1;
                }

                this._input = input;

                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) {
                        return STATE_RECOGNIZED;
                    } else {
                        this._timer = setTimeoutContext(function () {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },

        failTimeout: function () {
            this._timer = setTimeoutContext(function () {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },

        reset: function () {
            clearTimeout(this._timer);
        },

        emit: function () {
            if (this.state == STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Simple way to create a manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }

    /**
     * @const {string}
     */
    Hammer.VERSION = '2.0.7';

    /**
     * default settings
     * @namespace
     */
    Hammer.defaults = {
        /**
         * set if DOM events are being triggered.
         * But this is slower and unused by simple implementations, so disabled by default.
         * @type {Boolean}
         * @default false
         */
        domEvents: false,

        /**
         * The value for the touchAction property/fallback.
         * When set to `compute` it will magically set the correct value based on the added recognizers.
         * @type {String}
         * @default compute
         */
        touchAction: TOUCH_ACTION_COMPUTE,

        /**
         * @type {Boolean}
         * @default true
         */
        enable: true,

        /**
         * EXPERIMENTAL FEATURE -- can be removed/changed
         * Change the parent input target element.
         * If Null, then it is being set the to main element.
         * @type {Null|EventTarget}
         * @default null
         */
        inputTarget: null,

        /**
         * force an input class
         * @type {Null|Function}
         * @default null
         */
        inputClass: null,

        /**
         * Default recognizer setup when calling `Hammer()`
         * When creating a new Manager these will be skipped.
         * @type {Array}
         */
        preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],

        /**
         * Some CSS properties can be used to improve the working of Hammer.
         * Add them to this method and they will be set when creating a new Manager.
         * @namespace
         */
        cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };

    var STOP = 1;
    var FORCED_STOP = 2;

    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});

        this.options.inputTarget = this.options.inputTarget || element;

        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};

        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);

        toggleCssProps(this, true);

        each(this.options.recognizers, function (item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }

    Manager.prototype = {
        /**
         * set options
         * @param {Object} options
         * @returns {Manager}
         */
        set: function (options) {
            assign(this.options, options);

            // Options that need a little more setup
            if (options.touchAction) {
                this.touchAction.update();
            }
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },

        /**
         * stop recognizing for this session.
         * This session will be discarded, when a new [input]start event is fired.
         * When forced, the recognizer cycle is stopped immediately.
         * @param {Boolean} [force]
         */
        stop: function (force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },

        /**
         * run the recognizers!
         * called by the inputHandler function on every movement of the pointers (touches)
         * it walks through all the recognizers and tries to detect the gesture that is being made
         * @param {Object} inputData
         */
        recognize: function (inputData) {
            var session = this.session;
            if (session.stopped) {
                return;
            }

            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);

            var recognizer;
            var recognizers = this.recognizers;

            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;

            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                curRecognizer = session.curRecognizer = null;
            }

            var i = 0;
            while (i < recognizers.length) {
                recognizer = recognizers[i];

                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && ( // 1
                !curRecognizer || recognizer == curRecognizer || // 2
                recognizer.canRecognizeWith(curRecognizer))) {
                    // 3
                    recognizer.recognize(inputData);
                } else {
                    recognizer.reset();
                }

                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    curRecognizer = session.curRecognizer = recognizer;
                }
                i++;
            }
        },

        /**
         * get a recognizer by its event name.
         * @param {Recognizer|String} recognizer
         * @returns {Recognizer|Null}
         */
        get: function (recognizer) {
            if (recognizer instanceof Recognizer) {
                return recognizer;
            }

            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
                if (recognizers[i].options.event == recognizer) {
                    return recognizers[i];
                }
            }
            return null;
        },

        /**
         * add a recognizer to the manager
         * existing recognizers with the same event name will be removed
         * @param {Recognizer} recognizer
         * @returns {Recognizer|Manager}
         */
        add: function (recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
                return this;
            }

            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) {
                this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;

            this.touchAction.update();
            return recognizer;
        },

        /**
         * remove a recognizer by name or instance
         * @param {Recognizer|String} recognizer
         * @returns {Manager}
         */
        remove: function (recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
                return this;
            }

            recognizer = this.get(recognizer);

            // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, recognizer);

                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }

            return this;
        },

        /**
         * bind event
         * @param {String} events
         * @param {Function} handler
         * @returns {EventEmitter} this
         */
        on: function (events, handler) {
            if (events === undefined) {
                return;
            }
            if (handler === undefined) {
                return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },

        /**
         * unbind event, leave emit blank to remove all handlers
         * @param {String} events
         * @param {Function} [handler]
         * @returns {EventEmitter} this
         */
        off: function (events, handler) {
            if (events === undefined) {
                return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
                if (!handler) {
                    delete handlers[event];
                } else {
                    handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
                }
            });
            return this;
        },

        /**
         * emit event to the listeners
         * @param {String} event
         * @param {Object} data
         */
        emit: function (event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
                triggerDomEvent(event, data);
            }

            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
                return;
            }

            data.type = event;
            data.preventDefault = function () {
                data.srcEvent.preventDefault();
            };

            var i = 0;
            while (i < handlers.length) {
                handlers[i](data);
                i++;
            }
        },

        /**
         * destroy the manager and unbinds all events
         * it doesn't unbind dom events, that is the user own responsibility
         */
        destroy: function () {
            this.element && toggleCssProps(this, false);

            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };

    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */
    function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) {
            return;
        }
        var prop;
        each(manager.options.cssProps, function (value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else {
                element.style[prop] = manager.oldCssProps[prop] || '';
            }
        });
        if (!add) {
            manager.oldCssProps = {};
        }
    }

    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */
    function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }

    assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,

        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,

        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,

        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,

        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,

        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,

        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });

    // this prevents errors when Hammer is loaded in the presence of an AMD
    //  style loader but by script tag, not by the loader.
    var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line
    freeGlobal.Hammer = Hammer;

    if (typeof define === 'function' && define.amd) {
        define(function () {
            return Hammer;
        });
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = Hammer;
    } else {
        window[exportName] = Hammer;
    }
})(window, document, 'Hammer');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],9:[function(require,module,exports){
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery', 'hammerjs'], factory);
    } else if (typeof exports === 'object') {
        factory(require('jquery'), require('hammerjs'));
    } else {
        factory(jQuery, Hammer);
    }
})(function ($, Hammer) {
    function hammerify(el, options) {
        var $el = $(el);
        if (!$el.data("hammer")) {
            $el.data("hammer", new Hammer($el[0], options));
        }
    }

    $.fn.hammer = function (options) {
        return this.each(function () {
            hammerify(this, options);
        });
    };

    // extend the emit method to also trigger jQuery events
    Hammer.Manager.prototype.emit = function (originalEmit) {
        return function (type, data) {
            originalEmit.call(this, type, data);
            $(this.element).trigger({
                type: type,
                gesture: data
            });
        };
    }(Hammer.Manager.prototype.emit);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5oYW1tZXIuanMiXSwibmFtZXMiOlsiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJyZXF1aXJlIiwialF1ZXJ5IiwiSGFtbWVyIiwiJCIsImhhbW1lcmlmeSIsImVsIiwib3B0aW9ucyIsIiRlbCIsImRhdGEiLCJmbiIsImhhbW1lciIsImVhY2giLCJNYW5hZ2VyIiwicHJvdG90eXBlIiwiZW1pdCIsIm9yaWdpbmFsRW1pdCIsInR5cGUiLCJjYWxsIiwiZWxlbWVudCIsInRyaWdnZXIiLCJnZXN0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQyxXQUFTQSxPQUFULEVBQWtCO0FBQ2YsUUFBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxPQUFPQyxHQUEzQyxFQUFnRDtBQUM1Q0QsZUFBTyxDQUFDLFFBQUQsRUFBVyxVQUFYLENBQVAsRUFBK0JELE9BQS9CO0FBQ0gsS0FGRCxNQUVPLElBQUksT0FBT0csT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUNwQ0gsZ0JBQVFJLFFBQVEsUUFBUixDQUFSLEVBQTJCQSxRQUFRLFVBQVIsQ0FBM0I7QUFDSCxLQUZNLE1BRUE7QUFDSEosZ0JBQVFLLE1BQVIsRUFBZ0JDLE1BQWhCO0FBQ0g7QUFDSixDQVJBLEVBUUMsVUFBU0MsQ0FBVCxFQUFZRCxNQUFaLEVBQW9CO0FBQ2xCLGFBQVNFLFNBQVQsQ0FBbUJDLEVBQW5CLEVBQXVCQyxPQUF2QixFQUFnQztBQUM1QixZQUFJQyxNQUFNSixFQUFFRSxFQUFGLENBQVY7QUFDQSxZQUFHLENBQUNFLElBQUlDLElBQUosQ0FBUyxRQUFULENBQUosRUFBd0I7QUFDcEJELGdCQUFJQyxJQUFKLENBQVMsUUFBVCxFQUFtQixJQUFJTixNQUFKLENBQVdLLElBQUksQ0FBSixDQUFYLEVBQW1CRCxPQUFuQixDQUFuQjtBQUNIO0FBQ0o7O0FBRURILE1BQUVNLEVBQUYsQ0FBS0MsTUFBTCxHQUFjLFVBQVNKLE9BQVQsRUFBa0I7QUFDNUIsZUFBTyxLQUFLSyxJQUFMLENBQVUsWUFBVztBQUN4QlAsc0JBQVUsSUFBVixFQUFnQkUsT0FBaEI7QUFDSCxTQUZNLENBQVA7QUFHSCxLQUpEOztBQU1BO0FBQ0FKLFdBQU9VLE9BQVAsQ0FBZUMsU0FBZixDQUF5QkMsSUFBekIsR0FBaUMsVUFBU0MsWUFBVCxFQUF1QjtBQUNwRCxlQUFPLFVBQVNDLElBQVQsRUFBZVIsSUFBZixFQUFxQjtBQUN4Qk8seUJBQWFFLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0JELElBQXhCLEVBQThCUixJQUE5QjtBQUNBTCxjQUFFLEtBQUtlLE9BQVAsRUFBZ0JDLE9BQWhCLENBQXdCO0FBQ3BCSCxzQkFBTUEsSUFEYztBQUVwQkkseUJBQVNaO0FBRlcsYUFBeEI7QUFJSCxTQU5EO0FBT0gsS0FSK0IsQ0FRN0JOLE9BQU9VLE9BQVAsQ0FBZUMsU0FBZixDQUF5QkMsSUFSSSxDQUFoQztBQVNILENBaENBLENBQUQiLCJmaWxlIjoianF1ZXJ5LmhhbW1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5JywgJ2hhbW1lcmpzJ10sIGZhY3RvcnkpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdoYW1tZXJqcycpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmFjdG9yeShqUXVlcnksIEhhbW1lcik7XHJcbiAgICB9XHJcbn0oZnVuY3Rpb24oJCwgSGFtbWVyKSB7XHJcbiAgICBmdW5jdGlvbiBoYW1tZXJpZnkoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgJGVsID0gJChlbCk7XHJcbiAgICAgICAgaWYoISRlbC5kYXRhKFwiaGFtbWVyXCIpKSB7XHJcbiAgICAgICAgICAgICRlbC5kYXRhKFwiaGFtbWVyXCIsIG5ldyBIYW1tZXIoJGVsWzBdLCBvcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICQuZm4uaGFtbWVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGhhbW1lcmlmeSh0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZXh0ZW5kIHRoZSBlbWl0IG1ldGhvZCB0byBhbHNvIHRyaWdnZXIgalF1ZXJ5IGV2ZW50c1xyXG4gICAgSGFtbWVyLk1hbmFnZXIucHJvdG90eXBlLmVtaXQgPSAoZnVuY3Rpb24ob3JpZ2luYWxFbWl0KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHtcclxuICAgICAgICAgICAgb3JpZ2luYWxFbWl0LmNhbGwodGhpcywgdHlwZSwgZGF0YSk7XHJcbiAgICAgICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBnZXN0dXJlOiBkYXRhXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KShIYW1tZXIuTWFuYWdlci5wcm90b3R5cGUuZW1pdCk7XHJcbn0pKTtcclxuIl19
},{"hammerjs":8,"jquery":10}],10:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function (global, factory) {

	if (typeof module === "object" && typeof module.exports === "object") {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//

	var arr = [];

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};

	var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	    version = "2.1.4",


	// Define a local copy of jQuery
	jQuery = function (selector, context) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([\da-z])/gi,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function (all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function () {
			return slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function (num) {
			return num != null ?

			// Return just the one element from the set
			num < 0 ? this[num + this.length] : this[num] :

			// Return all the elements in a clean array
			slice.call(this);
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function (elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function (callback, args) {
			return jQuery.each(this, callback, args);
		},

		map: function (callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function () {
			return this.pushStack(slice.apply(this, arguments));
		},

		first: function () {
			return this.eq(0);
		},

		last: function () {
			return this.eq(-1);
		},

		eq: function (i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function () {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if (typeof target !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {
			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function (msg) {
			throw new Error(msg);
		},

		noop: function () {},

		isFunction: function (obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function (obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function (obj) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
		},

		isPlainObject: function (obj) {
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function (obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function (obj) {
			if (obj == null) {
				return obj + "";
			}
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function (code) {
			var script,
			    indirect = eval;

			code = jQuery.trim(code);

			if (code) {
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if (code.indexOf("use strict") === 1) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild(script).parentNode.removeChild(script);
				} else {
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
					indirect(code);
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function (string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function (elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function (obj, callback, args) {
			var value,
			    i = 0,
			    length = obj.length,
			    isArray = isArraylike(obj);

			if (args) {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				}

				// A special, fast, case for the most common use of each
			} else {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function (text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function (arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArraylike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function (elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		merge: function (first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function (elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function (elems, callback, arg) {
			var value,
			    i = 0,
			    length = elems.length,
			    isArray = isArraylike(elems),
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function (fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = slice.call(arguments, 2);
			proxy = function () {
				return fn.apply(context || this, args.concat(slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArraylike(obj) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		if (obj.nodeType === 1 && length) {
			return true;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.2.0-pre
  * http://sizzlejs.com/
  *
  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2014-12-16
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function (a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function (list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace("w", "w#"),


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + characterEncoding + ")"),
			"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
			"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,
		    rescape = /'|\\/g,


		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function (_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function () {
			setDocument();
		};

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

			if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
				setDocument(context);
			}

			context = context || document;
			results = results || [];
			nodeType = context.nodeType;

			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			if (!seed && documentIsHTML) {

				// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
				if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
					// Speed-up: Sizzle("#ID")
					if (m = match[1]) {
						if (nodeType === 9) {
							elem = context.getElementById(m);
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document (jQuery #6963)
							if (elem && elem.parentNode) {
								// Handle the case where IE, Opera, and Webkit return items
								// by name instead of ID
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}
						} else {
							// Context is not a document
							if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
								results.push(elem);
								return results;
							}
						}

						// Speed-up: Sizzle("TAG")
					} else if (match[2]) {
						push.apply(results, context.getElementsByTagName(selector));
						return results;

						// Speed-up: Sizzle(".CLASS")
					} else if ((m = match[3]) && support.getElementsByClassName) {
						push.apply(results, context.getElementsByClassName(m));
						return results;
					}
				}

				// QSA path
				if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
					nid = old = expando;
					newContext = context;
					newSelector = nodeType !== 1 && selector;

					// qSA works strangely on Element-rooted queries
					// We can work around this by specifying an extra ID on the root
					// and working up from there (Thanks to Andrew Dupont for the technique)
					// IE 8 doesn't work on object elements
					if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
						groups = tokenize(selector);

						if (old = context.getAttribute("id")) {
							nid = old.replace(rescape, "\\$&");
						} else {
							context.setAttribute("id", nid);
						}
						nid = "[id='" + nid + "'] ";

						i = groups.length;
						while (i--) {
							groups[i] = nid + toSelector(groups[i]);
						}
						newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						newSelector = groups.join(",");
					}

					if (newSelector) {
						try {
							push.apply(results, newContext.querySelectorAll(newSelector));
							return results;
						} catch (qsaError) {} finally {
							if (!old) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created div and expects a boolean result
   */
		function assert(fn) {
			var div = document.createElement("div");

			try {
				return !!fn(div);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (div.parentNode) {
					div.parentNode.removeChild(div);
				}
				// release memory in IE
				div = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = attrs.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    parent,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// If no document and documentElement is available, return
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Set our document
			document = doc;
			docElem = doc.documentElement;
			parent = doc.defaultView;

			// Support: IE>8
			// If iframe document is assigned to "document" variable and if iframe has been reloaded,
			// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
			// IE6-8 do not support the defaultView property so parent will be undefined
			if (parent && parent !== parent.top) {
				// IE11 does not have attachEvent, so all must suffer
				if (parent.addEventListener) {
					parent.addEventListener("unload", unloadHandler, false);
				} else if (parent.attachEvent) {
					parent.attachEvent("onunload", unloadHandler);
				}
			}

			/* Support tests
   ---------------------------------------------------------------------- */
			documentIsHTML = !isXML(doc);

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (div) {
				div.className = "i";
				return !div.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (div) {
				div.appendChild(doc.createComment(""));
				return !div.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (div) {
				docElem.appendChild(div).id = expando;
				return !doc.getElementsByName || !doc.getElementsByName(expando).length;
			});

			// ID find and filter
			if (support.getById) {
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var m = context.getElementById(id);
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				};
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
			} else {
				// Support: IE6/7
				// getElementById is not reliable as a find shortcut
				delete Expr.find["ID"];

				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See http://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(doc.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (div) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// http://bugs.jquery.com/ticket/12359
					docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (div.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
					if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibing-combinator selector` fails
					if (!div.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (div) {
					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = doc.createElement("input");
					input.setAttribute("type", "hidden");
					div.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (div.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					div.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (div) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(div, "div");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(div, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully does not implement inclusive descendent
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return doc;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function (match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function (match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function (match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function (nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function (className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function (name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function (type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    outerCache,
						    node,
						    diff,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[expando] || (parent[expando] = {});
								cache = outerCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										outerCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}

								// Use previously-cached element index if available
							} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
								diff = cache[1];

								// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

									if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
										// Cache the index of each encountered element
										if (useCache) {
											(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
										}

										if (node === elem) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function (pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function (elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function (elem) {
					return elem === docElem;
				},

				"focus": function (elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": function (elem) {
					return elem.disabled === false;
				},

				"disabled": function (elem) {
					return elem.disabled === true;
				},

				"checked": function (elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function (elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function (elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function (elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function (elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function (elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function (elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    checkNonElements = base && dir === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});
							if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[dir] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function (seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is no seed and only one group
			if (match.length === 1) {

				// Take a shortcut and set the context if the root selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (div1) {
			// Should return 1, but returns 4 (following)
			return div1.compareDocumentPosition(document.createElement("div")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (div) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (div) {
			div.innerHTML = "<input/>";
			div.firstChild.setAttribute("value", "");
			return div.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (div) {
			return div.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;

	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				/* jshint -W018 */
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		if (typeof qualifier === "string") {
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			qualifier = jQuery.filter(qualifier, elements);
		}

		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) >= 0 !== not;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function (selector) {
			var i,
			    len = this.length,
			    ret = [],
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function (selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function (selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function (selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	    init = jQuery.fn.init = function (selector, context) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {
							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if (elem && elem.parentNode) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || rootjQuery).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) :
			// Execute immediately if ready is not present
			selector(jQuery);
		}

		if (selector.selector !== undefined) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.extend({
		dir: function (elem, dir, until) {
			var matched = [],
			    truncate = until !== undefined;

			while ((elem = elem[dir]) && elem.nodeType !== 9) {
				if (elem.nodeType === 1) {
					if (truncate && jQuery(elem).is(until)) {
						break;
					}
					matched.push(elem);
				}
			}
			return matched;
		},

		sibling: function (n, elem) {
			var matched = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					matched.push(n);
				}
			}

			return matched;
		}
	});

	jQuery.fn.extend({
		has: function (target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function (selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

			for (; i < l; i++) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
					// Always skip document fragments
					if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

						matched.push(cur);
						break;
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function (elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function (selector, context) {
			return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function (selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function (elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function (elem) {
			return jQuery.dir(elem, "parentNode");
		},
		parentsUntil: function (elem, i, until) {
			return jQuery.dir(elem, "parentNode", until);
		},
		next: function (elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function (elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function (elem) {
			return jQuery.dir(elem, "nextSibling");
		},
		prevAll: function (elem) {
			return jQuery.dir(elem, "previousSibling");
		},
		nextUntil: function (elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until);
		},
		prevUntil: function (elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until);
		},
		siblings: function (elem) {
			return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
		},
		children: function (elem) {
			return jQuery.sibling(elem.firstChild);
		},
		contents: function (elem) {
			return elem.contentDocument || jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {
				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.unique(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnotwhite = /\S+/g;

	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions(options) {
		var object = optionsCache[options] = {};
		jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);

		var // Last fire value (for non-forgettable lists)
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to know if list is currently firing
		firing,

		// First callback to fire (used internally by add and fireWith)
		firingStart,

		// End of the loop when firing
		firingLength,

		// Index of currently firing callback (modified by remove if needed)
		firingIndex,

		// Actual callback list
		list = [],

		// Stack of fire calls for repeatable lists
		stack = !options.once && [],

		// Fire callbacks
		fire = function (data) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for (; list && firingIndex < firingLength; firingIndex++) {
				if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if (list) {
				if (stack) {
					if (stack.length) {
						fire(stack.shift());
					}
				} else if (memory) {
					list = [];
				} else {
					self.disable();
				}
			}
		},

		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function () {
				if (list) {
					// First, we save the current length
					var start = list.length;
					(function add(args) {
						jQuery.each(args, function (_, arg) {
							var type = jQuery.type(arg);
							if (type === "function") {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && type !== "string") {
								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);
					// Do we need to add the callbacks to the
					// current firing batch?
					if (firing) {
						firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
					} else if (memory) {
						firingStart = start;
						fire(memory);
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function () {
				if (list) {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);
							// Handle firing indexes
							if (firing) {
								if (index <= firingLength) {
									firingLength--;
								}
								if (index <= firingIndex) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function (fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
			},
			// Remove all callbacks from the list
			empty: function () {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function () {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function () {
				return !list;
			},
			// Lock the list in its current state
			lock: function () {
				stack = undefined;
				if (!memory) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function () {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function (context, args) {
				if (list && (!fired || stack)) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					if (firing) {
						stack.push(args);
					} else {
						fire(args);
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function () {
				self.fireWith(this, arguments);
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function () {
				return !!fired;
			}
		};

		return self;
	};

	jQuery.extend({

		Deferred: function (func) {
			var tuples = [
			// action, add listener, listener list, final state
			["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
			    state = "pending",
			    promise = {
				state: function () {
					return state;
				},
				always: function () {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				then: function () /* fnDone, fnFail, fnProgress */{
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var fn = jQuery.isFunction(fns[i]) && fns[i];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
								} else {
									newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function (obj) {
					return obj != null ? jQuery.extend(obj, promise) : promise;
				}
			},
			    deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[3];

				// promise[ done | fail | progress ] = list.add
				promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {
						// state = [ resolved | rejected ]
						state = stateString;

						// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				// deferred[ resolve | reject | notify ]
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
					return this;
				};
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function (subordinate /* , ..., subordinateN */) {
			var i = 0,
			    resolveValues = slice.call(arguments),
			    length = resolveValues.length,


			// the count of uncompleted subordinates
			remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


			// Update function for both resolve and progress values
			updateFunc = function (i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values);
					} else if (! --remaining) {
						deferred.resolveWith(contexts, values);
					}
				};
			},
			    progressValues,
			    progressContexts,
			    resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});

	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function (fn) {
		// Add the callback
		jQuery.ready.promise().done(fn);

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function (hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		// Handle when the DOM is ready
		ready: function (wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);

			// Trigger any bound ready events
			if (jQuery.fn.triggerHandler) {
				jQuery(document).triggerHandler("ready");
				jQuery(document).off("ready");
			}
		}
	});

	/**
  * The ready event handler and self cleanup method
  */
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed, false);
		window.removeEventListener("load", completed, false);
		jQuery.ready();
	}

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// We once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if (document.readyState === "complete") {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout(jQuery.ready);
			} else {

				// Use the handy event callback
				document.addEventListener("DOMContentLoaded", completed, false);

				// A fallback to window.onload, that will always work
				window.addEventListener("load", completed, false);
			}
		}
		return readyList.promise(obj);
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {
				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function (elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		return chainable ? elems :

		// Gets
		bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
	};

	/**
  * Determines whether an object can have data
  */
	jQuery.acceptData = function (owner) {
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		// Support: Android<4,
		// Old WebKit does not have Object.preventExtensions/freeze method,
		// return new empty object instead with no [[set]] accessor
		Object.defineProperty(this.cache = {}, 0, {
			get: function () {
				return {};
			}
		});

		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;
	Data.accepts = jQuery.acceptData;

	Data.prototype = {
		key: function (owner) {
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return the key for a frozen object.
			if (!Data.accepts(owner)) {
				return 0;
			}

			var descriptor = {},

			// Check if the owner object already has a cache key
			unlock = owner[this.expando];

			// If not, create one
			if (!unlock) {
				unlock = Data.uid++;

				// Secure it in a non-enumerable, non-writable property
				try {
					descriptor[this.expando] = { value: unlock };
					Object.defineProperties(owner, descriptor);

					// Support: Android<4
					// Fallback to a less secure definition
				} catch (e) {
					descriptor[this.expando] = unlock;
					jQuery.extend(owner, descriptor);
				}
			}

			// Ensure the cache object
			if (!this.cache[unlock]) {
				this.cache[unlock] = {};
			}

			return unlock;
		},
		set: function (owner, data, value) {
			var prop,

			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key(owner),
			    cache = this.cache[unlock];

			// Handle: [ owner, key, value ] args
			if (typeof data === "string") {
				cache[data] = value;

				// Handle: [ owner, { properties } ] args
			} else {
				// Fresh assignments by object are shallow copied
				if (jQuery.isEmptyObject(cache)) {
					jQuery.extend(this.cache[unlock], data);
					// Otherwise, copy the properties one-by-one to the cache object
				} else {
					for (prop in data) {
						cache[prop] = data[prop];
					}
				}
			}
			return cache;
		},
		get: function (owner, key) {
			// Either a valid cache is found, or will be created.
			// New caches will be created and the unlock returned,
			// allowing direct access to the newly created
			// empty data object. A valid owner object must be provided.
			var cache = this.cache[this.key(owner)];

			return key === undefined ? cache : cache[key];
		},
		access: function (owner, key, value) {
			var stored;
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				stored = this.get(owner, key);

				return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
			}

			// [*]When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function (owner, key) {
			var i,
			    name,
			    camel,
			    unlock = this.key(owner),
			    cache = this.cache[unlock];

			if (key === undefined) {
				this.cache[unlock] = {};
			} else {
				// Support array or space separated string of keys
				if (jQuery.isArray(key)) {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat(key.map(jQuery.camelCase));
				} else {
					camel = jQuery.camelCase(key);
					// Try the string as a key before any manipulation
					if (key in cache) {
						name = [key, camel];
					} else {
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ? [name] : name.match(rnotwhite) || [];
					}
				}

				i = name.length;
				while (i--) {
					delete cache[name[i]];
				}
			}
		},
		hasData: function (owner) {
			return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
		},
		discard: function (owner) {
			if (owner[this.expando]) {
				delete this.cache[owner[this.expando]];
			}
		}
	};
	var data_priv = new Data();

	var data_user = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /([A-Z])/g;

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true : data === "false" ? false : data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				data_user.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function (elem) {
			return data_user.hasData(elem) || data_priv.hasData(elem);
		},

		data: function (elem, name, data) {
			return data_user.access(elem, name, data);
		},

		removeData: function (elem, name) {
			data_user.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to data_priv methods, these can be deprecated.
		_data: function (elem, name, data) {
			return data_priv.access(elem, name, data);
		},

		_removeData: function (elem, name) {
			data_priv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function (key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = data_user.get(elem);

					if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						data_priv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if (typeof key === "object") {
				return this.each(function () {
					data_user.set(this, key);
				});
			}

			return access(this, function (value) {
				var data,
				    camelKey = jQuery.camelCase(key);

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {
					// Attempt to get data from the cache
					// with the key as-is
					data = data_user.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to get data from the cache
					// with the key camelized
					data = data_user.get(elem, camelKey);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, camelKey, undefined);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = data_user.get(this, camelKey);

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					data_user.set(this, camelKey, value);

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if (key.indexOf("-") !== -1 && data !== undefined) {
						data_user.set(this, key, value);
					}
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function (key) {
			return this.each(function () {
				data_user.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function (elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = data_priv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = data_priv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function (elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function () {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function (elem, type) {
			var key = type + "queueHooks";
			return data_priv.get(elem, key) || data_priv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					data_priv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function (type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function (type) {
			return this.queue(type || "fx", []);
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function (type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function () {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = data_priv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHidden = function (elem, el) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	};

	var rcheckableType = /^(?:checkbox|radio)$/i;

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var strundefined = typeof undefined;

	support.focusinBubbles = "onfocusin" in window;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function (elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = data_priv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function (elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = data_priv.hasData(elem) && data_priv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;
				data_priv.remove(elem, "events");
			}
		},

		trigger: function (event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") >= 0) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && jQuery.acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function (event) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix(event);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue = [],
			    args = slice.call(arguments),
			    handlers = (data_priv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function (event, handlers) {
			var i,
			    matches,
			    sel,
			    handleObj,
			    handlerQueue = [],
			    delegateCount = handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.disabled !== true || event.type !== "click") {
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matches[sel] === undefined) {
								matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matches[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if (delegateCount < handlers.length) {
				handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function (event, original) {

				// Add which for key events
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function (event, original) {
				var eventDoc,
				    doc,
				    body,
				    button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if (!event.which && button !== undefined) {
					event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
				}

				return event;
			}
		},

		fix: function (event) {
			if (event[jQuery.expando]) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i,
			    prop,
			    copy,
			    type = event.type,
			    originalEvent = event,
			    fixHook = this.fixHooks[type];

			if (!fixHook) {
				this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
			}
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = new jQuery.Event(originalEvent);

			i = copy.length;
			while (i--) {
				prop = copy[i];
				event[prop] = originalEvent[prop];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if (!event.target) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function () {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function () {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function () {
					if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function (event) {
					return jQuery.nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function (event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function (type, elem, event, bubble) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true,
				originalEvent: {}
			});
			if (bubble) {
				jQuery.event.trigger(e, null, elem);
			} else {
				jQuery.event.dispatch.call(elem, e);
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false);
		}
	};

	jQuery.Event = function (src, props) {
		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
			// Support: Android<4.0
			src.returnValue === false ? returnTrue : returnFalse;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function () {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && e.preventDefault) {
				e.preventDefault();
			}
		},
		stopPropagation: function () {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && e.stopPropagation) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function () {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && e.stopImmediatePropagation) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// Support: Chrome 15+
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function (event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// Support: Firefox, Chrome, Safari
	// Create "bubbling" focus and blur events
	if (!support.focusinBubbles) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function (event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
			};

			jQuery.event.special[fix] = {
				setup: function () {
					var doc = this.ownerDocument || this,
					    attaches = data_priv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					data_priv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function () {
					var doc = this.ownerDocument || this,
					    attaches = data_priv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						data_priv.remove(doc, fix);
					} else {
						data_priv.access(doc, fix, attaches);
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function (types, selector, data, fn, /*INTERNAL*/one) {
			var origFn, type;

			// Types can be a map of types/handlers
			if (typeof types === "object") {
				// ( types-Object, selector, data )
				if (typeof selector !== "string") {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one);
				}
				return this;
			}

			if (data == null && fn == null) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return this;
			}

			if (one === 1) {
				origFn = fn;
				fn = function (event) {
					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		},
		one: function (types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1);
		},
		off: function (types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if (typeof types === "object") {
				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		},

		trigger: function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function (type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	    rtagName = /<([\w:]+)/,
	    rhtml = /<|&#?\w+;/,
	    rnoInnerhtml = /<(?:script|style|link)/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptType = /^$|\/(?:java|ecma)script/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,


	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [1, "<select multiple='multiple'>", "</select>"],

		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// Support: 1.x compatibility
	// Manipulating tables requires a tbody
	function manipulationTarget(elem, content) {
		return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
		}
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (data_priv.hasData(src)) {
			pdataOld = data_priv.access(src);
			pdataCur = data_priv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (data_user.hasData(src)) {
			udataOld = data_user.access(src);
			udataCur = jQuery.extend({}, udataOld);

			data_user.set(dest, udataCur);
		}
	}

	function getAll(context, tag) {
		var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];

		return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function (elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		buildFragment: function (elems, context, scripts, selection) {
			var elem,
			    tmp,
			    tag,
			    wrap,
			    contains,
			    j,
			    fragment = context.createDocumentFragment(),
			    nodes = [],
			    i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {

					// Add nodes directly
					if (jQuery.type(elem) === "object") {
						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

						// Convert non-html into a text node
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));

						// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild(context.createElement("div"));

						// Deserialize a standard representation
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, tmp.childNodes);

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while (elem = nodes[i++]) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if (selection && jQuery.inArray(elem, selection) !== -1) {
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				// Append to fragment
				tmp = getAll(fragment.appendChild(elem), "script");

				// Preserve script evaluation history
				if (contains) {
					setGlobalEval(tmp);
				}

				// Capture executables
				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			return fragment;
		},

		cleanData: function (elems) {
			var data,
			    elem,
			    type,
			    key,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (jQuery.acceptData(elem)) {
					key = elem[data_priv.expando];

					if (key && (data = data_priv.cache[key])) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}
						if (data_priv.cache[key]) {
							// Discard any remaining `private` data
							delete data_priv.cache[key];
						}
					}
				}
				// Discard any remaining `user` data
				delete data_user.cache[elem[data_user.expando]];
			}
		}
	});

	jQuery.fn.extend({
		text: function (value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function () {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function () {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function () {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function () {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		remove: function (selector, keepData /* Internal Use Only */) {
			var elem,
			    elems = selector ? jQuery.filter(selector, this) : this,
			    i = 0;

			for (; (elem = elems[i]) != null; i++) {
				if (!keepData && elem.nodeType === 1) {
					jQuery.cleanData(getAll(elem));
				}

				if (elem.parentNode) {
					if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
						setGlobalEval(getAll(elem, "script"));
					}
					elem.parentNode.removeChild(elem);
				}
			}

			return this;
		},

		empty: function () {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function (dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function (value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = value.replace(rxhtmlTag, "<$1></$2>");

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function () {
			var arg = arguments[0];

			// Make the changes, replacing each context element with the new content
			this.domManip(arguments, function (elem) {
				arg = this.parentNode;

				jQuery.cleanData(getAll(this));

				if (arg) {
					arg.replaceChild(elem, this);
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function (selector) {
			return this.remove(selector, true);
		},

		domManip: function (args, callback) {

			// Flatten any nested arrays
			args = concat.apply([], args);

			var fragment,
			    first,
			    scripts,
			    hasScripts,
			    node,
			    doc,
			    i = 0,
			    l = this.length,
			    set = this,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			// We can't cloneNode fragments that contain checked, in WebKit
			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return this.each(function (index) {
					var self = set.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					self.domManip(args, callback);
				});
			}

			if (l) {
				fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				if (first) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							// Keep references to cloned scripts for later restoration
							if (hasScripts) {
								// Support: QtWebKit
								// jQuery.merge because push.apply(_, arraylike) throws
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(this[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						// Reenable scripts
						jQuery.map(scripts, restoreScript);

						// Evaluate executable scripts on first document insertion
						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {
									// Optional AJAX dependency, but won't run scripts if not present
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
								}
							}
						}
					}
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});

	var iframe,
	    elemdisplay = {};

	/**
  * Retrieve the actual display of a element
  * @param {String} name nodeName of the element
  * @param {Object} doc Document object
  */
	// Called only from within defaultDisplay
	function actualDisplay(name, doc) {
		var style,
		    elem = jQuery(doc.createElement(name)).appendTo(doc.body),


		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?

		// Use of this method is a temporary fix (more like optimization) until something better comes along,
		// since it was removed from specification and supported only in FF
		style.display : jQuery.css(elem[0], "display");

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
  * Try to determine the default display value of an element
  * @param {String} nodeName
  */
	function defaultDisplay(nodeName) {
		var doc = document,
		    display = elemdisplay[nodeName];

		if (!display) {
			display = actualDisplay(nodeName, doc);

			// If the simple way fails, read from inside an iframe
			if (display === "none" || !display) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[0].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay(nodeName, doc);
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[nodeName] = display;
		}

		return display;
	}
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function (elem) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if (elem.ownerDocument.defaultView.opener) {
			return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
		}

		return window.getComputedStyle(elem, null);
	};

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,
		    style = elem.style;

		computed = computed || getStyles(elem);

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];
		}

		if (computed) {

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// Support: iOS < 6
			// A tribute to the "awesome hack by Dean Edwards"
			// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if (rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function () {
				if (conditionFn()) {
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	(function () {
		var pixelPositionVal,
		    boxSizingReliableVal,
		    docElem = document.documentElement,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		if (!div.style) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
		container.appendChild(div);

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computePixelPositionAndBoxSizingReliable() {
			div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
			div.innerHTML = "";
			docElem.appendChild(container);

			var divStyle = window.getComputedStyle(div, null);
			pixelPositionVal = divStyle.top !== "1%";
			boxSizingReliableVal = divStyle.width === "4px";

			docElem.removeChild(container);
		}

		// Support: node.js jsdom
		// Don't assume that getComputedStyle is a property of the global object
		if (window.getComputedStyle) {
			jQuery.extend(support, {
				pixelPosition: function () {

					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computePixelPositionAndBoxSizingReliable();
					return pixelPositionVal;
				},
				boxSizingReliable: function () {
					if (boxSizingReliableVal == null) {
						computePixelPositionAndBoxSizingReliable();
					}
					return boxSizingReliableVal;
				},
				reliableMarginRight: function () {

					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
					    marginDiv = div.appendChild(document.createElement("div"));

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					docElem.appendChild(container);

					ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);

					docElem.removeChild(container);
					div.removeChild(marginDiv);

					return ret;
				}
			});
		}
	})();

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function (elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
	    rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(style, name) {

		// Shortcut for names that are not vendor prefixed
		if (name in style) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    origName = name,
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name;
			}
		}

		return origName;
	}

	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i = extra === (isBorderBox ? "border" : "content") ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,
		    val = 0;

		for (; i < 4; i += 2) {
			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {
				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {
				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
		    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		    styles = getStyles(elem),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if (val <= 0 || val == null) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS(elem, name, styles);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    hidden,
		    values = [],
		    index = 0,
		    length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			values[index] = data_priv.get(elem, "olddisplay");
			display = elem.style.display;
			if (show) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if (!values[index] && display === "none") {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
				}
			} else {
				hidden = isHidden(elem);

				if (display !== "none" || !hidden) {
					data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function (elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function (elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    style = elem.style;

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number, add 'px' to the (except for certain CSS properties)
				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
					style[name] = value;
				}
			} else {
				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function (elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name);

			// Make sure that we're working with the right name
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function (elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function (elem, value, extra) {
				var styles = extra && getStyles(elem);
				return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
			}
		};
	});

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
		if (computed) {
			return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function (value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function (name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (jQuery.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function () {
			return showHide(this, true);
		},
		hide: function () {
			return showHide(this);
		},
		toggle: function (state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function (elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function () {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function (percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function (tween) {
				var result;

				if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function (tween) {
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function (tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function (p) {
			return p;
		},
		swing: function (p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    timerId,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
	    rrun = /queueHooks$/,
	    animationPrefilters = [defaultPrefilter],
	    tweeners = {
		"*": [function (prop, value) {
			var tween = this.createTween(prop, value),
			    target = tween.cur(),
			    parts = rfxnum.exec(value),
			    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


			// Starting value computation is required for potential unit mismatches
			start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
			    scale = 1,
			    maxIterations = 20;

			if (start && start[3] !== unit) {
				// Trust units reported by jQuery.css
				unit = unit || start[3];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style(tween.elem, prop, start + unit);

					// Update scale, tolerating zero or NaN from tween.cur(),
					// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
			}

			// Update tween properties
			if (parts) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
			}

			return tween;
		}]
	};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (tweeners[prop] || []).concat(tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		/* jshint validthis: true */
		var prop,
		    value,
		    toggle,
		    tween,
		    hooks,
		    oldfire,
		    display,
		    checkDisplay,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHidden(elem),
		    dataShow = data_priv.get(elem, "fxshow");

		// Handle queue: false promises
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {
				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Height/width overflow pass
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css(elem, "display");

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

			if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
				style.display = "inline-block";
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// show/hide pass
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.exec(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

				// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if (!jQuery.isEmptyObject(orig)) {
			if (dataShow) {
				if ("hidden" in dataShow) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = data_priv.access(elem, "fxshow", {});
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;

				data_priv.remove(elem, "fxshow");
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (prop in orig) {
				tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

			// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
			style.display = display;
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = animationPrefilters.length,
		    deferred = jQuery.Deferred().always(function () {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function () {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

			// Support: Android 2.3
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			} else {
				deferred.resolveWith(elem, [animation]);
				return false;
			}
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, { specialEasing: {} }, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function (prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function (gotoEnd) {
				var index = 0,

				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = animationPrefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		// attach callbacks from options
		return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweener: function (props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.split(" ");
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				tweeners[prop] = tweeners[prop] || [];
				tweeners[prop].unshift(callback);
			}
		},

		prefilter: function (callback, prepend) {
			if (prepend) {
				animationPrefilters.unshift(callback);
			} else {
				animationPrefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function (speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHidden).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function (prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function () {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || data_priv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function (type, clearQueue, gotoEnd) {
			var stopQueue = function (hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = data_priv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function (type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = data_priv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];
			// Checks the timer has not already been removed
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		if (timer()) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function () {
		if (!timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = setTimeout(next, time);
			hooks.stop = function () {
				clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var nodeHook,
	    boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function (name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function (name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function (elem, name, value) {
			var hooks,
			    ret,
			    nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === strundefined) {
				return jQuery.prop(elem, name, value);
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
			}

			if (value !== undefined) {

				if (value === null) {
					jQuery.removeAttr(elem, name);
				} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				} else {
					elem.setAttribute(name, value + "");
					return value;
				}
			} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			} else {
				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			}
		},

		removeAttr: function (elem, value) {
			var name,
			    propName,
			    i = 0,
			    attrNames = value && value.match(rnotwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					propName = jQuery.propFix[name] || name;

					// Boolean attributes get special treatment (#10870)
					if (jQuery.expr.match.bool.test(name)) {
						// Set corresponding property to false
						elem[propName] = false;
					}

					elem.removeAttribute(name);
				}
			}
		},

		attrHooks: {
			type: {
				set: function (elem, value) {
					if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function (elem, value, name) {
			if (value === false) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};
	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret, handle;
			if (!isXML) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[name];
				attrHandle[name] = ret;
				ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
				attrHandle[name] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i;

	jQuery.fn.extend({
		prop: function (name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function (name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function (elem, name, value) {
			var ret,
			    hooks,
			    notxml,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

			if (notxml) {
				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
			} else {
				return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
			}
		},

		propHooks: {
			tabIndex: {
				get: function (elem) {
					return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
				}
			}
		}
	});

	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function (elem) {
				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function (value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    proceed = typeof value === "string" && value,
			    i = 0,
			    len = this.length;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className));
				});
			}

			if (proceed) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function (value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    proceed = arguments.length === 0 || typeof value === "string" && value,
			    i = 0,
			    len = this.length;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className));
				});
			}
			if (proceed) {
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") >= 0) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim(cur) : "";
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function (value, stateVal) {
			var type = typeof value;

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
				});
			}

			return this.each(function () {
				if (type === "string") {
					// Toggle individual class names
					var className,
					    i = 0,
					    self = jQuery(this),
					    classNames = value.match(rnotwhite) || [];

					while (className = classNames[i++]) {
						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (type === strundefined || type === "boolean") {
					if (this.className) {
						// store className if set
						data_priv.set(this, "__className__", this.className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
				}
			});
		},

		hasClass: function (selector) {
			var className = " " + selector + " ",
			    i = 0,
			    l = this.length;
			for (; i < l; i++) {
				if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function (value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function (elem) {
					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim(jQuery.text(elem));
				}
			},
			select: {
				get: function (elem) {
					var value,
					    option,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one" || index < 0,
					    values = one ? null : [],
					    max = one ? index + 1 : options.length,
					    i = index < 0 ? max : one ? index : 0;

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// IE6-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) && (
						// Don't return options that are disabled or in a disabled optgroup
						support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function (elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];
						if (option.selected = jQuery.inArray(option.value, values) >= 0) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function (elem, value) {
				if (jQuery.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		},

		bind: function (types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function (types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function (selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function (selector, types, fn) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function (data) {
		return JSON.parse(data + "");
	};

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml, tmp;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rhash = /#.*$/,
	    rts = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,
	    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Document location
	ajaxLocation = window.location.href,


	// Segment location into parts
	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

			if (jQuery.isFunction(func)) {
				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {
					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {
			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {
									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s["throws"]) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function (target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function (url, options) {

			// If url is an object, simulate pre-1.5 signature
			if (typeof url === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			    responseHeaders,

			// timeout handle
			timeoutTimer,

			// Cross-domain detection vars
			parts,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup({}, options),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function (key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function () {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function (name, value) {
					var lname = name.toLowerCase();
					if (!state) {
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function (type) {
					if (!state) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function (map) {
					var code;
					if (map) {
						if (state < 2) {
							for (code in map) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[code] = [statusCode[code], map[code]];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						}
					}
					return this;
				},

				// Cancel the request
				abort: function (statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (state === 2) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if (!s.hasContent) {

				// If data is available, append data to url
				if (s.data) {
					cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if (s.cache === false) {
					s.url = rts.test(cacheURL) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace(rts, "$1_=" + nonce++) :

					// Otherwise add one to the end
					cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for (i in { success: 1, error: 1, complete: 1 }) {
				jqXHR[i](s[i]);
			}

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}
				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {
					// Propagate exception as error if not done
					if (state < 2) {
						done(-1, e);
						// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Called once
				if (state === 2) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if (timeoutTimer) {
					clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(statusCode);
				statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function (url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function (url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function (html) {
			var wrap;

			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function (html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function () {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		}
	});

	jQuery.expr.filters.hidden = function (elem) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};
	jQuery.expr.filters.visible = function (elem) {
		return !jQuery.expr.filters.hidden(elem);
	};

	var r20 = /%20/g,
	    rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {
			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					// Treat each array item as a scalar.
					add(prefix, v);
				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {
			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {
			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function (key, value) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
		};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	};

	jQuery.fn.extend({
		serialize: function () {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function () {
			return this.map(function () {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new XMLHttpRequest();
		} catch (e) {}
	};

	var xhrId = 0,
	    xhrCallbacks = {},
	    xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE9
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if (window.attachEvent) {
		window.attachEvent("onunload", function () {
			for (var key in xhrCallbacks) {
				xhrCallbacks[key]();
			}
		});
	}

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var callback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function (headers, complete) {
					var i,
					    xhr = options.xhr(),
					    id = ++xhrId;

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					callback = function (type) {
						return function () {
							if (callback) {
								delete xhrCallbacks[id];
								callback = xhr.onload = xhr.onerror = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {
									complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status, xhr.statusText);
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					xhr.onerror = callback("error");

					// Create the abort callback
					callback = xhrCallbacks[id] = callback("abort");

					try {
						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (callback) {
							throw e;
						}
					}
				},

				abort: function () {
					if (callback) {
						callback();
					}
				}
			};
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function (text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {
		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, callback;
			return {
				send: function (_, complete) {
					script = jQuery("<script>").prop({
						async: true,
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", callback = function (evt) {
						script.remove();
						callback = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});
					document.head.appendChild(script[0]);
				},
				abort: function () {
					if (callback) {
						callback();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {
				// Restore preexisting value
				window[callbackName] = overwritten;

				// Save back as free
				if (s[callbackName]) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (!data || typeof data !== "string") {
			return null;
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec(data),
		    scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = jQuery.buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off >= 0) {
			selector = jQuery.trim(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && typeof params === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);
			}).complete(callback && function (jqXHR, status) {
				self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.filters.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	var docElem = window.document.documentElement;

	/**
  * Gets a window from an element
  */
	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function (elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function (options) {
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var docElem,
			    win,
			    elem = this[0],
			    box = { top: 0, left: 0 },
			    doc = elem && elem.ownerDocument;

			if (!doc) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if (!jQuery.contains(docElem, elem)) {
				return box;
			}

			// Support: BlackBerry 5, iOS 3 (original iPhone)
			// If we don't have gBCR, just use 0,0 rather than error
			if (typeof elem.getBoundingClientRect !== strundefined) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow(doc);
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function () {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!jQuery.nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
				parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		offsetParent: function () {
			return this.map(function () {
				var offsetParent = this.offsetParent || docElem;

				while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length, null);
		};
	});

	// Support: Safari<7+, Chrome<37+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});

	// The number of elements contained in the matched element set
	jQuery.fn.size = function () {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (typeof noGlobal === strundefined) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],11:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function (filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function () {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};

// path.relative(from, to)
// posix version
exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};

exports.basename = function (path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  return splitPath(path)[3];
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("9FoBSB"))
},{"9FoBSB":12}],12:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = function () {
    var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
    var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

    if (canSetImmediate) {
        return function (f) {
            return window.setImmediate(f);
        };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxVQUFVQyxPQUFPQyxPQUFQLEdBQWlCLEVBQS9COztBQUVBRixRQUFRRyxRQUFSLEdBQW9CLFlBQVk7QUFDNUIsUUFBSUMsa0JBQWtCLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFDbkJBLE9BQU9DLFlBRFY7QUFFQSxRQUFJQyxVQUFVLE9BQU9GLE1BQVAsS0FBa0IsV0FBbEIsSUFDWEEsT0FBT0csV0FESSxJQUNXSCxPQUFPSSxnQkFEaEM7O0FBSUEsUUFBSUwsZUFBSixFQUFxQjtBQUNqQixlQUFPLFVBQVVNLENBQVYsRUFBYTtBQUFFLG1CQUFPTCxPQUFPQyxZQUFQLENBQW9CSSxDQUFwQixDQUFQO0FBQStCLFNBQXJEO0FBQ0g7O0FBRUQsUUFBSUgsT0FBSixFQUFhO0FBQ1QsWUFBSUksUUFBUSxFQUFaO0FBQ0FOLGVBQU9JLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLFVBQVVHLEVBQVYsRUFBYztBQUM3QyxnQkFBSUMsU0FBU0QsR0FBR0MsTUFBaEI7QUFDQSxnQkFBSSxDQUFDQSxXQUFXUixNQUFYLElBQXFCUSxXQUFXLElBQWpDLEtBQTBDRCxHQUFHRSxJQUFILEtBQVksY0FBMUQsRUFBMEU7QUFDdEVGLG1CQUFHRyxlQUFIO0FBQ0Esb0JBQUlKLE1BQU1LLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQix3QkFBSUMsS0FBS04sTUFBTU8sS0FBTixFQUFUO0FBQ0FEO0FBQ0g7QUFDSjtBQUNKLFNBVEQsRUFTRyxJQVRIOztBQVdBLGVBQU8sU0FBU2QsUUFBVCxDQUFrQmMsRUFBbEIsRUFBc0I7QUFDekJOLGtCQUFNUSxJQUFOLENBQVdGLEVBQVg7QUFDQVosbUJBQU9HLFdBQVAsQ0FBbUIsY0FBbkIsRUFBbUMsR0FBbkM7QUFDSCxTQUhEO0FBSUg7O0FBRUQsV0FBTyxTQUFTTCxRQUFULENBQWtCYyxFQUFsQixFQUFzQjtBQUN6QkcsbUJBQVdILEVBQVgsRUFBZSxDQUFmO0FBQ0gsS0FGRDtBQUdILENBakNrQixFQUFuQjs7QUFtQ0FqQixRQUFRcUIsS0FBUixHQUFnQixTQUFoQjtBQUNBckIsUUFBUXNCLE9BQVIsR0FBa0IsSUFBbEI7QUFDQXRCLFFBQVF1QixHQUFSLEdBQWMsRUFBZDtBQUNBdkIsUUFBUXdCLElBQVIsR0FBZSxFQUFmOztBQUVBLFNBQVNDLElBQVQsR0FBZ0IsQ0FBRTs7QUFFbEJ6QixRQUFRMEIsRUFBUixHQUFhRCxJQUFiO0FBQ0F6QixRQUFRMkIsV0FBUixHQUFzQkYsSUFBdEI7QUFDQXpCLFFBQVE0QixJQUFSLEdBQWVILElBQWY7QUFDQXpCLFFBQVE2QixHQUFSLEdBQWNKLElBQWQ7QUFDQXpCLFFBQVE4QixjQUFSLEdBQXlCTCxJQUF6QjtBQUNBekIsUUFBUStCLGtCQUFSLEdBQTZCTixJQUE3QjtBQUNBekIsUUFBUWdDLElBQVIsR0FBZVAsSUFBZjs7QUFFQXpCLFFBQVFpQyxPQUFSLEdBQWtCLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsVUFBTSxJQUFJQyxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNILENBRkQ7O0FBSUE7QUFDQW5DLFFBQVFvQyxHQUFSLEdBQWMsWUFBWTtBQUFFLFdBQU8sR0FBUDtBQUFZLENBQXhDO0FBQ0FwQyxRQUFRcUMsS0FBUixHQUFnQixVQUFVQyxHQUFWLEVBQWU7QUFDM0IsVUFBTSxJQUFJSCxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNILENBRkQiLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIl19
},{}]},{},[1])